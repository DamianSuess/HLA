// Assembly code emitted by HLA compiler
// Version 1.102 build 18984 (prototype)
// HLA compiler written by Randall Hyde
// GAS compatible output






  .text


        .global    preprocess_file
        .global    preprocess_line
        .global    ExceptionPtr__hla_
        .global    get_logical_value
        .global    shorthwExcept__hla_
        .global    MainPgmCoroutine__hla_
        .global    mark_relocation
        .global    DfltExHndlr__hla_
        .global    fasmAssembler
        .global    assemble_line
        .global    convert_expression
        .global    preevaluate_logical_expression
        .global    HWexcept__hla_
        .global    find_structure_end
        .global    process_symbolic_constants
        .global    Raise__hla_
        .global    _fasmMain
        .global    shortDfltExcept__hla_
        .extern    _c_newln
        .extern    _fasm_getenv
        .extern    _fasm_readFileIntoMemory
        .extern    _fasm_exists
        .extern    _fasm_create
        .extern    _c_putu32
        .extern    _c_puth32
        .extern    _c_putbuf
        .extern    _fasm_curDateTime
        .extern    _fasm_mseek
        .extern    _fasm_close
        .extern    _c_putc
        .extern    _c_puts
        .extern    abstract__hla_
        .extern    _fasm_rseek
        .extern    _fasm_write
        .extern    _fasm_open
        .extern    _fasm_exitProcess
        .extern    _fasm_read
        .extern    _fasm_seek


 .set exception__hla_3823, Raise__hla_
 .set MainPgmVMT__hla___hla_3735, MainPgmVMT__hla___hla_3737
 .set align_directive__hla_170, align_directive__hla_2851
 .set data_file__hla_210, data_file__hla_2835
 .set reserve_negative__hla_2815, reserve_negative__hla_2698
 .set reserve_twords__hla_319, reserve_twords__hla_2813
 .set reserve_negative__hla_2792, reserve_negative__hla_2698
 .set reserve_qwords__hla_318, reserve_qwords__hla_2790
 .set reserve_negative__hla_2770, reserve_negative__hla_2698
 .set reserve_pwords__hla_317, reserve_pwords__hla_2768
 .set reserve_negative__hla_2749, reserve_negative__hla_2698
 .set reserve_dwords__hla_316, reserve_dwords__hla_2747
 .set reserve_negative__hla_2729, reserve_negative__hla_2698
 .set reserve_words__hla_320, reserve_words__hla_2727
 .set reserve_negative__hla_2710, reserve_negative__hla_2698
 .set reserve_bytes__hla_315, reserve_bytes__hla_2708
 .set match_register_size__hla_2637, match_register_size__hla_2608
 .set match_register_size__hla_2618, match_register_size__hla_2608
 .set store_address_32bit_value__hla_2478, store_address_32bit_value__hla_2428
 .set instructions_2__hla_380, instructions_2__hla_390
 .set instructions_3__hla_381, instructions_3__hla_391
 .set instructions_4__hla_382, instructions_4__hla_392
 .set instructions_5__hla_383, instructions_5__hla_393
 .set instructions_6__hla_384, instructions_6__hla_394
 .set instructions_7__hla_385, instructions_7__hla_395
 .set instructions_8__hla_386, instructions_8__hla_396
 .set instructions_9__hla_387, instructions_9__hla_397
 .set instructions_10__hla_388, instructions_10__hla_398
 .set instructions_11__hla_389, instructions_11__hla_399




  .data

        .extern    __imp__MessageBoxA@16
        .extern    __imp__ExitProcess@4
        .balign    (16)
locals_counter__hla_148:
        .byte      0x7

 .ascii "0000000"
error_prefix__hla_149:

 .ascii "error: "
        .byte      0x0
error_suffix__hla_150:

 .ascii "."
cr_lf__hla_151:
        .byte      0xd
        .byte      0xa
        .byte      0x0
line_number_start__hla_152:

 .ascii " ["
        .byte      0x0
line_data_start__hla_153:

 .ascii ":"
        .byte      0xd
        .byte      0xa
        .byte      0x0
_copyright__hla_154:

 .ascii "Copyright (c) 1999-2005, Tomasz Grysztar"
        .byte      0xd
        .byte      0xa
        .byte      0x0
_logo__hla_155:

 .ascii "flat assembler  version "

 .ascii "C1.66"
        .byte      0xd
        .byte      0xa
        .byte      0x0
_usage__hla_156:

 .ascii "usage: fasm source [output]"
        .byte      0xd
        .byte      0xa
        .byte      0x0
include_variable__hla_157:

 .ascii "INCLUDE"
        .byte      0x0
clearedBSS__hla_158 :.byte  0x1
characters__hla_159:
        .byte      0x0
        .byte      0x1
        .byte      0x2
        .byte      0x3
        .byte      0x4
        .byte      0x5
        .byte      0x6
        .byte      0x7
        .byte      0x8
        .byte      0x0
        .byte      0x0
        .byte      0xb
        .byte      0xc
        .byte      0x0
        .byte      0xe
        .byte      0xf
        .byte      0x10
        .byte      0x11
        .byte      0x12
        .byte      0x13
        .byte      0x14
        .byte      0x15
        .byte      0x16
        .byte      0x17
        .byte      0x18
        .byte      0x19
        .byte      0x0
        .byte      0x1b
        .byte      0x1c
        .byte      0x1d
        .byte      0x1e
        .byte      0x1f
        .byte      0x0
        .byte      0x21
        .byte      0x22
        .byte      0x0
        .byte      0x24
        .byte      0x25
        .byte      0x0
        .byte      0x27
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x2e
        .byte      0x0
        .byte      0x30
        .byte      0x31
        .byte      0x32
        .byte      0x33
        .byte      0x34
        .byte      0x35
        .byte      0x36
        .byte      0x37
        .byte      0x38
        .byte      0x39
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x3f
        .byte      0x40
        .byte      0x61
        .byte      0x62
        .byte      0x63
        .byte      0x64
        .byte      0x65
        .byte      0x66
        .byte      0x67
        .byte      0x68
        .byte      0x69
        .byte      0x6a
        .byte      0x6b
        .byte      0x6c
        .byte      0x6d
        .byte      0x6e
        .byte      0x6f
        .byte      0x70
        .byte      0x71
        .byte      0x72
        .byte      0x73
        .byte      0x74
        .byte      0x75
        .byte      0x76
        .byte      0x77
        .byte      0x78
        .byte      0x79
        .byte      0x7a
        .byte      0x0
        .byte      0x5c
        .byte      0x0
        .byte      0x5e
        .byte      0x5f
        .byte      0x0
        .byte      0x61
        .byte      0x62
        .byte      0x63
        .byte      0x64
        .byte      0x65
        .byte      0x66
        .byte      0x67
        .byte      0x68
        .byte      0x69
        .byte      0x6a
        .byte      0x6b
        .byte      0x6c
        .byte      0x6d
        .byte      0x6e
        .byte      0x6f
        .byte      0x70
        .byte      0x71
        .byte      0x72
        .byte      0x73
        .byte      0x74
        .byte      0x75
        .byte      0x76
        .byte      0x77
        .byte      0x78
        .byte      0x79
        .byte      0x7a
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x7f
        .byte      0x80
        .byte      0x81
        .byte      0x82
        .byte      0x83
        .byte      0x84
        .byte      0x85
        .byte      0x86
        .byte      0x87
        .byte      0x88
        .byte      0x89
        .byte      0x8a
        .byte      0x8b
        .byte      0x8c
        .byte      0x8d
        .byte      0x8e
        .byte      0x8f
        .byte      0x90
        .byte      0x91
        .byte      0x92
        .byte      0x93
        .byte      0x94
        .byte      0x95
        .byte      0x96
        .byte      0x97
        .byte      0x98
        .byte      0x99
        .byte      0x9a
        .byte      0x9b
        .byte      0x9c
        .byte      0x9d
        .byte      0x9e
        .byte      0x9f
        .byte      0xa0
        .byte      0xa1
        .byte      0xa2
        .byte      0xa3
        .byte      0xa4
        .byte      0xa5
        .byte      0xa6
        .byte      0xa7
        .byte      0xa8
        .byte      0xa9
        .byte      0xaa
        .byte      0xab
        .byte      0xac
        .byte      0xad
        .byte      0xae
        .byte      0xaf
        .byte      0xb0
        .byte      0xb1
        .byte      0xb2
        .byte      0xb3
        .byte      0xb4
        .byte      0xb5
        .byte      0xb6
        .byte      0xb7
        .byte      0xb8
        .byte      0xb9
        .byte      0xba
        .byte      0xbb
        .byte      0xbc
        .byte      0xbd
        .byte      0xbe
        .byte      0xbf
        .byte      0xc0
        .byte      0xc1
        .byte      0xc2
        .byte      0xc3
        .byte      0xc4
        .byte      0xc5
        .byte      0xc6
        .byte      0xc7
        .byte      0xc8
        .byte      0xc9
        .byte      0xca
        .byte      0xcb
        .byte      0xcc
        .byte      0xcd
        .byte      0xce
        .byte      0xcf
        .byte      0xd0
        .byte      0xd1
        .byte      0xd2
        .byte      0xd3
        .byte      0xd4
        .byte      0xd5
        .byte      0xd6
        .byte      0xd7
        .byte      0xd8
        .byte      0xd9
        .byte      0xda
        .byte      0xdb
        .byte      0xdc
        .byte      0xdd
        .byte      0xde
        .byte      0xdf
        .byte      0xe0
        .byte      0xe1
        .byte      0xe2
        .byte      0xe3
        .byte      0xe4
        .byte      0xe5
        .byte      0xe6
        .byte      0xe7
        .byte      0xe8
        .byte      0xe9
        .byte      0xea
        .byte      0xeb
        .byte      0xec
        .byte      0xed
        .byte      0xee
        .byte      0xef
        .byte      0xf0
        .byte      0xf1
        .byte      0xf2
        .byte      0xf3
        .byte      0xf4
        .byte      0xf5
        .byte      0xf6
        .byte      0xf7
        .byte      0xf8
        .byte      0xf9
        .byte      0xfa
        .byte      0xfb
        .byte      0xfc
        .byte      0xfd
        .byte      0xfe
        .byte      0xff
operators__hla_160:
        .byte      0x1

 .ascii "+"
        .byte      0x80
        .byte      0x1

 .ascii "-"
        .byte      0x81
        .byte      0x1

 .ascii "*"
        .byte      0x90
        .byte      0x1

 .ascii "/"
        .byte      0x91
        .byte      0x3

 .ascii "mod"
        .byte      0xa0
        .byte      0x3

 .ascii "and"
        .byte      0xb0
        .byte      0x2

 .ascii "or"
        .byte      0xb1
        .byte      0x3

 .ascii "xor"
        .byte      0xb2
        .byte      0x3

 .ascii "shl"
        .byte      0xc0
        .byte      0x3

 .ascii "shr"
        .byte      0xc1
        .byte      0x0
single_operand_operators__hla_161:
        .byte      0x1

 .ascii "+"
        .byte      0x0
        .byte      0x1

 .ascii "-"
        .byte      0x83
        .byte      0x3

 .ascii "not"
        .byte      0xd0
        .byte      0x3

 .ascii "rva"
        .byte      0xe0
        .byte      0x0
directive_operators__hla_162:
        .byte      0x2

 .ascii "as"
        .byte      0x86
        .byte      0x2

 .ascii "at"
        .byte      0x80
        .byte      0x7

 .ascii "defined"
        .byte      0x88
        .byte      0x3

 .ascii "dup"
        .byte      0x81
        .byte      0x2

 .ascii "eq"
        .byte      0xf0
        .byte      0x6

 .ascii "eqtype"
        .byte      0xf7
        .byte      0x4

 .ascii "from"
        .byte      0x82
        .byte      0x2

 .ascii "in"
        .byte      0xf6
        .byte      0x2

 .ascii "on"
        .byte      0x84
        .byte      0x3

 .ascii "ptr"
        .byte      0x85
        .byte      0x4

 .ascii "used"
        .byte      0x89
        .byte      0x0
formatter_symbols__hla_163:
        .byte      0x5

 .ascii "align"
        .byte      0x1c
        .byte      0x0
        .byte      0x6

 .ascii "binary"
        .byte      0x18
        .byte      0x10
        .byte      0x3

 .ascii "bss"
        .byte      0x19
        .byte      0x7
        .byte      0x4

 .ascii "code"
        .byte      0x19
        .byte      0x5
        .byte      0x4

 .ascii "coff"
        .byte      0x18
        .byte      0x40
        .byte      0x7

 .ascii "console"
        .byte      0x1b
        .byte      0x3
        .byte      0x4

 .ascii "data"
        .byte      0x19
        .byte      0x6
        .byte      0xb

 .ascii "discardable"
        .byte      0x19
        .byte      0x19
        .byte      0x3

 .ascii "dll"
        .byte      0x1b
        .byte      0x80
        .byte      0x3

 .ascii "elf"
        .byte      0x18
        .byte      0x50
        .byte      0x5

 .ascii "elf64"
        .byte      0x18
        .byte      0x58
        .byte      0xa

 .ascii "executable"
        .byte      0x19
        .byte      0x1d
        .byte      0x6

 .ascii "export"
        .byte      0x1a
        .byte      0x0
        .byte      0x6

 .ascii "fixups"
        .byte      0x1a
        .byte      0x5
        .byte      0x3

 .ascii "gui"
        .byte      0x1b
        .byte      0x2
        .byte      0x6

 .ascii "import"
        .byte      0x1a
        .byte      0x1
        .byte      0x8

 .ascii "linkinfo"
        .byte      0x19
        .byte      0x9
        .byte      0xa

 .ascii "linkremove"
        .byte      0x19
        .byte      0xb
        .byte      0x2

 .ascii "ms"
        .byte      0x17
        .byte      0x41
        .byte      0x4

 .ascii "ms64"
        .byte      0x17
        .byte      0x49
        .byte      0x2

 .ascii "mz"
        .byte      0x18
        .byte      0x20
        .byte      0x6

 .ascii "native"
        .byte      0x1b
        .byte      0x1
        .byte      0xb

 .ascii "notpageable"
        .byte      0x19
        .byte      0x1b
        .byte      0x2

 .ascii "pe"
        .byte      0x18
        .byte      0x30
        .byte      0x4

 .ascii "pe64"
        .byte      0x18
        .byte      0x38
        .byte      0x8

 .ascii "readable"
        .byte      0x19
        .byte      0x1e
        .byte      0x8

 .ascii "resource"
        .byte      0x1a
        .byte      0x2
        .byte      0x9

 .ascii "shareable"
        .byte      0x19
        .byte      0x1c
        .byte      0x3

 .ascii "wdm"
        .byte      0x1b
        .byte      0x81
        .byte      0x8

 .ascii "writable"
        .byte      0x19
        .byte      0x1f
        .byte      0x9

 .ascii "writeable"
        .byte      0x19
        .byte      0x1f
        .byte      0x0
address_registers__hla_164:
        .byte      0x2

 .ascii "bp"
        .byte      0x0
        .byte      0x25
        .byte      0x2

 .ascii "bx"
        .byte      0x0
        .byte      0x23
        .byte      0x2

 .ascii "di"
        .byte      0x0
        .byte      0x27
        .byte      0x3

 .ascii "eax"
        .byte      0x0
        .byte      0x40
        .byte      0x3

 .ascii "ebp"
        .byte      0x0
        .byte      0x45
        .byte      0x3

 .ascii "ebx"
        .byte      0x0
        .byte      0x43
        .byte      0x3

 .ascii "ecx"
        .byte      0x0
        .byte      0x41
        .byte      0x3

 .ascii "edi"
        .byte      0x0
        .byte      0x47
        .byte      0x3

 .ascii "edx"
        .byte      0x0
        .byte      0x42
        .byte      0x3

 .ascii "esi"
        .byte      0x0
        .byte      0x46
        .byte      0x3

 .ascii "esp"
        .byte      0x0
        .byte      0x44
        .byte      0x3

 .ascii "r10"
        .byte      0x0
        .byte      0x8a
        .byte      0x4

 .ascii "r10d"
        .byte      0x0
        .byte      0x4a
        .byte      0x3

 .ascii "r11"
        .byte      0x0
        .byte      0x8b
        .byte      0x4

 .ascii "r11d"
        .byte      0x0
        .byte      0x4b
        .byte      0x3

 .ascii "r12"
        .byte      0x0
        .byte      0x8c
        .byte      0x4

 .ascii "r12d"
        .byte      0x0
        .byte      0x4c
        .byte      0x3

 .ascii "r13"
        .byte      0x0
        .byte      0x8d
        .byte      0x4

 .ascii "r13d"
        .byte      0x0
        .byte      0x4d
        .byte      0x3

 .ascii "r14"
        .byte      0x0
        .byte      0x8e
        .byte      0x4

 .ascii "r14d"
        .byte      0x0
        .byte      0x4e
        .byte      0x3

 .ascii "r15"
        .byte      0x0
        .byte      0x8f
        .byte      0x4

 .ascii "r15d"
        .byte      0x0
        .byte      0x4f
        .byte      0x2

 .ascii "r8"
        .byte      0x0
        .byte      0x88
        .byte      0x3

 .ascii "r8d"
        .byte      0x0
        .byte      0x48
        .byte      0x2

 .ascii "r9"
        .byte      0x0
        .byte      0x89
        .byte      0x3

 .ascii "r9d"
        .byte      0x0
        .byte      0x49
        .byte      0x3

 .ascii "rax"
        .byte      0x0
        .byte      0x80
        .byte      0x3

 .ascii "rbp"
        .byte      0x0
        .byte      0x85
        .byte      0x3

 .ascii "rbx"
        .byte      0x0
        .byte      0x83
        .byte      0x3

 .ascii "rcx"
        .byte      0x0
        .byte      0x81
        .byte      0x3

 .ascii "rdi"
        .byte      0x0
        .byte      0x87
        .byte      0x3

 .ascii "rdx"
        .byte      0x0
        .byte      0x82
        .byte      0x3

 .ascii "rip"
        .byte      0x0
        .byte      0xf0
        .byte      0x3

 .ascii "rsi"
        .byte      0x0
        .byte      0x86
        .byte      0x3

 .ascii "rsp"
        .byte      0x0
        .byte      0x84
        .byte      0x2

 .ascii "si"
        .byte      0x0
        .byte      0x26
        .byte      0x0
address_sizes__hla_165:
        .byte      0x4

 .ascii "byte"
        .byte      0x0
        .byte      0x1
        .byte      0x5

 .ascii "dword"
        .byte      0x0
        .byte      0x4
        .byte      0x5

 .ascii "qword"
        .byte      0x0
        .byte      0x8
        .byte      0x4

 .ascii "word"
        .byte      0x0
        .byte      0x2
        .byte      0x0
symbols__hla_166:
        .byte      0x2

 .ascii "ah"
        .byte      0x10
        .byte      0x4
        .byte      0x2

 .ascii "al"
        .byte      0x10
        .byte      0x10
        .byte      0x2

 .ascii "ax"
        .byte      0x10
        .byte      0x20
        .byte      0x2

 .ascii "bh"
        .byte      0x10
        .byte      0x7
        .byte      0x2

 .ascii "bl"
        .byte      0x10
        .byte      0x13
        .byte      0x2

 .ascii "bp"
        .byte      0x10
        .byte      0x25
        .byte      0x3

 .ascii "bpl"
        .byte      0x10
        .byte      0x15
        .byte      0x2

 .ascii "bx"
        .byte      0x10
        .byte      0x23
        .byte      0x4

 .ascii "byte"
        .byte      0x11
        .byte      0x1
        .byte      0x2

 .ascii "ch"
        .byte      0x10
        .byte      0x5
        .byte      0x2

 .ascii "cl"
        .byte      0x10
        .byte      0x11
        .byte      0x3

 .ascii "cr0"
        .byte      0x10
        .byte      0x50
        .byte      0x3

 .ascii "cr1"
        .byte      0x10
        .byte      0x51
        .byte      0x3

 .ascii "cr2"
        .byte      0x10
        .byte      0x52
        .byte      0x3

 .ascii "cr3"
        .byte      0x10
        .byte      0x53
        .byte      0x3

 .ascii "cr4"
        .byte      0x10
        .byte      0x54
        .byte      0x3

 .ascii "cr5"
        .byte      0x10
        .byte      0x55
        .byte      0x3

 .ascii "cr6"
        .byte      0x10
        .byte      0x56
        .byte      0x3

 .ascii "cr7"
        .byte      0x10
        .byte      0x57
        .byte      0x3

 .ascii "cr8"
        .byte      0x10
        .byte      0x58
        .byte      0x3

 .ascii "cr9"
        .byte      0x10
        .byte      0x59
        .byte      0x4

 .ascii "cr10"
        .byte      0x10
        .byte      0x5a
        .byte      0x4

 .ascii "cr11"
        .byte      0x10
        .byte      0x5b
        .byte      0x4

 .ascii "cr12"
        .byte      0x10
        .byte      0x5c
        .byte      0x4

 .ascii "cr13"
        .byte      0x10
        .byte      0x5d
        .byte      0x4

 .ascii "cr14"
        .byte      0x10
        .byte      0x5e
        .byte      0x4

 .ascii "cr15"
        .byte      0x10
        .byte      0x5f
        .byte      0x2

 .ascii "cs"
        .byte      0x10
        .byte      0x62
        .byte      0x2

 .ascii "cx"
        .byte      0x10
        .byte      0x21
        .byte      0x2

 .ascii "dh"
        .byte      0x10
        .byte      0x6
        .byte      0x2

 .ascii "di"
        .byte      0x10
        .byte      0x27
        .byte      0x3

 .ascii "dil"
        .byte      0x10
        .byte      0x17
        .byte      0x2

 .ascii "dl"
        .byte      0x10
        .byte      0x12
        .byte      0x6

 .ascii "dqword"
        .byte      0x11
        .byte      0x10
        .byte      0x3

 .ascii "dr0"
        .byte      0x10
        .byte      0x70
        .byte      0x3

 .ascii "dr1"
        .byte      0x10
        .byte      0x71
        .byte      0x3

 .ascii "dr2"
        .byte      0x10
        .byte      0x72
        .byte      0x3

 .ascii "dr3"
        .byte      0x10
        .byte      0x73
        .byte      0x3

 .ascii "dr4"
        .byte      0x10
        .byte      0x74
        .byte      0x3

 .ascii "dr5"
        .byte      0x10
        .byte      0x75
        .byte      0x3

 .ascii "dr6"
        .byte      0x10
        .byte      0x76
        .byte      0x3

 .ascii "dr7"
        .byte      0x10
        .byte      0x77
        .byte      0x3

 .ascii "dr8"
        .byte      0x10
        .byte      0x78
        .byte      0x3

 .ascii "dr9"
        .byte      0x10
        .byte      0x79
        .byte      0x4

 .ascii "dr10"
        .byte      0x10
        .byte      0x7a
        .byte      0x4

 .ascii "dr11"
        .byte      0x10
        .byte      0x7b
        .byte      0x4

 .ascii "dr12"
        .byte      0x10
        .byte      0x7c
        .byte      0x4

 .ascii "dr13"
        .byte      0x10
        .byte      0x7d
        .byte      0x4

 .ascii "dr14"
        .byte      0x10
        .byte      0x7e
        .byte      0x4

 .ascii "dr15"
        .byte      0x10
        .byte      0x7f
        .byte      0x2

 .ascii "ds"
        .byte      0x10
        .byte      0x64
        .byte      0x5

 .ascii "dword"
        .byte      0x11
        .byte      0x4
        .byte      0x2

 .ascii "dx"
        .byte      0x10
        .byte      0x22
        .byte      0x3

 .ascii "eax"
        .byte      0x10
        .byte      0x40
        .byte      0x3

 .ascii "ebp"
        .byte      0x10
        .byte      0x45
        .byte      0x3

 .ascii "ebx"
        .byte      0x10
        .byte      0x43
        .byte      0x3

 .ascii "ecx"
        .byte      0x10
        .byte      0x41
        .byte      0x3

 .ascii "edi"
        .byte      0x10
        .byte      0x47
        .byte      0x3

 .ascii "edx"
        .byte      0x10
        .byte      0x42
        .byte      0x2

 .ascii "es"
        .byte      0x10
        .byte      0x61
        .byte      0x3

 .ascii "esi"
        .byte      0x10
        .byte      0x46
        .byte      0x3

 .ascii "esp"
        .byte      0x10
        .byte      0x44
        .byte      0x3

 .ascii "far"
        .byte      0x12
        .byte      0x3
        .byte      0x2

 .ascii "fs"
        .byte      0x10
        .byte      0x65
        .byte      0x5

 .ascii "fword"
        .byte      0x11
        .byte      0x6
        .byte      0x2

 .ascii "gs"
        .byte      0x10
        .byte      0x66
        .byte      0x3

 .ascii "mm0"
        .byte      0x10
        .byte      0xb0
        .byte      0x3

 .ascii "mm1"
        .byte      0x10
        .byte      0xb1
        .byte      0x3

 .ascii "mm2"
        .byte      0x10
        .byte      0xb2
        .byte      0x3

 .ascii "mm3"
        .byte      0x10
        .byte      0xb3
        .byte      0x3

 .ascii "mm4"
        .byte      0x10
        .byte      0xb4
        .byte      0x3

 .ascii "mm5"
        .byte      0x10
        .byte      0xb5
        .byte      0x3

 .ascii "mm6"
        .byte      0x10
        .byte      0xb6
        .byte      0x3

 .ascii "mm7"
        .byte      0x10
        .byte      0xb7
        .byte      0x4

 .ascii "near"
        .byte      0x12
        .byte      0x2
        .byte      0x5

 .ascii "pword"
        .byte      0x11
        .byte      0x6
        .byte      0x5

 .ascii "qword"
        .byte      0x11
        .byte      0x8
        .byte      0x3

 .ascii "r10"
        .byte      0x10
        .byte      0x8a
        .byte      0x4

 .ascii "r10b"
        .byte      0x10
        .byte      0x1a
        .byte      0x4

 .ascii "r10d"
        .byte      0x10
        .byte      0x4a
        .byte      0x4

 .ascii "r10w"
        .byte      0x10
        .byte      0x2a
        .byte      0x3

 .ascii "r11"
        .byte      0x10
        .byte      0x8b
        .byte      0x4

 .ascii "r11b"
        .byte      0x10
        .byte      0x1b
        .byte      0x4

 .ascii "r11d"
        .byte      0x10
        .byte      0x4b
        .byte      0x4

 .ascii "r11w"
        .byte      0x10
        .byte      0x2b
        .byte      0x3

 .ascii "r12"
        .byte      0x10
        .byte      0x8c
        .byte      0x4

 .ascii "r12b"
        .byte      0x10
        .byte      0x1c
        .byte      0x4

 .ascii "r12d"
        .byte      0x10
        .byte      0x4c
        .byte      0x4

 .ascii "r12w"
        .byte      0x10
        .byte      0x2c
        .byte      0x3

 .ascii "r13"
        .byte      0x10
        .byte      0x8d
        .byte      0x4

 .ascii "r13b"
        .byte      0x10
        .byte      0x1d
        .byte      0x4

 .ascii "r13d"
        .byte      0x10
        .byte      0x4d
        .byte      0x4

 .ascii "r13w"
        .byte      0x10
        .byte      0x2d
        .byte      0x3

 .ascii "r14"
        .byte      0x10
        .byte      0x8e
        .byte      0x4

 .ascii "r14b"
        .byte      0x10
        .byte      0x1e
        .byte      0x4

 .ascii "r14d"
        .byte      0x10
        .byte      0x4e
        .byte      0x4

 .ascii "r14w"
        .byte      0x10
        .byte      0x2e
        .byte      0x3

 .ascii "r15"
        .byte      0x10
        .byte      0x8f
        .byte      0x4

 .ascii "r15b"
        .byte      0x10
        .byte      0x1f
        .byte      0x4

 .ascii "r15d"
        .byte      0x10
        .byte      0x4f
        .byte      0x4

 .ascii "r15w"
        .byte      0x10
        .byte      0x2f
        .byte      0x2

 .ascii "r8"
        .byte      0x10
        .byte      0x88
        .byte      0x3

 .ascii "r8b"
        .byte      0x10
        .byte      0x18
        .byte      0x3

 .ascii "r8d"
        .byte      0x10
        .byte      0x48
        .byte      0x3

 .ascii "r8w"
        .byte      0x10
        .byte      0x28
        .byte      0x2

 .ascii "r9"
        .byte      0x10
        .byte      0x89
        .byte      0x3

 .ascii "r9b"
        .byte      0x10
        .byte      0x19
        .byte      0x3

 .ascii "r9d"
        .byte      0x10
        .byte      0x49
        .byte      0x3

 .ascii "r9w"
        .byte      0x10
        .byte      0x29
        .byte      0x3

 .ascii "rax"
        .byte      0x10
        .byte      0x80
        .byte      0x3

 .ascii "rbp"
        .byte      0x10
        .byte      0x85
        .byte      0x3

 .ascii "rbx"
        .byte      0x10
        .byte      0x83
        .byte      0x3

 .ascii "rcx"
        .byte      0x10
        .byte      0x81
        .byte      0x3

 .ascii "rdi"
        .byte      0x10
        .byte      0x87
        .byte      0x3

 .ascii "rdx"
        .byte      0x10
        .byte      0x82
        .byte      0x3

 .ascii "rsi"
        .byte      0x10
        .byte      0x86
        .byte      0x3

 .ascii "rsp"
        .byte      0x10
        .byte      0x84
        .byte      0x5

 .ascii "short"
        .byte      0x12
        .byte      0x1
        .byte      0x2

 .ascii "si"
        .byte      0x10
        .byte      0x26
        .byte      0x3

 .ascii "sil"
        .byte      0x10
        .byte      0x16
        .byte      0x2

 .ascii "sp"
        .byte      0x10
        .byte      0x24
        .byte      0x3

 .ascii "spl"
        .byte      0x10
        .byte      0x14
        .byte      0x2

 .ascii "ss"
        .byte      0x10
        .byte      0x63
        .byte      0x2

 .ascii "st"
        .byte      0x10
        .byte      0xa0
        .byte      0x3

 .ascii "st0"
        .byte      0x10
        .byte      0xa0
        .byte      0x3

 .ascii "st1"
        .byte      0x10
        .byte      0xa1
        .byte      0x3

 .ascii "st2"
        .byte      0x10
        .byte      0xa2
        .byte      0x3

 .ascii "st3"
        .byte      0x10
        .byte      0xa3
        .byte      0x3

 .ascii "st4"
        .byte      0x10
        .byte      0xa4
        .byte      0x3

 .ascii "st5"
        .byte      0x10
        .byte      0xa5
        .byte      0x3

 .ascii "st6"
        .byte      0x10
        .byte      0xa6
        .byte      0x3

 .ascii "st7"
        .byte      0x10
        .byte      0xa7
        .byte      0x5

 .ascii "tbyte"
        .byte      0x11
        .byte      0xa
        .byte      0x3

 .ascii "tr0"
        .byte      0x10
        .byte      0x90
        .byte      0x3

 .ascii "tr1"
        .byte      0x10
        .byte      0x91
        .byte      0x3

 .ascii "tr2"
        .byte      0x10
        .byte      0x92
        .byte      0x3

 .ascii "tr3"
        .byte      0x10
        .byte      0x93
        .byte      0x3

 .ascii "tr4"
        .byte      0x10
        .byte      0x94
        .byte      0x3

 .ascii "tr5"
        .byte      0x10
        .byte      0x95
        .byte      0x3

 .ascii "tr6"
        .byte      0x10
        .byte      0x96
        .byte      0x3

 .ascii "tr7"
        .byte      0x10
        .byte      0x97
        .byte      0x5

 .ascii "tword"
        .byte      0x11
        .byte      0xa
        .byte      0x5

 .ascii "use16"
        .byte      0x13
        .byte      0x10
        .byte      0x5

 .ascii "use32"
        .byte      0x13
        .byte      0x20
        .byte      0x5

 .ascii "use64"
        .byte      0x13
        .byte      0x40
        .byte      0x4

 .ascii "word"
        .byte      0x11
        .byte      0x2
        .byte      0x4

 .ascii "xmm0"
        .byte      0x10
        .byte      0xc0
        .byte      0x4

 .ascii "xmm1"
        .byte      0x10
        .byte      0xc1
        .byte      0x5

 .ascii "xmm10"
        .byte      0x10
        .byte      0xca
        .byte      0x5

 .ascii "xmm11"
        .byte      0x10
        .byte      0xcb
        .byte      0x5

 .ascii "xmm12"
        .byte      0x10
        .byte      0xcc
        .byte      0x5

 .ascii "xmm13"
        .byte      0x10
        .byte      0xcd
        .byte      0x5

 .ascii "xmm14"
        .byte      0x10
        .byte      0xce
        .byte      0x5

 .ascii "xmm15"
        .byte      0x10
        .byte      0xcf
        .byte      0x4

 .ascii "xmm2"
        .byte      0x10
        .byte      0xc2
        .byte      0x4

 .ascii "xmm3"
        .byte      0x10
        .byte      0xc3
        .byte      0x4

 .ascii "xmm4"
        .byte      0x10
        .byte      0xc4
        .byte      0x4

 .ascii "xmm5"
        .byte      0x10
        .byte      0xc5
        .byte      0x4

 .ascii "xmm6"
        .byte      0x10
        .byte      0xc6
        .byte      0x4

 .ascii "xmm7"
        .byte      0x10
        .byte      0xc7
        .byte      0x4

 .ascii "xmm8"
        .byte      0x10
        .byte      0xc8
        .byte      0x4

 .ascii "xmm9"
        .byte      0x10
        .byte      0xc9
        .byte      0x0
data_directives__hla_167:
        .byte      0x2

 .ascii "db"
        .byte      0x1
        .byte      0x0
        .byte      0x2

 .ascii "dd"
        .byte      0x4
        .byte      0x6
        .byte      0x2

 .ascii "df"
        .byte      0x6
        .byte      0x8
        .byte      0x2

 .ascii "dp"
        .byte      0x6
        .byte      0x8
        .byte      0x2

 .ascii "dq"
        .byte      0x8
        .byte      0xa
        .byte      0x2

 .ascii "dt"
        .byte      0xa
        .byte      0xc
        .byte      0x2

 .ascii "du"
        .byte      0x2
        .byte      0x4
        .byte      0x2

 .ascii "dw"
        .byte      0x2
        .byte      0x3
        .byte      0x4

 .ascii "file"
        .byte      0x1
        .byte      0x1
        .byte      0x2

 .ascii "rb"
        .byte      0x1
        .byte      0x2
        .byte      0x2

 .ascii "rd"
        .byte      0x4
        .byte      0x7
        .byte      0x2

 .ascii "rf"
        .byte      0x6
        .byte      0x9
        .byte      0x2

 .ascii "rp"
        .byte      0x6
        .byte      0x9
        .byte      0x2

 .ascii "rq"
        .byte      0x8
        .byte      0xb
        .byte      0x2

 .ascii "rt"
        .byte      0xa
        .byte      0xd
        .byte      0x2

 .ascii "rw"
        .byte      0x2
        .byte      0x5
        .byte      0x0
instrHandlerPtrs__hla_168:
        .long      aa_instruction__hla_169
        .long      align_directive__hla_170
        .long      amd3dnow_instruction__hla_171
        .long      amd_prefetch_instruction__hla_172
        .long      arpl_instruction__hla_173
        .long      basic_486_instruction__hla_174
        .long      basic_fpu_instruction__hla_175
        .long      basic_instruction__hla_176
        .long      bound_instruction__hla_177
        .long      break_directive__hla_178
        .long      bs_instruction__hla_179
        .long      bswap_instruction__hla_180
        .long      bt_instruction__hla_181
        .long      call_instruction__hla_182
        .long      cmov_instruction__hla_183
        .long      cmp_pd_instruction__hla_184
        .long      cmp_ps_instruction__hla_185
        .long      cmp_sd_instruction__hla_186
        .long      cmp_ss_instruction__hla_187
        .long      cmppd_instruction__hla_188
        .long      cmpps_instruction__hla_189
        .long      cmps_instruction__hla_190
        .long      cmpsd_instruction__hla_191
        .long      cmpss_instruction__hla_192
        .long      cmpxchgx_instruction__hla_193
        .long      comisd_instruction__hla_194
        .long      comiss_instruction__hla_195
        .long      conditional_jump__hla_196
        .long      cvtdq2pd_instruction__hla_197
        .long      cvtpd2dq_instruction__hla_198
        .long      cvtpd2pi_instruction__hla_199
        .long      cvtpi2pd_instruction__hla_200
        .long      cvtpi2ps_instruction__hla_201
        .long      cvtps2pd_instruction__hla_202
        .long      cvtps2pi_instruction__hla_203
        .long      cvtsd2si_instruction__hla_204
        .long      cvtsi2sd_instruction__hla_205
        .long      cvtsi2ss_instruction__hla_206
        .long      cvtss2si_instruction__hla_207
        .long      data_bytes__hla_208
        .long      data_directive__hla_209
        .long      data_file__hla_210
        .long      data_dwords__hla_211
        .long      data_pwords__hla_212
        .long      data_qwords__hla_213
        .long      data_twords__hla_214
        .long      data_unicode__hla_215
        .long      data_words__hla_216
        .long      display_directive__hla_217
        .long      else_directive__hla_218
        .long      end_directive__hla_219
        .long      enter_instruction__hla_220
        .long      entry_directive__hla_221
        .long      extrn_directive__hla_222
        .long      faddp_instruction__hla_223
        .long      fbld_instruction__hla_224
        .long      fcmov_instruction__hla_225
        .long      fcomi_instruction__hla_226
        .long      fcomip_instruction__hla_227
        .long      fcompp_instruction__hla_228
        .long      fence_instruction__hla_229
        .long      ffree_instruction__hla_230
        .long      ffreep_instruction__hla_231
        .long      fi_instruction__hla_232
        .long      fild_instruction__hla_233
        .long      finit_instruction__hla_234
        .long      fld_instruction__hla_235
        .long      fldcw_instruction__hla_236
        .long      fldenv_instruction__hla_237
        .long      fninit_instruction__hla_238
        .long      fnsave_instruction__hla_239
        .long      fnstsw_instruction__hla_240
        .long      format_directive__hla_241
        .long      fsave_instruction__hla_242
        .long      fstcw_instruction__hla_243
        .long      fstsw_instruction__hla_244
        .long      fstenv_instruction__hla_245
        .long      fucompp_instruction__hla_246
        .long      fxsave_instruction__hla_247
        .long      fxch_instruction__hla_248
        .long      heap_directive__hla_249
        .long      if_directive__hla_250
        .long      imul_instruction__hla_251
        .long      in_instruction__hla_252
        .long      inc_instruction__hla_253
        .long      ins_instruction__hla_254
        .long      int_instruction__hla_255
        .long      invlpg_instruction__hla_256
        .long      iret_instruction__hla_257
        .long      jmp_instruction__hla_258
        .long      label_directive__hla_259
        .long      lar_instruction__hla_260
        .long      lddqu_instruction__hla_261
        .long      lea_instruction__hla_262
        .long      lgdt_instruction__hla_263
        .long      load_directive__hla_264
        .long      lods_instruction__hla_265
        .long      loop_instruction__hla_266
        .long      loop_instruction_16bit__hla_267
        .long      loop_instruction_32bit__hla_268
        .long      loop_instruction_64bit__hla_269
        .long      ls_instruction__hla_270
        .long      maskmovq_instruction__hla_271
        .long      maskmovdqu_instruction__hla_272
        .long      mmx_instruction__hla_273
        .long      mmx_ps_instruction__hla_274
        .long      monitor_instruction__hla_275
        .long      mov_instruction__hla_276
        .long      movd_instruction__hla_277
        .long      movdq_instruction__hla_278
        .long      movdq2q_instruction__hla_279
        .long      movhlps_instruction__hla_280
        .long      movlpd_instruction__hla_281
        .long      movlps_instruction__hla_282
        .long      movmskpd_instruction__hla_283
        .long      movmskps_instruction__hla_284
        .long      movnti_instruction__hla_285
        .long      movntq_instruction__hla_286
        .long      movntdq_instruction__hla_287
        .long      movntps_instruction__hla_288
        .long      movpd_instruction__hla_289
        .long      movps_instruction__hla_290
        .long      movq_instruction__hla_291
        .long      movq2dq_instruction__hla_292
        .long      movs_instruction__hla_293
        .long      movsd_instruction__hla_294
        .long      movss_instruction__hla_295
        .long      movsxd_instruction__hla_296
        .long      movx_instruction__hla_297
        .long      org_directive__hla_298
        .long      out_instruction__hla_299
        .long      outs_instruction__hla_300
        .long      pause_instruction__hla_301
        .long      pextrw_instruction__hla_302
        .long      pinsrw_instruction__hla_303
        .long      pm_store_word_instruction__hla_304
        .long      pm_word_instruction__hla_305
        .long      pop_instruction__hla_306
        .long      prefetch_instruction__hla_307
        .long      prefix_instruction__hla_308
        .long      pshufd_instruction__hla_309
        .long      pshufw_instruction__hla_310
        .long      ps_dq_instruction__hla_311
        .long      ps_dq_instruction__hla_311
        .long      public_directive__hla_312
        .long      push_instruction__hla_313
        .long      repeat_directive__hla_314
        .long      reserve_bytes__hla_315
        .long      reserve_dwords__hla_316
        .long      reserve_pwords__hla_317
        .long      reserve_qwords__hla_318
        .long      reserve_twords__hla_319
        .long      reserve_words__hla_320
        .long      ret_instruction__hla_321
        .long      ret_instruction_16bit__hla_322
        .long      ret_instruction_32bit__hla_323
        .long      ret_instruction_32bit_except64__hla_324
        .long      ret_instruction_64bit__hla_325
        .long      ret_instruction_only64__hla_326
        .long      retf_instruction__hla_327
        .long      retf_instruction__hla_327
        .long      section_directive__hla_328
        .long      segment_directive__hla_329
        .long      set_instruction__hla_330
        .long      sh_instruction__hla_331
        .long      shd_instruction__hla_332
        .long      simple_extended_instruction__hla_333
        .long      simple_fpu_instruction__hla_334
        .long      simple_instruction__hla_335
        .long      simple_instruction_16bit__hla_336
        .long      simple_instruction_16bit_except64__hla_337
        .long      simple_instruction_32bit__hla_338
        .long      simple_instruction_32bit_except64__hla_339
        .long      simple_instruction_64bit__hla_340
        .long      simple_instruction_except64__hla_341
        .long      simple_instruction_only64__hla_342
        .long      simple_vmx_instruction__hla_343
        .long      single_operand_instruction__hla_344
        .long      sse_pd_instruction__hla_345
        .long      sse_ps_instruction__hla_346
        .long      sse_sd_instruction__hla_347
        .long      sse_ss_instruction__hla_348
        .long      stack_directive__hla_349
        .long      store_directive__hla_350
        .long      stos_instruction__hla_351
        .long      swapgs_instruction__hla_352
        .long      test_instruction__hla_353
        .long      times_directive__hla_354
        .long      virtual_directive__hla_355
        .long      vmclear_instruction__hla_356
        .long      vmread_instruction__hla_357
        .long      vmwrite_instruction__hla_358
        .long      vmx_instruction__hla_359
        .long      vmxon_instruction__hla_360
        .long      while_directive__hla_361
        .long      xchg_instruction__hla_362
        .long      xlat_instruction__hla_363
data_handlers__hla_364:
        .long      0x27
        .long      0x29
        .long      0x93
        .long      0x2f
        .long      0x2e
        .long      0x98
        .long      0x2a
        .long      0x94
        .long      0x2b
        .long      0x95
        .long      0x2c
        .long      0x96
        .long      0x2d
        .long      0x97
if_directive_assembler__hla_365 :.word  0x51
repeat_directive_assembler__hla_366 :.word  0x92
while_directive_assembler__hla_367 :.word  0xc2
end_directive_assembler__hla_368 :.word  0x32
else_directive_assembler__hla_369 :.word  0x31
prefix_instruction_assembler__hla_370 :.word  0x8b
times_directive_assembler__hla_371 :.word  0xbb
label_directive_assembler__hla_372 :.word  0x5a
segment_directive_assembler__hla_373 :.word  0xa2
load_directive_assembler__hla_374 :.word  0x5f
extrn_directive_assembler__hla_375 :.word  0x35
public_directive_assembler__hla_376 :.word  0x90
virtual_directive_assembler__hla_377 :.word  0xbc
data_directive_assembler__hla_378 :.word  0x28
instructions__hla_379:
        .long      instructions_2__hla_380
        .long      instructions_3__hla_381
        .long      instructions_4__hla_382
        .long      instructions_5__hla_383
        .long      instructions_6__hla_384
        .long      instructions_7__hla_385
        .long      instructions_8__hla_386
        .long      instructions_9__hla_387
        .long      instructions_10__hla_388
        .long      instructions_11__hla_389
instructions_2__hla_390:

 .ascii "bt"
        .byte      0x4
        .long      0xc

 .ascii "if"
        .byte      0x0
        .long      0x51

 .ascii "in"
        .byte      0x0
        .long      0x53

 .ascii "ja"
        .byte      0x77
        .long      0x1b

 .ascii "jb"
        .byte      0x72
        .long      0x1b

 .ascii "jc"
        .byte      0x72
        .long      0x1b

 .ascii "je"
        .byte      0x74
        .long      0x1b

 .ascii "jg"
        .byte      0x7f
        .long      0x1b

 .ascii "jl"
        .byte      0x7c
        .long      0x1b

 .ascii "jo"
        .byte      0x70
        .long      0x1b

 .ascii "jp"
        .byte      0x7a
        .long      0x1b

 .ascii "js"
        .byte      0x78
        .long      0x1b

 .ascii "jz"
        .byte      0x74
        .long      0x1b

 .ascii "or"
        .byte      0x8
        .long      0x7
        .byte      0x0
instructions_3__hla_391:

 .ascii "aaa"
        .byte      0x37
        .long      0xae

 .ascii "aad"
        .byte      0xd5
        .long      0x0

 .ascii "aam"
        .byte      0xd4
        .long      0x0

 .ascii "aas"
        .byte      0x3f
        .long      0xae

 .ascii "adc"
        .byte      0x10
        .long      0x7

 .ascii "add"
        .byte      0x0
        .long      0x7

 .ascii "and"
        .byte      0x20
        .long      0x7

 .ascii "bsf"
        .byte      0xbc
        .long      0xa

 .ascii "bsr"
        .byte      0xbd
        .long      0xa

 .ascii "btc"
        .byte      0x7
        .long      0xc

 .ascii "btr"
        .byte      0x6
        .long      0xc

 .ascii "bts"
        .byte      0x5
        .long      0xc

 .ascii "cbw"
        .byte      0x98
        .long      0xa9

 .ascii "cdq"
        .byte      0x99
        .long      0xab

 .ascii "clc"
        .byte      0xf8
        .long      0xa8

 .ascii "cld"
        .byte      0xfc
        .long      0xa8

 .ascii "cli"
        .byte      0xfa
        .long      0xa8

 .ascii "cmc"
        .byte      0xf5
        .long      0xa8

 .ascii "cmp"
        .byte      0x38
        .long      0x7

 .ascii "cqo"
        .byte      0x99
        .long      0xad

 .ascii "cwd"
        .byte      0x99
        .long      0xa9

 .ascii "daa"
        .byte      0x27
        .long      0xae

 .ascii "das"
        .byte      0x2f
        .long      0xae

 .ascii "dec"
        .byte      0x1
        .long      0x54

 .ascii "div"
        .byte      0x6
        .long      0xb1

 .ascii "end"
        .byte      0x0
        .long      0x32

 .ascii "fld"
        .byte      0x0
        .long      0x42

 .ascii "fst"
        .byte      0x2
        .long      0x42

 .ascii "hlt"
        .byte      0xf4
        .long      0xa8

 .ascii "inc"
        .byte      0x0
        .long      0x54

 .ascii "ins"
        .byte      0x6c
        .long      0x55

 .ascii "int"
        .byte      0xcd
        .long      0x56

 .ascii "jae"
        .byte      0x73
        .long      0x1b

 .ascii "jbe"
        .byte      0x76
        .long      0x1b

 .ascii "jge"
        .byte      0x7d
        .long      0x1b

 .ascii "jle"
        .byte      0x7e
        .long      0x1b

 .ascii "jmp"
        .byte      0x0
        .long      0x59

 .ascii "jna"
        .byte      0x76
        .long      0x1b

 .ascii "jnb"
        .byte      0x73
        .long      0x1b

 .ascii "jnc"
        .byte      0x73
        .long      0x1b

 .ascii "jne"
        .byte      0x75
        .long      0x1b

 .ascii "jng"
        .byte      0x7e
        .long      0x1b

 .ascii "jnl"
        .byte      0x7d
        .long      0x1b

 .ascii "jno"
        .byte      0x71
        .long      0x1b

 .ascii "jnp"
        .byte      0x7b
        .long      0x1b

 .ascii "jns"
        .byte      0x79
        .long      0x1b

 .ascii "jnz"
        .byte      0x75
        .long      0x1b

 .ascii "jpe"
        .byte      0x7a
        .long      0x1b

 .ascii "jpo"
        .byte      0x7b
        .long      0x1b

 .ascii "lar"
        .byte      0x2
        .long      0x5b

 .ascii "lds"
        .byte      0x3
        .long      0x65

 .ascii "lea"
        .byte      0x0
        .long      0x5d

 .ascii "les"
        .byte      0x0
        .long      0x65

 .ascii "lfs"
        .byte      0x4
        .long      0x65

 .ascii "lgs"
        .byte      0x5
        .long      0x65

 .ascii "lsl"
        .byte      0x3
        .long      0x5b

 .ascii "lss"
        .byte      0x2
        .long      0x65

 .ascii "ltr"
        .byte      0x3
        .long      0x88

 .ascii "mov"
        .byte      0x0
        .long      0x6b

 .ascii "mul"
        .byte      0x4
        .long      0xb1

 .ascii "neg"
        .byte      0x3
        .long      0xb1

 .ascii "nop"
        .byte      0x90
        .long      0xa8

 .ascii "not"
        .byte      0x2
        .long      0xb1

 .ascii "org"
        .byte      0x0
        .long      0x81

 .ascii "out"
        .byte      0x0
        .long      0x82

 .ascii "pop"
        .byte      0x0
        .long      0x89

 .ascii "por"
        .byte      0xeb
        .long      0x68

 .ascii "rcl"
        .byte      0x2
        .long      0xa4

 .ascii "rcr"
        .byte      0x3
        .long      0xa4

 .ascii "rep"
        .byte      0xf3
        .long      0x8b

 .ascii "ret"
        .byte      0xc2
        .long      0x99

 .ascii "rol"
        .byte      0x0
        .long      0xa4

 .ascii "ror"
        .byte      0x1
        .long      0xa4

 .ascii "rsm"
        .byte      0xaa
        .long      0xa6

 .ascii "sal"
        .byte      0x4
        .long      0xa4

 .ascii "sar"
        .byte      0x7
        .long      0xa4

 .ascii "sbb"
        .byte      0x18
        .long      0x7

 .ascii "shl"
        .byte      0x4
        .long      0xa4

 .ascii "shr"
        .byte      0x5
        .long      0xa4

 .ascii "stc"
        .byte      0xf9
        .long      0xa8

 .ascii "std"
        .byte      0xfd
        .long      0xa8

 .ascii "sti"
        .byte      0xfb
        .long      0xa8

 .ascii "str"
        .byte      0x1
        .long      0x87

 .ascii "sub"
        .byte      0x28
        .long      0x7

 .ascii "ud2"
        .byte      0xb
        .long      0xa6

 .ascii "xor"
        .byte      0x30
        .long      0x7
        .byte      0x0
instructions_4__hla_392:

 .ascii "arpl"
        .byte      0x0
        .long      0x4

 .ascii "call"
        .byte      0x0
        .long      0xd

 .ascii "cdqe"
        .byte      0x98
        .long      0xad

 .ascii "clts"
        .byte      0x6
        .long      0xa6

 .ascii "cmps"
        .byte      0xa6
        .long      0x15

 .ascii "cwde"
        .byte      0x98
        .long      0xab

 .ascii "data"
        .byte      0x0
        .long      0x28

 .ascii "else"
        .byte      0x0
        .long      0x31

 .ascii "emms"
        .byte      0x77
        .long      0xa6

 .ascii "fabs"
        .byte      0x21
        .long      0xa7

 .ascii "fadd"
        .byte      0x0
        .long      0x6

 .ascii "fbld"
        .byte      0x4
        .long      0x37

 .ascii "fchs"
        .byte      0x20
        .long      0xa7

 .ascii "fcom"
        .byte      0x2
        .long      0x6

 .ascii "fcos"
        .byte      0x3f
        .long      0xa7

 .ascii "fdiv"
        .byte      0x6
        .long      0x6

 .ascii "feni"
        .byte      0xe0
        .long      0x41

 .ascii "fild"
        .byte      0x0
        .long      0x40

 .ascii "fist"
        .byte      0x2
        .long      0x40

 .ascii "fld1"
        .byte      0x28
        .long      0xa7

 .ascii "fldz"
        .byte      0x2e
        .long      0xa7

 .ascii "fmul"
        .byte      0x1
        .long      0x6

 .ascii "fnop"
        .byte      0x10
        .long      0xa7

 .ascii "fsin"
        .byte      0x3e
        .long      0xa7

 .ascii "fstp"
        .byte      0x3
        .long      0x42

 .ascii "fsub"
        .byte      0x4
        .long      0x6

 .ascii "ftst"
        .byte      0x24
        .long      0xa7

 .ascii "fxam"
        .byte      0x25
        .long      0xa7

 .ascii "fxch"
        .byte      0x0
        .long      0x4f

 .ascii "heap"
        .byte      0x0
        .long      0x50

 .ascii "idiv"
        .byte      0x7
        .long      0xb1

 .ascii "imul"
        .byte      0x0
        .long      0x52

 .ascii "insb"
        .byte      0x6c
        .long      0xa8

 .ascii "insd"
        .byte      0x6d
        .long      0xab

 .ascii "insw"
        .byte      0x6d
        .long      0xa9

 .ascii "int1"
        .byte      0xf1
        .long      0xa8

 .ascii "int3"
        .byte      0xcc
        .long      0xa8

 .ascii "into"
        .byte      0xce
        .long      0xae

 .ascii "invd"
        .byte      0x8
        .long      0xa6

 .ascii "iret"
        .byte      0xcf
        .long      0x58

 .ascii "jcxz"
        .byte      0xe3
        .long      0x62

 .ascii "jnae"
        .byte      0x72
        .long      0x1b

 .ascii "jnbe"
        .byte      0x77
        .long      0x1b

 .ascii "jnge"
        .byte      0x7c
        .long      0x1b

 .ascii "jnle"
        .byte      0x7f
        .long      0x1b

 .ascii "lahf"
        .byte      0x9f
        .long      0xa8

 .ascii "lgdt"
        .byte      0x2
        .long      0x5e

 .ascii "lidt"
        .byte      0x3
        .long      0x5e

 .ascii "lldt"
        .byte      0x2
        .long      0x88

 .ascii "lmsw"
        .byte      0x16
        .long      0x88

 .ascii "load"
        .byte      0x0
        .long      0x5f

 .ascii "lock"
        .byte      0xf0
        .long      0x8b

 .ascii "lods"
        .byte      0xac
        .long      0x60

 .ascii "loop"
        .byte      0xe2
        .long      0x61

 .ascii "movd"
        .byte      0x0
        .long      0x6c

 .ascii "movq"
        .byte      0x0
        .long      0x7a

 .ascii "movs"
        .byte      0xa4
        .long      0x7c

 .ascii "orpd"
        .byte      0x56
        .long      0xb2

 .ascii "orps"
        .byte      0x56
        .long      0xb3

 .ascii "outs"
        .byte      0x6e
        .long      0x83

 .ascii "pand"
        .byte      0xdb
        .long      0x68

 .ascii "popa"
        .byte      0x61
        .long      0xae

 .ascii "popd"
        .byte      0x4
        .long      0x89

 .ascii "popf"
        .byte      0x9d
        .long      0xa8

 .ascii "popq"
        .byte      0x8
        .long      0x89

 .ascii "popw"
        .byte      0x2
        .long      0x89

 .ascii "push"
        .byte      0x0
        .long      0x91

 .ascii "pxor"
        .byte      0xef
        .long      0x68

 .ascii "repe"
        .byte      0xf3
        .long      0x8b

 .ascii "repz"
        .byte      0xf3
        .long      0x8b

 .ascii "retd"
        .byte      0xc2
        .long      0x9c

 .ascii "retf"
        .byte      0xca
        .long      0xa0

 .ascii "retn"
        .byte      0xc2
        .long      0x99

 .ascii "retq"
        .byte      0xc2
        .long      0x9e

 .ascii "retw"
        .byte      0xc2
        .long      0x9a

 .ascii "sahf"
        .byte      0x9e
        .long      0xa8

 .ascii "salc"
        .byte      0xd6
        .long      0xae

 .ascii "scas"
        .byte      0xae
        .long      0xb8

 .ascii "seta"
        .byte      0x97
        .long      0xa3

 .ascii "setb"
        .byte      0x92
        .long      0xa3

 .ascii "setc"
        .byte      0x92
        .long      0xa3

 .ascii "sete"
        .byte      0x94
        .long      0xa3

 .ascii "setg"
        .byte      0x9f
        .long      0xa3

 .ascii "setl"
        .byte      0x9c
        .long      0xa3

 .ascii "seto"
        .byte      0x90
        .long      0xa3

 .ascii "setp"
        .byte      0x9a
        .long      0xa3

 .ascii "sets"
        .byte      0x98
        .long      0xa3

 .ascii "setz"
        .byte      0x94
        .long      0xa3

 .ascii "sgdt"
        .byte      0x0
        .long      0x5e

 .ascii "shld"
        .byte      0xa4
        .long      0xa5

 .ascii "shrd"
        .byte      0xac
        .long      0xa5

 .ascii "sidt"
        .byte      0x1
        .long      0x5e

 .ascii "sldt"
        .byte      0x0
        .long      0x87

 .ascii "smsw"
        .byte      0x14
        .long      0x87

 .ascii "stos"
        .byte      0xaa
        .long      0xb8

 .ascii "test"
        .byte      0x0
        .long      0xba

 .ascii "verr"
        .byte      0x4
        .long      0x88

 .ascii "verw"
        .byte      0x5
        .long      0x88

 .ascii "wait"
        .byte      0x9b
        .long      0xa8

 .ascii "xadd"
        .byte      0xc0
        .long      0x5

 .ascii "xchg"
        .byte      0x0
        .long      0xc3

 .ascii "xlat"
        .byte      0xd7
        .long      0xc4
        .byte      0x0
instructions_5__hla_393:

 .ascii "addpd"
        .byte      0x58
        .long      0xb2

 .ascii "addps"
        .byte      0x58
        .long      0xb3

 .ascii "addsd"
        .byte      0x58
        .long      0xb4

 .ascii "addss"
        .byte      0x58
        .long      0xb5

 .ascii "align"
        .byte      0x0
        .long      0x1

 .ascii "andpd"
        .byte      0x54
        .long      0xb2

 .ascii "andps"
        .byte      0x54
        .long      0xb3

 .ascii "bound"
        .byte      0x0
        .long      0x8

 .ascii "break"
        .byte      0x0
        .long      0x9

 .ascii "bswap"
        .byte      0x0
        .long      0xb

 .ascii "cmova"
        .byte      0x47
        .long      0xe

 .ascii "cmovb"
        .byte      0x42
        .long      0xe

 .ascii "cmovc"
        .byte      0x42
        .long      0xe

 .ascii "cmove"
        .byte      0x44
        .long      0xe

 .ascii "cmovg"
        .byte      0x4f
        .long      0xe

 .ascii "cmovl"
        .byte      0x4c
        .long      0xe

 .ascii "cmovo"
        .byte      0x40
        .long      0xe

 .ascii "cmovp"
        .byte      0x4a
        .long      0xe

 .ascii "cmovs"
        .byte      0x48
        .long      0xe

 .ascii "cmovz"
        .byte      0x44
        .long      0xe

 .ascii "cmppd"
        .byte      0x0
        .long      0x13

 .ascii "cmpps"
        .byte      0x0
        .long      0x14

 .ascii "cmpsb"
        .byte      0xa6
        .long      0xa8

 .ascii "cmpsd"
        .byte      0x0
        .long      0x16

 .ascii "cmpsq"
        .byte      0xa7
        .long      0xad

 .ascii "cmpss"
        .byte      0x0
        .long      0x17

 .ascii "cmpsw"
        .byte      0xa7
        .long      0xa9

 .ascii "cpuid"
        .byte      0xa2
        .long      0xa6

 .ascii "divpd"
        .byte      0x5e
        .long      0xb2

 .ascii "divps"
        .byte      0x5e
        .long      0xb3

 .ascii "divsd"
        .byte      0x5e
        .long      0xb4

 .ascii "divss"
        .byte      0x5e
        .long      0xb5

 .ascii "enter"
        .byte      0x0
        .long      0x33

 .ascii "entry"
        .byte      0x0
        .long      0x34

 .ascii "extrn"
        .byte      0x0
        .long      0x35

 .ascii "f2xm1"
        .byte      0x30
        .long      0xa7

 .ascii "faddp"
        .byte      0x0
        .long      0x36

 .ascii "fbstp"
        .byte      0x6
        .long      0x37

 .ascii "fclex"
        .byte      0xe2
        .long      0x41

 .ascii "fcomi"
        .byte      0xf0
        .long      0x39

 .ascii "fcomp"
        .byte      0x3
        .long      0x6

 .ascii "fdisi"
        .byte      0xe1
        .long      0x41

 .ascii "fdivp"
        .byte      0x7
        .long      0x36

 .ascii "fdivr"
        .byte      0x7
        .long      0x6

 .ascii "femms"
        .byte      0xe
        .long      0xa6

 .ascii "ffree"
        .byte      0x0
        .long      0x3d

 .ascii "fiadd"
        .byte      0x0
        .long      0x3f

 .ascii "ficom"
        .byte      0x2
        .long      0x3f

 .ascii "fidiv"
        .byte      0x6
        .long      0x3f

 .ascii "fimul"
        .byte      0x1
        .long      0x3f

 .ascii "finit"
        .byte      0xe3
        .long      0x41

 .ascii "fistp"
        .byte      0x3
        .long      0x40

 .ascii "fisub"
        .byte      0x4
        .long      0x3f

 .ascii "fldcw"
        .byte      0x5
        .long      0x43

 .ascii "fldpi"
        .byte      0x2b
        .long      0xa7

 .ascii "fmulp"
        .byte      0x1
        .long      0x36

 .ascii "fneni"
        .byte      0xe0
        .long      0x45

 .ascii "fprem"
        .byte      0x38
        .long      0xa7

 .ascii "fptan"
        .byte      0x32
        .long      0xa7

 .ascii "fsave"
        .byte      0x6
        .long      0x49

 .ascii "fsqrt"
        .byte      0x3a
        .long      0xa7

 .ascii "fstcw"
        .byte      0x7
        .long      0x4a

 .ascii "fstsw"
        .byte      0x0
        .long      0x4b

 .ascii "fsubp"
        .byte      0x5
        .long      0x36

 .ascii "fsubr"
        .byte      0x5
        .long      0x6

 .ascii "fucom"
        .byte      0x4
        .long      0x3d

 .ascii "fwait"
        .byte      0x9b
        .long      0xa8

 .ascii "fyl2x"
        .byte      0x31
        .long      0xa7

 .ascii "iretd"
        .byte      0xcf
        .long      0xab

 .ascii "iretq"
        .byte      0xcf
        .long      0xad

 .ascii "iretw"
        .byte      0xcf
        .long      0xa9

 .ascii "jecxz"
        .byte      0xe3
        .long      0x63

 .ascii "jrcxz"
        .byte      0xe3
        .long      0x64

 .ascii "label"
        .byte      0x0
        .long      0x5a

 .ascii "lddqu"
        .byte      0x0
        .long      0x5c

 .ascii "leave"
        .byte      0xc9
        .long      0xa8

 .ascii "lodsb"
        .byte      0xac
        .long      0xa8

 .ascii "lodsd"
        .byte      0xad
        .long      0xab

 .ascii "lodsq"
        .byte      0xad
        .long      0xad

 .ascii "lodsw"
        .byte      0xad
        .long      0xa9

 .ascii "loopd"
        .byte      0xe2
        .long      0x63

 .ascii "loope"
        .byte      0xe1
        .long      0x61

 .ascii "loopq"
        .byte      0xe2
        .long      0x64

 .ascii "loopw"
        .byte      0xe2
        .long      0x62

 .ascii "loopz"
        .byte      0xe1
        .long      0x61

 .ascii "maxpd"
        .byte      0x5f
        .long      0xb2

 .ascii "maxps"
        .byte      0x5f
        .long      0xb3

 .ascii "maxsd"
        .byte      0x5f
        .long      0xb4

 .ascii "maxss"
        .byte      0x5f
        .long      0xb5

 .ascii "minpd"
        .byte      0x5d
        .long      0xb2

 .ascii "minps"
        .byte      0x5d
        .long      0xb3

 .ascii "minsd"
        .byte      0x5d
        .long      0xb4

 .ascii "minss"
        .byte      0x5d
        .long      0xb5

 .ascii "movsb"
        .byte      0xa4
        .long      0xa8

 .ascii "movsd"
        .byte      0x0
        .long      0x7d

 .ascii "movsq"
        .byte      0xa5
        .long      0xad

 .ascii "movss"
        .byte      0x0
        .long      0x7e

 .ascii "movsw"
        .byte      0xa5
        .long      0xa9

 .ascii "movsx"
        .byte      0xbe
        .long      0x80

 .ascii "movzx"
        .byte      0xb6
        .long      0x80

 .ascii "mulpd"
        .byte      0x59
        .long      0xb2

 .ascii "mulps"
        .byte      0x59
        .long      0xb3

 .ascii "mulsd"
        .byte      0x59
        .long      0xb4

 .ascii "mulss"
        .byte      0x59
        .long      0xb5

 .ascii "mwait"
        .byte      0xc9
        .long      0x6a

 .ascii "outsb"
        .byte      0x6e
        .long      0xa8

 .ascii "outsd"
        .byte      0x6f
        .long      0xab

 .ascii "outsw"
        .byte      0x6f
        .long      0xa9

 .ascii "paddb"
        .byte      0xfc
        .long      0x68

 .ascii "paddd"
        .byte      0xfe
        .long      0x68

 .ascii "paddq"
        .byte      0xd4
        .long      0x68

 .ascii "paddw"
        .byte      0xfd
        .long      0x68

 .ascii "pandn"
        .byte      0xdf
        .long      0x68

 .ascii "pause"
        .byte      0x0
        .long      0x84

 .ascii "pavgb"
        .byte      0xe0
        .long      0x68

 .ascii "pavgw"
        .byte      0xe3
        .long      0x68

 .ascii "pf2id"
        .byte      0x1d
        .long      0x2

 .ascii "pf2iw"
        .byte      0x1c
        .long      0x2

 .ascii "pfacc"
        .byte      0xae
        .long      0x2

 .ascii "pfadd"
        .byte      0x9e
        .long      0x2

 .ascii "pfmax"
        .byte      0xa4
        .long      0x2

 .ascii "pfmin"
        .byte      0x94
        .long      0x2

 .ascii "pfmul"
        .byte      0xb4
        .long      0x2

 .ascii "pfrcp"
        .byte      0x96
        .long      0x2

 .ascii "pfsub"
        .byte      0x9a
        .long      0x2

 .ascii "pi2fd"
        .byte      0xd
        .long      0x2

 .ascii "pi2fw"
        .byte      0xc
        .long      0x2

 .ascii "popad"
        .byte      0x61
        .long      0xac

 .ascii "popaw"
        .byte      0x61
        .long      0xaa

 .ascii "popfd"
        .byte      0x9d
        .long      0xac

 .ascii "popfw"
        .byte      0x9d
        .long      0xa9

 .ascii "popfq"
        .byte      0x9d
        .long      0xaf

 .ascii "pslld"
        .byte      0xf2
        .long      0x69

 .ascii "psllq"
        .byte      0xf3
        .long      0x69

 .ascii "psllw"
        .byte      0xf1
        .long      0x69

 .ascii "psrad"
        .byte      0xe2
        .long      0x69

 .ascii "psraw"
        .byte      0xe1
        .long      0x69

 .ascii "psrld"
        .byte      0xd2
        .long      0x69

 .ascii "psrlq"
        .byte      0xd3
        .long      0x69

 .ascii "psrlw"
        .byte      0xd1
        .long      0x69

 .ascii "psubb"
        .byte      0xf8
        .long      0x68

 .ascii "psubd"
        .byte      0xfa
        .long      0x68

 .ascii "psubq"
        .byte      0xfb
        .long      0x68

 .ascii "psubw"
        .byte      0xf9
        .long      0x68

 .ascii "pusha"
        .byte      0x60
        .long      0xae

 .ascii "pushd"
        .byte      0x4
        .long      0x91

 .ascii "pushf"
        .byte      0x9c
        .long      0xa8

 .ascii "pushq"
        .byte      0x8
        .long      0x91

 .ascii "pushw"
        .byte      0x2
        .long      0x91

 .ascii "rcpps"
        .byte      0x53
        .long      0xb3

 .ascii "rcpss"
        .byte      0x53
        .long      0xb5

 .ascii "rdmsr"
        .byte      0x32
        .long      0xa6

 .ascii "rdpmc"
        .byte      0x33
        .long      0xa6

 .ascii "rdtsc"
        .byte      0x31
        .long      0xa6

 .ascii "repne"
        .byte      0xf2
        .long      0x8b

 .ascii "repnz"
        .byte      0xf2
        .long      0x8b

 .ascii "retfd"
        .byte      0xca
        .long      0x9b

 .ascii "retfq"
        .byte      0xca
        .long      0x9d

 .ascii "retfw"
        .byte      0xca
        .long      0x9a

 .ascii "retnd"
        .byte      0xc2
        .long      0x9c

 .ascii "retnq"
        .byte      0xc2
        .long      0x9e

 .ascii "retnw"
        .byte      0xc2
        .long      0x9a

 .ascii "scasb"
        .byte      0xae
        .long      0xa8

 .ascii "scasd"
        .byte      0xaf
        .long      0xab

 .ascii "scasq"
        .byte      0xaf
        .long      0xad

 .ascii "scasw"
        .byte      0xaf
        .long      0xa9

 .ascii "setae"
        .byte      0x93
        .long      0xa3

 .ascii "setbe"
        .byte      0x96
        .long      0xa3

 .ascii "setge"
        .byte      0x9d
        .long      0xa3

 .ascii "setle"
        .byte      0x9e
        .long      0xa3

 .ascii "setna"
        .byte      0x96
        .long      0xa3

 .ascii "setnb"
        .byte      0x93
        .long      0xa3

 .ascii "setnc"
        .byte      0x93
        .long      0xa3

 .ascii "setne"
        .byte      0x95
        .long      0xa3

 .ascii "setng"
        .byte      0x9e
        .long      0xa3

 .ascii "setnl"
        .byte      0x9d
        .long      0xa3

 .ascii "setno"
        .byte      0x91
        .long      0xa3

 .ascii "setnp"
        .byte      0x9b
        .long      0xa3

 .ascii "setns"
        .byte      0x99
        .long      0xa3

 .ascii "setnz"
        .byte      0x95
        .long      0xa3

 .ascii "setpe"
        .byte      0x9a
        .long      0xa3

 .ascii "setpo"
        .byte      0x9b
        .long      0xa3

 .ascii "stack"
        .byte      0x0
        .long      0xb6

 .ascii "store"
        .byte      0x0
        .long      0xb7

 .ascii "stosb"
        .byte      0xaa
        .long      0xa8

 .ascii "stosd"
        .byte      0xab
        .long      0xab

 .ascii "stosq"
        .byte      0xab
        .long      0xad

 .ascii "stosw"
        .byte      0xab
        .long      0xa9

 .ascii "subpd"
        .byte      0x5c
        .long      0xb2

 .ascii "subps"
        .byte      0x5c
        .long      0xb3

 .ascii "subsd"
        .byte      0x5c
        .long      0xb4

 .ascii "subss"
        .byte      0x5c
        .long      0xb5

 .ascii "times"
        .byte      0x0
        .long      0xbb

 .ascii "vmxon"
        .byte      0x6
        .long      0xc1

 .ascii "while"
        .byte      0x0
        .long      0xc2

 .ascii "wrmsr"
        .byte      0x30
        .long      0xa6

 .ascii "xlatb"
        .byte      0xd7
        .long      0xa8

 .ascii "xorpd"
        .byte      0x57
        .long      0xb2

 .ascii "xorps"
        .byte      0x57
        .long      0xb3
        .byte      0x0
instructions_6__hla_394:

 .ascii "andnpd"
        .byte      0x55
        .long      0xb2

 .ascii "andnps"
        .byte      0x55
        .long      0xb3

 .ascii "cmovae"
        .byte      0x43
        .long      0xe

 .ascii "cmovbe"
        .byte      0x46
        .long      0xe

 .ascii "cmovge"
        .byte      0x4d
        .long      0xe

 .ascii "cmovle"
        .byte      0x4e
        .long      0xe

 .ascii "cmovna"
        .byte      0x46
        .long      0xe

 .ascii "cmovnb"
        .byte      0x43
        .long      0xe

 .ascii "cmovnc"
        .byte      0x43
        .long      0xe

 .ascii "cmovne"
        .byte      0x45
        .long      0xe

 .ascii "cmovng"
        .byte      0x4e
        .long      0xe

 .ascii "cmovnl"
        .byte      0x4d
        .long      0xe

 .ascii "cmovno"
        .byte      0x41
        .long      0xe

 .ascii "cmovnp"
        .byte      0x4b
        .long      0xe

 .ascii "cmovns"
        .byte      0x49
        .long      0xe

 .ascii "cmovnz"
        .byte      0x45
        .long      0xe

 .ascii "cmovpe"
        .byte      0x4a
        .long      0xe

 .ascii "cmovpo"
        .byte      0x4b
        .long      0xe

 .ascii "comisd"
        .byte      0x2f
        .long      0x19

 .ascii "comiss"
        .byte      0x2f
        .long      0x1a

 .ascii "fcmovb"
        .byte      0xc0
        .long      0x38

 .ascii "fcmove"
        .byte      0xc8
        .long      0x38

 .ascii "fcmovu"
        .byte      0xd8
        .long      0x38

 .ascii "fcomip"
        .byte      0xf0
        .long      0x3a

 .ascii "fcompp"
        .byte      0x0
        .long      0x3b

 .ascii "fdivrp"
        .byte      0x6
        .long      0x36

 .ascii "ffreep"
        .byte      0x0
        .long      0x3e

 .ascii "ficomp"
        .byte      0x3
        .long      0x3f

 .ascii "fidivr"
        .byte      0x7
        .long      0x3f

 .ascii "fisttp"
        .byte      0x1
        .long      0x40

 .ascii "fisubr"
        .byte      0x5
        .long      0x3f

 .ascii "fldenv"
        .byte      0x4
        .long      0x44

 .ascii "fldl2e"
        .byte      0x2a
        .long      0xa7

 .ascii "fldl2t"
        .byte      0x29
        .long      0xa7

 .ascii "fldlg2"
        .byte      0x2c
        .long      0xa7

 .ascii "fldln2"
        .byte      0x2d
        .long      0xa7

 .ascii "fnclex"
        .byte      0xe2
        .long      0x45

 .ascii "fndisi"
        .byte      0xe1
        .long      0x45

 .ascii "fninit"
        .byte      0xe3
        .long      0x45

 .ascii "fnsave"
        .byte      0x6
        .long      0x46

 .ascii "fnstcw"
        .byte      0x7
        .long      0x43

 .ascii "fnstsw"
        .byte      0x0
        .long      0x47

 .ascii "format"
        .byte      0x0
        .long      0x48

 .ascii "fpatan"
        .byte      0x33
        .long      0xa7

 .ascii "fprem1"
        .byte      0x35
        .long      0xa7

 .ascii "frstor"
        .byte      0x4
        .long      0x46

 .ascii "frstpm"
        .byte      0xe5
        .long      0x45

 .ascii "fscale"
        .byte      0x3d
        .long      0xa7

 .ascii "fsetpm"
        .byte      0xe4
        .long      0x45

 .ascii "fstenv"
        .byte      0x6
        .long      0x4c

 .ascii "fsubrp"
        .byte      0x4
        .long      0x36

 .ascii "fucomi"
        .byte      0xe8
        .long      0x39

 .ascii "fucomp"
        .byte      0x5
        .long      0x3d

 .ascii "fxsave"
        .byte      0x0
        .long      0x4e

 .ascii "haddpd"
        .byte      0x7c
        .long      0xb2

 .ascii "haddps"
        .byte      0x7c
        .long      0x1d

 .ascii "hsubpd"
        .byte      0x7d
        .long      0xb2

 .ascii "hsubps"
        .byte      0x7d
        .long      0x1d

 .ascii "invlpg"
        .byte      0x0
        .long      0x57

 .ascii "lfence"
        .byte      0xe8
        .long      0x3c

 .ascii "looped"
        .byte      0xe1
        .long      0x63

 .ascii "loopeq"
        .byte      0xe1
        .long      0x64

 .ascii "loopew"
        .byte      0xe1
        .long      0x62

 .ascii "loopne"
        .byte      0xe0
        .long      0x61

 .ascii "loopnz"
        .byte      0xe0
        .long      0x61

 .ascii "loopzd"
        .byte      0xe1
        .long      0x63

 .ascii "loopzq"
        .byte      0xe1
        .long      0x64

 .ascii "loopzw"
        .byte      0xe1
        .long      0x62

 .ascii "mfence"
        .byte      0xf0
        .long      0x3c

 .ascii "movapd"
        .byte      0x28
        .long      0x78

 .ascii "movaps"
        .byte      0x28
        .long      0x79

 .ascii "movdqa"
        .byte      0x66
        .long      0x6d

 .ascii "movdqu"
        .byte      0xf3
        .long      0x6d

 .ascii "movhpd"
        .byte      0x16
        .long      0x70

 .ascii "movhps"
        .byte      0x16
        .long      0x71

 .ascii "movlpd"
        .byte      0x12
        .long      0x70

 .ascii "movlps"
        .byte      0x12
        .long      0x71

 .ascii "movnti"
        .byte      0xc3
        .long      0x74

 .ascii "movntq"
        .byte      0xe7
        .long      0x75

 .ascii "movsxd"
        .byte      0x63
        .long      0x7f

 .ascii "movupd"
        .byte      0x10
        .long      0x78

 .ascii "movups"
        .byte      0x10
        .long      0x79

 .ascii "paddsb"
        .byte      0xec
        .long      0x68

 .ascii "paddsw"
        .byte      0xed
        .long      0x68

 .ascii "pextrw"
        .byte      0xc5
        .long      0x85

 .ascii "pfnacc"
        .byte      0x8a
        .long      0x2

 .ascii "pfsubr"
        .byte      0xaa
        .long      0x2

 .ascii "pinsrw"
        .byte      0xc4
        .long      0x86

 .ascii "pmaxsw"
        .byte      0xee
        .long      0x68

 .ascii "pmaxub"
        .byte      0xde
        .long      0x68

 .ascii "pminsw"
        .byte      0xea
        .long      0x68

 .ascii "pminub"
        .byte      0xda
        .long      0x68

 .ascii "pmulhw"
        .byte      0xe5
        .long      0x68

 .ascii "pmullw"
        .byte      0xd5
        .long      0x68

 .ascii "psadbw"
        .byte      0xf6
        .long      0x68

 .ascii "pshufd"
        .byte      0x66
        .long      0x8c

 .ascii "pshufw"
        .byte      0x0
        .long      0x8d

 .ascii "pslldq"
        .byte      0x7
        .long      0x8f

 .ascii "psrldq"
        .byte      0x3
        .long      0x8f

 .ascii "psubsb"
        .byte      0xe8
        .long      0x68

 .ascii "psubsw"
        .byte      0xe9
        .long      0x68

 .ascii "pswapd"
        .byte      0xbb
        .long      0x2

 .ascii "public"
        .byte      0x0
        .long      0x90

 .ascii "pushad"
        .byte      0x60
        .long      0xac

 .ascii "pushaw"
        .byte      0x60
        .long      0xaa

 .ascii "pushfd"
        .byte      0x9c
        .long      0xac

 .ascii "pushfq"
        .byte      0x9c
        .long      0xaf

 .ascii "pushfw"
        .byte      0x9c
        .long      0xa9

 .ascii "rdtscp"
        .byte      0x1
        .long      0xb9

 .ascii "repeat"
        .byte      0x0
        .long      0x92

 .ascii "setalc"
        .byte      0xd6
        .long      0xae

 .ascii "setnae"
        .byte      0x92
        .long      0xa3

 .ascii "setnbe"
        .byte      0x97
        .long      0xa3

 .ascii "setnge"
        .byte      0x9c
        .long      0xa3

 .ascii "setnle"
        .byte      0x9f
        .long      0xa3

 .ascii "sfence"
        .byte      0xf8
        .long      0x3c

 .ascii "shufpd"
        .byte      0xc6
        .long      0xb2

 .ascii "shufps"
        .byte      0xc6
        .long      0xb3

 .ascii "sqrtpd"
        .byte      0x51
        .long      0xb2

 .ascii "sqrtps"
        .byte      0x51
        .long      0xb3

 .ascii "sqrtsd"
        .byte      0x51
        .long      0xb4

 .ascii "sqrtss"
        .byte      0x51
        .long      0xb5

 .ascii "swapgs"
        .byte      0x0
        .long      0xb9

 .ascii "sysret"
        .byte      0x7
        .long      0xa6

 .ascii "vmcall"
        .byte      0xc1
        .long      0xb0

 .ascii "vmread"
        .byte      0x0
        .long      0xbe

 .ascii "vmxoff"
        .byte      0xc4
        .long      0xb0

 .ascii "wbinvd"
        .byte      0x9
        .long      0xa6
        .byte      0x0
instructions_7__hla_395:

 .ascii "clflush"
        .byte      0x7
        .long      0x4e

 .ascii "cmovnae"
        .byte      0x42
        .long      0xe

 .ascii "cmovnbe"
        .byte      0x47
        .long      0xe

 .ascii "cmovnge"
        .byte      0x4c
        .long      0xe

 .ascii "cmovnle"
        .byte      0x4f
        .long      0xe

 .ascii "cmpeqpd"
        .byte      0x0
        .long      0xf

 .ascii "cmpeqps"
        .byte      0x0
        .long      0x10

 .ascii "cmpeqsd"
        .byte      0x0
        .long      0x11

 .ascii "cmpeqss"
        .byte      0x0
        .long      0x12

 .ascii "cmplepd"
        .byte      0x2
        .long      0xf

 .ascii "cmpleps"
        .byte      0x2
        .long      0x10

 .ascii "cmplesd"
        .byte      0x2
        .long      0x11

 .ascii "cmpless"
        .byte      0x2
        .long      0x12

 .ascii "cmpltpd"
        .byte      0x1
        .long      0xf

 .ascii "cmpltps"
        .byte      0x1
        .long      0x10

 .ascii "cmpltsd"
        .byte      0x1
        .long      0x11

 .ascii "cmpltss"
        .byte      0x1
        .long      0x12

 .ascii "cmpxchg"
        .byte      0xb0
        .long      0x5

 .ascii "display"
        .byte      0x0
        .long      0x30

 .ascii "fcmovbe"
        .byte      0xd0
        .long      0x38

 .ascii "fcmovnb"
        .byte      0xc0
        .long      0x39

 .ascii "fcmovne"
        .byte      0xc8
        .long      0x39

 .ascii "fcmovnu"
        .byte      0xd8
        .long      0x39

 .ascii "fdecstp"
        .byte      0x36
        .long      0xa7

 .ascii "fincstp"
        .byte      0x37
        .long      0xa7

 .ascii "fnstenv"
        .byte      0x6
        .long      0x44

 .ascii "frndint"
        .byte      0x3c
        .long      0xa7

 .ascii "fsincos"
        .byte      0x3b
        .long      0xa7

 .ascii "fucomip"
        .byte      0xe8
        .long      0x3a

 .ascii "fucompp"
        .byte      0x0
        .long      0x4d

 .ascii "fxrstor"
        .byte      0x1
        .long      0x4e

 .ascii "fxtract"
        .byte      0x34
        .long      0xa7

 .ascii "fyl2xp1"
        .byte      0x39
        .long      0xa7

 .ascii "ldmxcsr"
        .byte      0x2
        .long      0x4e

 .ascii "loopned"
        .byte      0xe0
        .long      0x63

 .ascii "loopneq"
        .byte      0xe0
        .long      0x64

 .ascii "loopnew"
        .byte      0xe0
        .long      0x62

 .ascii "loopnzd"
        .byte      0xe0
        .long      0x63

 .ascii "loopnzq"
        .byte      0xe0
        .long      0x64

 .ascii "loopnzw"
        .byte      0xe0
        .long      0x62

 .ascii "monitor"
        .byte      0xc8
        .long      0x6a

 .ascii "movddup"
        .byte      0x12
        .long      0xb4

 .ascii "movdq2q"
        .byte      0x0
        .long      0x6e

 .ascii "movhlps"
        .byte      0x12
        .long      0x6f

 .ascii "movlhps"
        .byte      0x16
        .long      0x6f

 .ascii "movntdq"
        .byte      0xe7
        .long      0x76

 .ascii "movntpd"
        .byte      0x2b
        .long      0x76

 .ascii "movntps"
        .byte      0x2b
        .long      0x77

 .ascii "movq2dq"
        .byte      0x0
        .long      0x7b

 .ascii "paddusb"
        .byte      0xdc
        .long      0x68

 .ascii "paddusw"
        .byte      0xdd
        .long      0x68

 .ascii "pavgusb"
        .byte      0xbf
        .long      0x2

 .ascii "pcmpeqb"
        .byte      0x74
        .long      0x68

 .ascii "pcmpeqd"
        .byte      0x76
        .long      0x68

 .ascii "pcmpeqw"
        .byte      0x75
        .long      0x68

 .ascii "pcmpgtb"
        .byte      0x64
        .long      0x68

 .ascii "pcmpgtd"
        .byte      0x66
        .long      0x68

 .ascii "pcmpgtw"
        .byte      0x65
        .long      0x68

 .ascii "pfcmpeq"
        .byte      0xb0
        .long      0x2

 .ascii "pfcmpge"
        .byte      0x90
        .long      0x2

 .ascii "pfcmpgt"
        .byte      0xa0
        .long      0x2

 .ascii "pfpnacc"
        .byte      0x8e
        .long      0x2

 .ascii "pfrsqrt"
        .byte      0x97
        .long      0x2

 .ascii "pmaddwd"
        .byte      0xf5
        .long      0x68

 .ascii "pmulhrw"
        .byte      0xb7
        .long      0x2

 .ascii "pmulhuw"
        .byte      0xe4
        .long      0x68

 .ascii "pmuludq"
        .byte      0xf4
        .long      0x68

 .ascii "pshufhw"
        .byte      0xf3
        .long      0x8c

 .ascii "pshuflw"
        .byte      0xf2
        .long      0x8c

 .ascii "psubusb"
        .byte      0xd8
        .long      0x68

 .ascii "psubusw"
        .byte      0xd9
        .long      0x68

 .ascii "rsqrtps"
        .byte      0x52
        .long      0xb3

 .ascii "rsqrtss"
        .byte      0x52
        .long      0xb5

 .ascii "section"
        .byte      0x0
        .long      0xa1

 .ascii "segment"
        .byte      0x0
        .long      0xa2

 .ascii "stmxcsr"
        .byte      0x3
        .long      0x4e

 .ascii "syscall"
        .byte      0x5
        .long      0xa6

 .ascii "sysexit"
        .byte      0x35
        .long      0xa6

 .ascii "ucomisd"
        .byte      0x2e
        .long      0x19

 .ascii "ucomiss"
        .byte      0x2e
        .long      0x1a

 .ascii "virtual"
        .byte      0x0
        .long      0xbc

 .ascii "vmclear"
        .byte      0x6
        .long      0xbd

 .ascii "vmptrld"
        .byte      0x6
        .long      0xc0

 .ascii "vmptrst"
        .byte      0x7
        .long      0xc0

 .ascii "vmwrite"
        .byte      0x0
        .long      0xbf
        .byte      0x0
instructions_8__hla_396:

 .ascii "addsubpd"
        .byte      0xd0
        .long      0xb2

 .ascii "addsubps"
        .byte      0xd0
        .long      0x1d

 .ascii "cmpneqpd"
        .byte      0x4
        .long      0xf

 .ascii "cmpneqps"
        .byte      0x4
        .long      0x10

 .ascii "cmpneqsd"
        .byte      0x4
        .long      0x11

 .ascii "cmpneqss"
        .byte      0x4
        .long      0x12

 .ascii "cmpnlepd"
        .byte      0x6
        .long      0xf

 .ascii "cmpnleps"
        .byte      0x6
        .long      0x10

 .ascii "cmpnlesd"
        .byte      0x6
        .long      0x11

 .ascii "cmpnless"
        .byte      0x6
        .long      0x12

 .ascii "cmpnltpd"
        .byte      0x5
        .long      0xf

 .ascii "cmpnltps"
        .byte      0x5
        .long      0x10

 .ascii "cmpnltsd"
        .byte      0x5
        .long      0x11

 .ascii "cmpnltss"
        .byte      0x5
        .long      0x12

 .ascii "cmpordpd"
        .byte      0x7
        .long      0xf

 .ascii "cmpordps"
        .byte      0x7
        .long      0x10

 .ascii "cmpordsd"
        .byte      0x7
        .long      0x11

 .ascii "cmpordss"
        .byte      0x7
        .long      0x12

 .ascii "cvtdq2pd"
        .byte      0xe6
        .long      0x1c

 .ascii "cvtdq2ps"
        .byte      0x5b
        .long      0xb3

 .ascii "cvtpd2dq"
        .byte      0xe6
        .long      0x1d

 .ascii "cvtpd2pi"
        .byte      0x2d
        .long      0x1e

 .ascii "cvtpd2ps"
        .byte      0x5a
        .long      0xb2

 .ascii "cvtpi2pd"
        .byte      0x2a
        .long      0x1f

 .ascii "cvtpi2ps"
        .byte      0x2a
        .long      0x20

 .ascii "cvtps2dq"
        .byte      0x5b
        .long      0xb2

 .ascii "cvtps2pd"
        .byte      0x5a
        .long      0x21

 .ascii "cvtps2pi"
        .byte      0x2d
        .long      0x22

 .ascii "cvtsd2si"
        .byte      0x2d
        .long      0x23

 .ascii "cvtsd2ss"
        .byte      0x5a
        .long      0xb4

 .ascii "cvtsi2sd"
        .byte      0x2a
        .long      0x24

 .ascii "cvtsi2ss"
        .byte      0x2a
        .long      0x25

 .ascii "cvtss2sd"
        .byte      0x5a
        .long      0xb5

 .ascii "cvtss2si"
        .byte      0x2d
        .long      0x26

 .ascii "fcmovnbe"
        .byte      0xd0
        .long      0x39

 .ascii "maskmovq"
        .byte      0x0
        .long      0x66

 .ascii "movmskpd"
        .byte      0x0
        .long      0x72

 .ascii "movmskps"
        .byte      0x0
        .long      0x73

 .ascii "movshdup"
        .byte      0x16
        .long      0x1c

 .ascii "movsldup"
        .byte      0x12
        .long      0x1c

 .ascii "packssdw"
        .byte      0x6b
        .long      0x68

 .ascii "packsswb"
        .byte      0x63
        .long      0x68

 .ascii "packuswb"
        .byte      0x67
        .long      0x68

 .ascii "pfrcpit1"
        .byte      0xa6
        .long      0x2

 .ascii "pfrcpit2"
        .byte      0xb6
        .long      0x2

 .ascii "pfrsqit1"
        .byte      0xa7
        .long      0x2

 .ascii "pmovmskb"
        .byte      0xd7
        .long      0x85

 .ascii "prefetch"
        .byte      0x0
        .long      0x3

 .ascii "sysenter"
        .byte      0x34
        .long      0xa6

 .ascii "unpckhpd"
        .byte      0x15
        .long      0xb2

 .ascii "unpckhps"
        .byte      0x15
        .long      0xb3

 .ascii "unpcklpd"
        .byte      0x14
        .long      0xb2

 .ascii "unpcklps"
        .byte      0x14
        .long      0xb3

 .ascii "vmlaunch"
        .byte      0xc2
        .long      0xb0

 .ascii "vmresume"
        .byte      0xc3
        .long      0xb0
        .byte      0x0
instructions_9__hla_397:

 .ascii "cmpxchg8b"
        .byte      0x8
        .long      0x18

 .ascii "cvttpd2dq"
        .byte      0xe6
        .long      0xb2

 .ascii "cvttpd2pi"
        .byte      0x2c
        .long      0x1e

 .ascii "cvttps2dq"
        .byte      0x5b
        .long      0x1c

 .ascii "cvttps2pi"
        .byte      0x2c
        .long      0x22

 .ascii "cvttsd2si"
        .byte      0x2c
        .long      0x23

 .ascii "cvttss2si"
        .byte      0x2c
        .long      0x26

 .ascii "prefetchw"
        .byte      0x1
        .long      0x3

 .ascii "punpckhbw"
        .byte      0x68
        .long      0x68

 .ascii "punpckhdq"
        .byte      0x6a
        .long      0x68

 .ascii "punpckhwd"
        .byte      0x69
        .long      0x68

 .ascii "punpcklbw"
        .byte      0x60
        .long      0x68

 .ascii "punpckldq"
        .byte      0x62
        .long      0x68

 .ascii "punpcklwd"
        .byte      0x61
        .long      0x68
        .byte      0x0
instructions_10__hla_398:

 .ascii "cmpunordpd"
        .byte      0x3
        .long      0xf

 .ascii "cmpunordps"
        .byte      0x3
        .long      0x10

 .ascii "cmpunordsd"
        .byte      0x3
        .long      0x11

 .ascii "cmpunordss"
        .byte      0x3
        .long      0x12

 .ascii "cmpxchg16b"
        .byte      0x10
        .long      0x18

 .ascii "loadall286"
        .byte      0x5
        .long      0xa6

 .ascii "loadall386"
        .byte      0x7
        .long      0xa6

 .ascii "maskmovdqu"
        .byte      0x0
        .long      0x67

 .ascii "prefetcht0"
        .byte      0x1
        .long      0x8a

 .ascii "prefetcht1"
        .byte      0x2
        .long      0x8a

 .ascii "prefetcht2"
        .byte      0x3
        .long      0x8a

 .ascii "punpckhqdq"
        .byte      0x6d
        .long      0xb2

 .ascii "punpcklqdq"
        .byte      0x6c
        .long      0xb2
        .byte      0x0
instructions_11__hla_399:

 .ascii "prefetchnta"
        .byte      0x0
        .long      0x8a
        .byte      0x0
errMsgPtr__hla_764 :.space     4
macro_directives__hla_1087:
        .byte      0x6

 .ascii "common"
        .long      common_block__hla_1088
        .byte      0x7

 .ascii "forward"
        .long      forward_block__hla_1089
        .byte      0x5

 .ascii "local"
        .long      local_symbols__hla_1090
        .byte      0x7

 .ascii "reverse"
        .long      reverse_block__hla_1091
        .byte      0x0
preprocessor_directives__hla_1174:
        .byte      0x6

 .ascii "define"
        .long      define_symbolic_constant__hla_1175
        .byte      0x7

 .ascii "include"
        .long      include_file__hla_1176
        .byte      0x3

 .ascii "irp"
        .long      irp_directive__hla_1177
        .byte      0x4

 .ascii "irps"
        .long      irps_directive__hla_1178
        .byte      0x5

 .ascii "macro"
        .long      define_macro__hla_1179
        .byte      0x5

 .ascii "match"
        .long      match_directive__hla_1180
        .byte      0x5

 .ascii "purge"
        .long      purge_macro__hla_1181
        .byte      0x4

 .ascii "rept"
        .long      rept_directive__hla_1182
        .byte      0x7

 .ascii "restore"
        .long      restore_equ_constant__hla_1183
        .byte      0x7

 .ascii "restruc"
        .long      purge_struc__hla_1184
        .byte      0x5

 .ascii "struc"
        .long      define_struc__hla_1185
        .byte      0x0
MainPgmCoroutine__hla_:
        .long      MainPgmVMT__hla___hla_3735
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
MainPgmVMT__hla___hla_3737 :.long      QuitMain__hla___hla_3736


  .bss

        .balign    (16)
startOfBSS__hla_33:
hashTable__hla_34 :.space     262144
stack__hla_35 :.space     65536
saved_Stack_Pointer__hla_36 :.space     4
C_memory__hla_37 :.space     4
C_memsize__hla_38 :.space     4
ExceptionPtr__hla_ :.space     4
org_origin__hla_40 :.space     8
value__hla_41 :.space     8
adjustment__hla_42 :.space     8
bytes_count__hla_43 :.space     4
displayed_count__hla_44 :.space     4
memory_start__hla_45 :.space     4
memory_end__hla_46 :.space     4
additional_memory__hla_47 :.space     4
additional_memory_end__hla_48 :.space     4
stack_limit__hla_49 :.space     4
input_file__hla_50 :.space     4
output_file__hla_51 :.space     4
include_paths__hla_52 :.space     4
free_additional_memory__hla_53 :.space     4
source_start__hla_54 :.space     4
code_start__hla_55 :.space     4
code_size__hla_56 :.space     4
real_code_size__hla_57 :.space     4
written_size__hla_58 :.space     4
headers_size__hla_59 :.space     4
current_line__hla_60 :.space     4
macro_line__hla_61 :.space     4
macro_block__hla_62 :.space     4
macro_block_line__hla_63 :.space     4
macro_block_line_number__hla_64 :.space     4
macro_symbols__hla_65 :.space     4
struc_name__hla_66 :.space     4
struc_label__hla_67 :.space     4
instant_macro_start__hla_68 :.space     4
parameters_end__hla_69 :.space     4
current_locals_prefix__hla_70 :.space     4
anonymous_reverse__hla_71 :.space     4
anonymous_forward__hla_72 :.space     4
labels_list__hla_73 :.space     4
label_hash__hla_74 :.space     4
label_leaf__hla_75 :.space     4
hash_tree__hla_76 :.space     4
org_registers__hla_77 :.space     4
org_start__hla_78 :.space     4
org_symbol__hla_79 :.space     4
undefined_data_start__hla_80 :.space     4
undefined_data_end__hla_81 :.space     4
counter__hla_82 :.space     4
counter_limit__hla_83 :.space     4
error_line__hla_84 :.space     4
error__hla_85 :.space     4
display_buffer__hla_86 :.space     4
structures_buffer__hla_87 :.space     4
number_start__hla_88 :.space     4
current_offset__hla_89 :.space     4
fp_value__hla_90 :.space     32
symbol_identifier__hla_91 :.space     4
address_symbol__hla_92 :.space     4
address_high__hla_93 :.space     4
format_flags__hla_94 :.space     4
symbols_stream__hla_95 :.space     4
number_of_relocations__hla_96 :.space     4
number_of_sections__hla_97 :.space     4
stub_size__hla_98 :.space     4
stub_file__hla_99 :.space     4
current_section__hla_100 :.space     4
subsystem_version__hla_101 :.space     4
image_base__hla_102 :.space     4
image_base_high__hla_103 :.space     4
resource_data__hla_104 :.space     4
resource_size__hla_105 :.space     4
parenthesis_stack__hla_106 :.space     4
blocks_stack__hla_107 :.space     4
memory_setting__hla_108 :.space     4
start_time__hla_109 :.space     4
passes_limit__hla_110 :.space     2
current_pass__hla_111 :.space     2
machine__hla_112 :.space     2
subsystem__hla_113 :.space     2
g_verbose__hla_114 :.space     1
next_pass_needed__hla_115 :.space     1
macro_status__hla_116 :.space     1
output_format__hla_117 :.space     1
code_type__hla_118 :.space     1
labels_type__hla_119 :.space     1
prefixed_instruction__hla_120 :.space     1
virtual_data__hla_121 :.space     1
fp_sign__hla_122 :.space     1
fp_format__hla_123 :.space     1
value_size__hla_124 :.space     1
size_override__hla_125 :.space     1
address_size__hla_126 :.space     1
operand_size__hla_127 :.space     1
size_declared__hla_128 :.space     1
value_undefined__hla_129 :.space     1
value_type__hla_130 :.space     1
compare_type__hla_131 :.space     1
base_code__hla_132 :.space     1
extended_code__hla_133 :.space     1
postbyte_register__hla_134 :.space     1
segment_register__hla_135 :.space     1
mmx_size__hla_136 :.space     1
jump_type__hla_137 :.space     1
push_size__hla_138 :.space     1
operand_prefix__hla_139 :.space     1
rex_prefix__hla_140 :.space     1
immediate_size__hla_141 :.space     1
converted__hla_142 :.space     256
params__hla_143 :.space     4096
buffer__hla_144 :.space     16384
character__hla_145 :.space     1
last_displayed__hla_146 :.space     2
endOfBSS__hla_147 :.space     4




  .text

mplier__hla_547: .long 365
divisor__hla_548: .long 100
divisor__hla_549: .long 400
mplier__hla_550: .long 30
divisor__hla_553: .long 100
divisor__hla_555: .long 400
mplier__hla_556: .long 24
mplier__hla_557: .long 60
mplier__hla_558: .long 60

        .balign    (4)
len__hla_755 :.long      0x7
        .long      0x7
str__hla_755:

 .ascii "error: "
 .byte 0


        .balign    (4)
len__hla_771 :.long      0x34
        .long      0x34
str__hla_771:

 .ascii "Exception occured while processing error messages: $"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .balign    (4)
len__hla_1292 :.long      0x7
        .long      0x7
str__hla_1292:

 .ascii "INCLUDE"
 .byte 0


        .balign    (4)
len__hla_3758 :.long      0x1a
        .long      0x1a
str__hla_3758:

 .ascii "Unhandled HLA exception: $"
 .byte 0

 .byte 0

        .balign    (4)
len__hla_3774 :.long      0x22
        .long      0x22
str__hla_3774:

 .ascii "Using flat assembler version C1.66"
 .byte 0

 .byte 0

        .balign    (4)
len__hla_3776 :.long      0x9
        .long      0x9
str__hla_3776:

 .ascii " passes, "
 .byte 0

 .byte 0
 .byte 0

        .balign    (4)
len__hla_3777 :.long      0x7
        .long      0x7
str__hla_3777:

 .ascii " bytes."
 .byte 0


        .balign    (4)
len__hla_3822 :.long      0x19
        .long      0x19
str__hla_3822:

 .ascii "Unhandled HLA exception: "
 .byte 0

 .byte 0
 .byte 0

/* procedure putc__hla_21 */

putc__hla_21:
        pushal
        pushl      36(%esp) 
        call       _c_putc
        addl       $4, %esp 
        popal
        ret        $4
xputc__hla_21:

/* procedure puts__hla_23 */

puts__hla_23:
        pushal
        pushl      36(%esp) 
        call       _c_puts
        addl       $4, %esp 
        popal
        ret        $4
xputs__hla_23:

/* procedure putu32__hla_25 */

putu32__hla_25:
        pushal
        pushl      36(%esp) 
        call       _c_putu32
        addl       $4, %esp 
        popal
        ret        $4
xputu32__hla_25:

/* procedure puthex32__hla_27 */

puthex32__hla_27:
        pushal
        pushl      36(%esp) 
        call       _c_puth32
        addl       $4, %esp 
        popal
        ret        $4
xputhex32__hla_27:

/* procedure put_newln__hla_29 */

put_newln__hla_29:
        pushal
        call       _c_newln
        popal
        ret
xput_newln__hla_29:

/* procedure putBuf__hla_31 */

putBuf__hla_31:
        pushal
        pushl      36(%esp) 
        pushl      44(%esp) 
        call       _c_putbuf
        addl       $8, %esp 
        popal
        ret        $8
xputBuf__hla_31:

/* procedure _0191__p____hla_405 */

_0191__p____hla_405:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "exists"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0191__p____hla_405:

/* procedure exists__hla_407 */

exists__hla_407:
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        call       _fasm_exists
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        shrl       $1, %eax 
        cmc
        ret
xexists__hla_407:

/* procedure _019a__p____hla_414 */

_019a__p____hla_414:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "open"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_019a__p____hla_414:

/* procedure open__hla_416 */

open__hla_416:
        pushl      %ecx 
        pushl      %edi 
        pushl      %esi 
        pushl      %edx 
        call       _fasm_open
        popl       %edx 
        popl       %esi 
        popl       %edi 
        popl       %ecx 
        movl       %eax, %ebx 
        cmpl       $-1, %eax 
        je         rtnError__hla_417
        clc
        ret

rtnError__hla_417:
        stc
        ret
xopen__hla_416:

/* procedure _01a4__p____hla_424 */

_01a4__p____hla_424:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "create"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_01a4__p____hla_424:

/* procedure create__hla_426 */

create__hla_426:
        pushl      %ecx 
        pushl      %edi 
        pushl      %esi 
        pushl      %edx 
        call       _fasm_create
        popl       %edx 
        popl       %esi 
        popl       %edi 
        popl       %ecx 
        movl       %eax, %ebx 
        cmpl       $-1, %eax 
        je         rtnError__hla_427
        clc
        ret

rtnError__hla_427:
        stc
        ret
xcreate__hla_426:

/* procedure _01ae__p____hla_434 */

_01ae__p____hla_434:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "write"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_01ae__p____hla_434:

/* procedure write__hla_436 */

write__hla_436:
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        pushl      %ecx 
        pushl      %edx 

        pushl      %ebx 

        call       _fasm_write
        addl       $12, %esp 
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        cmpl       $-1, %eax 
        je         write_failed__hla_437
        clc
        ret

write_failed__hla_437:
        mov        $12295, %eax 
        jmp        Raise__hla_
xwrite__hla_436:

/* procedure _01b8__p____hla_444 */

_01b8__p____hla_444:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "read"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_01b8__p____hla_444:

/* procedure read__hla_446 */

read__hla_446:
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        pushl      %ecx 
        pushl      %edx 

        pushl      %ebx 

        call       _fasm_read
        addl       $12, %esp 
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        cmpl       $-1, %eax 
        je         read_failed__hla_447
        clc
        ret

read_failed__hla_447:
        mov        $16386, %eax 
        jmp        Raise__hla_
xread__hla_446:

/* procedure _01c2__p____hla_454 */

_01c2__p____hla_454:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "close"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_01c2__p____hla_454:

/* procedure close__hla_456 */

close__hla_456:
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        pushl      %ebx 
        call       _fasm_close
        addl       $4, %esp 
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        ret
xclose__hla_456:

/* procedure _01cb__p____hla_463 */

_01cb__p____hla_463:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "seek"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_01cb__p____hla_463:

/* procedure seek__hla_465 */

seek__hla_465:
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        pushl      %edx 
        pushl      %ebx 

        call       _fasm_seek
        addl       $8, %esp 
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        ret
xseek__hla_465:

/* procedure _01d4__p____hla_472 */

_01d4__p____hla_472:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "mseek"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_01d4__p____hla_472:

/* procedure mseek__hla_474 */

mseek__hla_474:
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        pushl      %edx 
        pushl      %ebx 

        call       _fasm_mseek
        addl       $8, %esp 
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        ret
xmseek__hla_474:

/* procedure _01dd__p____hla_481 */

_01dd__p____hla_481:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "rseek"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_01dd__p____hla_481:

/* procedure rseek__hla_483 */

rseek__hla_483:
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        pushl      %edx 
        pushl      %ebx 

        call       _fasm_rseek
        addl       $8, %esp 
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        ret
xrseek__hla_483:

/* procedure _01e6__p____hla_490 */

_01e6__p____hla_490:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "getenv"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_01e6__p____hla_490:

/* procedure getenv__hla_492 */

getenv__hla_492:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        pushl      8(%ebp) 
        call       _fasm_getenv
        addl       $4, %esp 
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        popl       %ebp 
        ret        $4
xgetenv__hla_492:

/* procedure _01ee__p____hla_498 */

_01ee__p____hla_498:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_environment_variable"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_01ee__p____hla_498:

/* procedure get_environment_variable__hla_500 */

get_environment_variable__hla_500:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      8(%ebp) 
        call       _fasm_getenv
        addl       $4, %esp 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        testl      %eax, %eax 
        jz         out_of_memory__hla_501
        movl       %eax, %esi 

copyEnvVar__hla_502:
        lodsb
        stosb
        cmpb       $0, %al 
        jne        copyEnvVar__hla_502
        decl       %edi 
        popl       %esi 
        popl       %ebp 
        ret        $4

out_of_memory__hla_501:
        mov        $12288, %eax 
        jmp        Raise__hla_
xget_environment_variable__hla_500:

/* procedure _01f8__p____hla_508 */

_01f8__p____hla_508:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "init_memory"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_01f8__p____hla_508:

/* procedure init_memory__hla_510 */

init_memory__hla_510:
        mov        C_memsize__hla_38, %ecx 
        shrl       $2, %ecx 
        movl       %ecx, %edx 
        lea        (%edx,%ecx,2), %edx 
        mov        C_memory__hla_37, %eax 
        mov        %eax, memory_start__hla_45 
        addl       %edx, %eax 
        mov        %eax, memory_end__hla_46 
        mov        %eax, additional_memory__hla_47 
        addl       %ecx, %eax 
        mov        %eax, additional_memory_end__hla_48 
        ret
xinit_memory__hla_510:

/* procedure _0200__p____hla_516 */

_0200__p____hla_516:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "display_string"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0200__p____hla_516:

/* procedure display_string__hla_518 */

display_string__hla_518:
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        call       _c_puts
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        ret
xdisplay_string__hla_518:

/* procedure _0209__p____hla_525 */

_0209__p____hla_525:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "exitProcess"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0209__p____hla_525:

/* procedure exitProcess__hla_14 */

exitProcess__hla_14:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      8(%ebp) 
        call       _fasm_exitProcess
xexitProcess__hla_14:

/* procedure _0211__p____hla_533 */

_0211__p____hla_533:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "readFileIntoMemory"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0211__p____hla_533:

/* procedure readFileIntoMemory__hla_535 */

readFileIntoMemory__hla_535:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $4, %esp 
        pushl      %eax 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        pushl      %ebp 
        addl       $-4, (%esp) 
        pushl      12(%ebp) 

        call       _fasm_readFileIntoMemory
        cmpl       $0, %eax 
        je         out_of_memory_reading_file__hla_536
        cmpl       $-1, %eax 
        je         raiseFileException__hla_537
        addl       $8, %esp 
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        movl       %eax, %esi 
        mov        -4(%ebp), %ecx 
        movb       $26, (%esi,%ecx,1) 
        popl       %eax 
        leave
        ret        $8

out_of_memory_reading_file__hla_536:
        mov        $12289, %eax 
        jmp        Raise__hla_

raiseFileException__hla_537:
        mov        8(%ebp), %eax 
        jmp        Raise__hla_
xreadFileIntoMemory__hla_535:

/* procedure _021c__p____hla_544 */

_021c__p____hla_544:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "make_timestamp"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_021c__p____hla_544:

/* procedure make_timestamp__hla_546 */

make_timestamp__hla_546:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $24, %esp 
        pushl      %ebp 
        addl       $-24, (%esp) 
        pushl      %ebp 
        addl       $-20, (%esp) 

        pushl      %ebp 
        addl       $-16, (%esp) 

        pushl      %ebp 
        addl       $-12, (%esp) 

        pushl      %ebp 
        addl       $-8, (%esp) 

        pushl      %ebp 
        addl       $-4, (%esp) 

        call       _fasm_curDateTime
        addl       $24, %esp 
        mov        -12(%ebp), %ecx 
        movl       %ecx, %eax 
        subl       $1970, %eax 
        mull       mplier__hla_547 
        movl       %eax, %ebx 
        movl       %ecx, %eax 
        subl       $1969, %eax 
        shrl       $2, %eax 
        addl       %eax, %ebx 
        movl       %ecx, %eax 
        subl       $1901, %eax 
        divl       divisor__hla_548 
        subl       %eax, %ebx 
        movl       %ecx, %eax 
        xorl       %edx, %edx 
        subl       $1601, %eax 
        divl       divisor__hla_549 
        addl       %eax, %ebx 
        mov        -4(%ebp), %ecx 
        movl       %ecx, %eax 
        decl       %eax 
        mull       mplier__hla_550 
        addl       %eax, %ebx 
        cmpl       $8, %ecx 
        jbe        months_correction__hla_551
        movl       %ecx, %eax 
        subl       $7, %eax 
        shrl       $1, %eax 
        addl       %eax, %ebx 
        mov        $8, %ecx 

months_correction__hla_551:
        movl       %ecx, %eax 
        shrl       $1, %eax 
        addl       %eax, %ebx 
        cmpl       $2, %ecx 
        jbe        day_correction_ok__hla_552
        subl       $2, %ebx 
        mov        -12(%ebp), %ecx 
        testl      $3, %ecx 
        jnz        day_correction_ok__hla_552
        xorl       %edx, %edx 
        movl       %ecx, %eax 
        divl       divisor__hla_553 
        orl        %edx, %edx 
        jnz        day_correction__hla_554
        movl       %ecx, %eax 
        divl       divisor__hla_555 
        orl        %edx, %edx 
        jnz        day_correction_ok__hla_552

day_correction__hla_554:
        incl       %ebx 

day_correction_ok__hla_552:
        mov        -8(%ebp), %eax 
        decl       %eax 
        addl       %ebx, %eax 
        mull       mplier__hla_556 
        mov        -16(%ebp), %ecx 
        addl       %ecx, %eax 
        mull       mplier__hla_557 
        mov        -20(%ebp), %ecx 
        addl       %ecx, %eax 
        mull       mplier__hla_558 
        mov        -24(%ebp), %ecx 
        addl       %ecx, %eax 
        movl       %ebp, %esp 
        popl       %ebp 
        ret
xmake_timestamp__hla_546:

/* procedure _0230__p____hla_564 */

_0230__p____hla_564:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "allTheExceptions"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0230__p____hla_564:

/* procedure allTheExceptions__hla_566 */

allTheExceptions__hla_566:

address_sizes_do_not_agree__hla_567:
        mov        $16384, %eax 
        jmp        Raise__hla_

code_cannot_be_generated__hla_568:
        mov        $12293, %eax 
        jmp        Raise__hla_

data_already_defined__hla_569:
        mov        $16385, %eax 
        jmp        Raise__hla_

error_reading_file__hla_570:
        mov        $16386, %eax 
        jmp        Raise__hla_

extra_characters_on_line__hla_571:
        mov        $16387, %eax 
        jmp        Raise__hla_

file_not_found__hla_572:
        mov        $16388, %eax 
        jmp        Raise__hla_

format_limitations_exceeded__hla_573:
        mov        $12294, %eax 
        jmp        Raise__hla_

illegal_instruction__hla_574:
        mov        $16389, %eax 
        jmp        Raise__hla_

incomplete_macro__hla_575:
        mov        $16390, %eax 
        jmp        Raise__hla_

invalid_address__hla_576:
        mov        $16391, %eax 
        jmp        Raise__hla_

invalid_address_size__hla_577:
        mov        $16392, %eax 
        jmp        Raise__hla_

invalid_argument__hla_578:
        mov        $16393, %eax 
        jmp        Raise__hla_

invalid_expression__hla_579:
        mov        $16394, %eax 
        jmp        Raise__hla_

invalid_file_format__hla_580:
        mov        $16395, %eax 
        jmp        Raise__hla_

invalid_macro_arguments__hla_581:
        mov        $16396, %eax 
        jmp        Raise__hla_

invalid_name__hla_582:
        mov        $16397, %eax 
        jmp        Raise__hla_

invalid_operand__hla_583:
        mov        $16398, %eax 
        jmp        Raise__hla_

invalid_operand_size__hla_584:
        mov        $16399, %eax 
        jmp        Raise__hla_

invalid_use_of_symbol__hla_585:
        mov        $16400, %eax 
        jmp        Raise__hla_

invalid_value__hla_586:
        mov        $16401, %eax 
        jmp        Raise__hla_

long_immediate_not_encodable__hla_587:
        mov        $16402, %eax 
        jmp        Raise__hla_

missing_end_directive__hla_588:
        mov        $16403, %eax 
        jmp        Raise__hla_

missing_end_quote__hla_589:
        mov        $16404, %eax 
        jmp        Raise__hla_

name_too_long__hla_590:
        mov        $16405, %eax 
        jmp        Raise__hla_

operand_sizes_do_not_match__hla_591:
        mov        $16407, %eax 
        jmp        Raise__hla_

operand_size_not_specified__hla_592:
        mov        $16406, %eax 
        jmp        Raise__hla_

out_of_memory__hla_593:
        mov        $12288, %eax 
        jmp        Raise__hla_

out_of_memory_reading_file__hla_594:
        mov        $12289, %eax 
        jmp        Raise__hla_

prefix_conflict__hla_595:
        mov        $16408, %eax 
        jmp        Raise__hla_

relative_jump_out_of_range__hla_596:
        mov        $16409, %eax 
        jmp        Raise__hla_

reserved_word_used_as_symbol__hla_597:
        mov        $16410, %eax 
        jmp        Raise__hla_

section_not_aligned_enough__hla_598:
        mov        $16411, %eax 
        jmp        Raise__hla_

setting_already_specified__hla_599:
        mov        $16412, %eax 
        jmp        Raise__hla_

stack_overflow__hla_600:
        mov        $12291, %eax 
        jmp        Raise__hla_

symbol_already_defined__hla_601:
        mov        $16413, %eax 
        jmp        Raise__hla_

too_many_repeats__hla_602:
        mov        $16414, %eax 
        jmp        Raise__hla_

undefined_symbol__hla_603:
        mov        $16415, %eax 
        jmp        Raise__hla_

unexpected_characters__hla_604:
        mov        $16416, %eax 
        jmp        Raise__hla_

unexpected_end_of_file__hla_605:
        mov        $12292, %eax 
        jmp        Raise__hla_

unexpected_instruction__hla_606:
        mov        $16417, %eax 
        jmp        Raise__hla_

value_out_of_range__hla_607:
        mov        $16418, %eax 
        jmp        Raise__hla_

write_failed__hla_608:
        mov        $12295, %eax 
        jmp        Raise__hla_
xallTheExceptions__hla_566:

/* procedure _0262__p____hla_614 */

_0262__p____hla_614:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "lower_case"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0262__p____hla_614:

/* procedure lower_case__hla_616 */

lower_case__hla_616:
        movl       $converted__hla_142, %edi 
        movl       $characters__hla_159, %ebx 

convert_case__hla_617:
        lodsb
        xlat
        stosb
        loop       convert_case__hla_617

case_ok__hla_618:
        ret
xlower_case__hla_616:

/* procedure _026c__p____hla_624 */

_026c__p____hla_624:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "search_rsrvd_word_table"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_026c__p____hla_624:

/* procedure search_rsrvd_word_table__hla_626 */

search_rsrvd_word_table__hla_626:
        movl       %esi, %edx 
        movl       %ecx, %ebp 
        pushl      %edi 
        call       lower_case__hla_616
        popl       %edi 

scan_symbols__hla_627:
        movl       $converted__hla_142, %esi 
        movzbl     (%edi), %eax 
        orb        %al, %al 
        jz         no_symbol__hla_628
        movl       %ebp, %ecx 
        incl       %edi 
        movl       %edi, %ebx 
        addl       %eax, %ebx 
        mov        (%esi), %ah 
        cmpb       (%edi), %ah 
        jb         no_symbol__hla_628
        ja         next_symbol__hla_629
        cmpb       %al, %cl 
        jne        next_symbol__hla_629
        repe cmpsb
        jb         no_symbol__hla_628
        je         symbol_ok__hla_630

next_symbol__hla_629:
        movl       %ebx, %edi 
        addl       $4, %edi 
        jmp        scan_symbols__hla_627

no_symbol__hla_628:
        movl       %edx, %esi 
        movl       %ebp, %ecx 
        stc
        ret

symbol_ok__hla_630:
        lea        (%edx,%ebp,1), %esi 
        mov        (%ebx), %eax 
        clc
        ret
xsearch_rsrvd_word_table__hla_626:

/* procedure _0278__p____hla_636 */

_0278__p____hla_636:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_symbol"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0278__p____hla_636:

/* procedure get_symbol__hla_638 */

get_symbol__hla_638:
        movl       %esi, %edx 
        movl       %ecx, %ebp 
        pushl      %edi 
        call       lower_case__hla_616
        popl       %edi 

scan_symbols__hla_639:
        movl       $converted__hla_142, %esi 
        movzbl     (%edi), %eax 
        orb        %al, %al 
        jz         no_symbol__hla_640
        movl       %ebp, %ecx 
        incl       %edi 
        movl       %edi, %ebx 
        addl       %eax, %ebx 
        mov        (%esi), %ah 
        cmpb       (%edi), %ah 
        jb         no_symbol__hla_640
        ja         next_symbol__hla_641
        cmpb       %al, %cl 
        jne        next_symbol__hla_641
        repe cmpsb
        jb         no_symbol__hla_640
        je         symbol_ok__hla_642

next_symbol__hla_641:
        movl       %ebx, %edi 
        addl       $2, %edi 
        jmp        scan_symbols__hla_639

no_symbol__hla_640:
        movl       %edx, %esi 
        movl       %ebp, %ecx 
        stc
        ret

symbol_ok__hla_642:
        lea        (%edx,%ebp,1), %esi 
        mov        (%ebx), %ax 
        clc
        ret
xget_symbol__hla_638:

/* procedure _0284__p____hla_648 */

_0284__p____hla_648:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_instruction"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0284__p____hla_648:

/* procedure get_instruction__hla_650 */

get_instruction__hla_650:
        movl       %esi, %edx 
        movl       %ecx, %ebp 
        call       lower_case__hla_616
        movl       %ebp, %ecx 
        cmpb       $11, %cl 
        ja         no_instruction__hla_651
        subb       $2, %cl 
        jb         no_instruction__hla_651
        mov        instructions__hla_379(,%ecx,4), %edi 

scan_instructions__hla_652:
        movl       $converted__hla_142, %esi 
        mov        (%edi), %al 
        orb        %al, %al 
        jz         no_instruction__hla_651
        movl       %ebp, %ecx 
        movl       %edi, %ebx 
        addl       %ecx, %ebx 
        repe cmpsb
        jb         no_instruction__hla_651
        je         instruction_ok__hla_653

next_instruction__hla_654:
        lea        5(%ebx), %edi 
        jmp        scan_instructions__hla_652

no_instruction__hla_651:
        movl       %edx, %esi 
        movl       %ebp, %ecx 
        stc
        ret

instruction_ok__hla_653:
        lea        (%edx,%ebp,1), %esi 
        mov        (%ebx), %al 
        mov        1(%ebx), %ebx 
        clc
        ret
xget_instruction__hla_650:

/* procedure _0290__p____hla_660 */

_0290__p____hla_660:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_operator"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0290__p____hla_660:

/* procedure get_operator__hla_662 */

get_operator__hla_662:
        cmpb       $26, (%esi) 
        jne        get_simple_operator__hla_663
        movl       %esi, %edx 
        pushl      %ebp 
        incl       %esi 
        lodsb
        movzbl     %al, %ebp 
        pushl      %edi 
        movl       %ebp, %ecx 
        call       lower_case__hla_616
        popl       %edi 

check_operator__hla_664:
        movl       $converted__hla_142, %esi 
        movzbl     (%edi), %ecx 
        jecxz      no_operator__hla_665
        incl       %edi 
        movl       %edi, %ebx 
        addl       %ecx, %ebx 
        cmpl       %ebp, %ecx 
        jne        next_operator__hla_666
        repe cmpsb
        je         operator_found__hla_667

next_operator__hla_666:
        movl       %ebx, %edi 
        incl       %edi 
        jmp        check_operator__hla_664

no_operator__hla_665:
        movl       %edx, %esi 
        movl       %ebp, %ecx 
        popl       %ebp 

no_simple_operator__hla_668:
        xorb       %al, %al 
        ret

operator_found__hla_667:
        lea        2(%edx,%ebp,1), %esi 
        movl       %ebp, %ecx 
        popl       %ebp 
        mov        (%edi), %al 
        ret

get_simple_operator__hla_663:
        mov        (%esi), %al 
        cmpb       $34, %al 
        je         no_simple_operator__hla_668

simple_operator__hla_669:
        cmpb       $1, (%edi) 
        jb         no_simple_operator__hla_668
        ja         simple_next_operator__hla_670
        cmpb       1(%edi), %al 
        je         simple_operator_found__hla_671

simple_next_operator__hla_670:
        movzbl     (%edi), %ecx 
        lea        2(%edi,%ecx,1), %edi 
        jmp        simple_operator__hla_669

simple_operator_found__hla_671:
        incl       %esi 
        mov        2(%edi), %al 
        ret
xget_operator__hla_662:

/* procedure _02a1__p____hla_677 */

_02a1__p____hla_677:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "allocate_label"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_02a1__p____hla_677:

/* procedure allocate_label__hla_679 */

allocate_label__hla_679:
        mov        labels_list__hla_73, %eax 
        mov        $8, %ecx 

initialize_label__hla_680:
        subl       $4, %eax 
        movl       $0, (%eax) 
        loop       initialize_label__hla_680
        mov        %eax, labels_list__hla_73 
        ret
xallocate_label__hla_679:

/* procedure _02aa__p____hla_686 */

_02aa__p____hla_686:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_label_id"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_02aa__p____hla_686:

/* procedure get_label_id__hla_688 */

get_label_id__hla_688:
        cmpl       $256, %ecx 
        jae        name_too_long__hla_590
        cmpb       $64, (%esi) 
        je         anonymous_label__hla_689
        cmpb       $46, (%esi) 
        jne        standard_label__hla_690
        cmpb       $46, 1(%esi) 
        je         standard_label__hla_690
        cmpl       $0, current_locals_prefix__hla_70 
        je         standard_label__hla_690
        pushl      %edi 
        mov        additional_memory_end__hla_48, %edi 
        subl       $2, %edi 
        subl       %ecx, %edi 
        pushl      %ecx 
        pushl      %esi 
        mov        current_locals_prefix__hla_70, %esi 
        lodsb
        movzbl     %al, %ecx 
        subl       %ecx, %edi 
        cmpl       free_additional_memory__hla_53, %edi 
        jb         out_of_memory__hla_593
        movw       $0, (%edi) 
        addl       $2, %edi 
        movl       %edi, %ebx 
        rep movsb
        popl       %esi 
        popl       %ecx 
        addb       %cl, %al 
        jc         name_too_long__hla_590
        rep movsb
        popl       %edi 
        pushl      %ebx 
        pushl      %esi 
        movzbl     %al, %ecx 
        mov        %al, -1(%ebx) 
        movl       %ebx, %esi 
        call       get_label_id__hla_688
        popl       %esi 
        popl       %ebx 
        cmpl       24(%eax), %ebx 
        jne        composed_label_id_ok__hla_693
        lea        -2(%ebx), %edx 
        mov        %edx, additional_memory_end__hla_48 

composed_label_id_ok__hla_693:
        ret

anonymous_label__hla_689:
        cmpl       $2, %ecx 
        jne        standard_label__hla_690
        mov        1(%esi), %al 
        movl       $characters__hla_159, %ebx 
        xlat
        cmpb       $64, %al 
        je         new_anonymous__hla_694
        cmpb       $98, %al 
        je         anonymous_back__hla_695
        cmpb       $114, %al 
        je         anonymous_back__hla_695
        cmpb       $102, %al 
        jne        standard_label__hla_690
        addl       $2, %esi 
        mov        anonymous_forward__hla_72, %eax 
        orl        %eax, %eax 
        jnz        anonymous_ok__hla_696
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        call       allocate_label__hla_679
        mov        %eax, anonymous_forward__hla_72 

anonymous_ok__hla_696:
        xorl       %ebx, %ebx 
        ret

anonymous_back__hla_695:
        addl       $2, %esi 
        mov        anonymous_reverse__hla_71, %eax 
        orl        %eax, %eax 
        jz         invalid_value__hla_586
        jmp        anonymous_ok__hla_696

new_anonymous__hla_694:
        addl       $2, %esi 
        mov        anonymous_forward__hla_72, %eax 
        orl        %eax, %eax 
        jnz        new_anonymous_ok__hla_697
        call       allocate_label__hla_679

new_anonymous_ok__hla_697:
        mov        %eax, anonymous_reverse__hla_71 
        movl       $0, anonymous_forward__hla_72 
        jmp        anonymous_ok__hla_696

standard_label__hla_690:
        cmpb       $37, (%esi) 
        je         get_predefined_id__hla_698
        cmpb       $36, (%esi) 
        jne        find_label__hla_699
        cmpl       $2, %ecx 
        ja         find_label__hla_699
        incl       %esi 
        jb         get_current_offset_id__hla_700
        incl       %esi 
        cmpb       $36, -1(%esi) 
        je         get_org_origin_id__hla_701
        subl       %ecx, %esi 
        jmp        find_label__hla_699

get_current_offset_id__hla_700:
        xorl       %eax, %eax 
        ret

get_counter_id__hla_702:
        mov        $1, %eax 
        ret

get_timestamp_id__hla_703:
        mov        $2, %eax 
        ret

get_org_origin_id__hla_701:
        mov        $3, %eax 
        ret

get_predefined_id__hla_698:
        cmpl       $2, %ecx 
        ja         find_label__hla_699
        incl       %esi 
        cmpb       $1, %cl 
        je         get_counter_id__hla_702
        lodsb
        movl       $characters__hla_159, %ebx 
        xlat
        cmpb       $116, %al 
        je         get_timestamp_id__hla_703
        subl       $2, %esi 

find_label__hla_699:
        xorl       %ebx, %ebx 
        xorl       %ebp, %ebp 
        xorl       %eax, %eax 

hash_label__hla_704:
        rorw       $1, %ax 
        xorb       (%esi,%ebx,1), %al 
        addl       $1, %ebx 
        cmpl       %ecx, %ebx 
        jb         hash_label__hla_704
        movl       %eax, %ebp 
        pushl      %edi 
        pushl      %esi 
        pushl      %ecx 
        lea        hashTable__hla_34(,%ebp,4), %ebx 
        mov        %ebx, label_leaf__hla_75 
        popl       %edx 
        mov        (%ebx), %eax 
        movl       %esi, %ebx 
        jmp        continue__hla_705
while__hla_705:

compare_labels__hla_707:
        movl       %ebx, %esi 
        movl       %edx, %ecx 
        mov        4(%eax), %edi 
        mov        24(%edi), %edi 
        repe cmpsb
        je         label_found__hla_708
        mov        (%eax), %eax 
continue__hla_705:
        cmpl       $0, %eax 
        jne        while__hla_705
exitloop__hla_705:


add_label__hla_709:
        movl       %edx, %ecx 
        popl       %esi 
        cmpb       $0, -2(%esi) 
        je         label_name_ok__hla_710
        mov        (%esi), %al 
        cmpb       $48, %al 
        jb         name_first_char_ok__hla_711
        cmpb       $57, %al 
        jbe        invalid_name__hla_582

name_first_char_ok__hla_711:
        cmpl       $1, %ecx 
        jne        check_for_reserved_word__hla_712
        cmpb       $36, %al 
        je         reserved_word__hla_713

check_for_reserved_word__hla_712:
        call       get_instruction__hla_650
        jnc        reserved_word__hla_713
        movl       $data_directives__hla_167, %edi 
        call       get_symbol__hla_638
        jnc        reserved_word__hla_713
        movl       $symbols__hla_166, %edi 
        call       get_symbol__hla_638
        jnc        reserved_word__hla_713
        movl       $formatter_symbols__hla_163, %edi 
        call       get_symbol__hla_638
        jnc        reserved_word__hla_713
        subl       $2, %esi 
        movl       $operators__hla_160, %edi 
        call       get_operator__hla_662
        orb        %al, %al 
        jnz        reserved_word__hla_713
        movl       $single_operand_operators__hla_161, %edi 
        call       get_operator__hla_662
        orb        %al, %al 
        jnz        reserved_word__hla_713
        movl       $directive_operators__hla_162, %edi 
        call       get_operator__hla_662
        orb        %al, %al 
        jnz        reserved_word__hla_713
        incl       %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 

label_name_ok__hla_710:
        mov        free_additional_memory__hla_53, %edx 
        lea        8(%edx), %eax 
        cmpl       additional_memory_end__hla_48, %eax 
        ja         out_of_memory__hla_593
        mov        %eax, free_additional_memory__hla_53 
        movl       %esi, %ebx 
        addl       %ecx, %esi 
        mov        label_leaf__hla_75, %eax 
        mov        (%eax), %edi 
        mov        %edi, (%edx) 
        mov        %edx, (%eax) 
        call       allocate_label__hla_679
        mov        %eax, 4(%edx) 
        mov        %ebx, 24(%eax) 
        popl       %edi 
        ret

label_found__hla_708:
        addl       $4, %esp 
        popl       %edi 
        mov        4(%eax), %eax 
        ret

reserved_word__hla_713:
        mov        $15, %eax 
        popl       %edi 
        ret
xget_label_id__hla_688:

/* procedure _02cd__p____hla_721 */

_02cd__p____hla_721:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "display_block"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_02cd__p____hla_721:

/* procedure display_block__hla_723 */

display_block__hla_723:
        addl       %ecx, displayed_count__hla_44 
        cmpl       $1, %ecx 
        ja         take_last_two_characters__hla_724
        jb         block_displayed__hla_725
        mov        last_displayed__hla_146+1, %al 
        mov        (%esi), %ah 
        mov        %ax, last_displayed__hla_146 
        jmp        block_ok__hla_726

take_last_two_characters__hla_724:
        mov        -2(%esi,%ecx,1), %ax 
        mov        %ax, last_displayed__hla_146 

block_ok__hla_726:
        pushl      (%esi) 
        pushl      %ecx 
        call       putBuf__hla_31

block_displayed__hla_725:
        ret
xdisplay_block__hla_723:

/* procedure _02d8__p____hla_732 */

_02d8__p____hla_732:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "flush_display_buffer"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_02d8__p____hla_732:

/* procedure flush_display_buffer__hla_734 */

flush_display_buffer__hla_734:
        mov        display_buffer__hla_86, %eax 
        orl        %eax, %eax 
        jz         display_done__hla_735
        mov        labels_list__hla_73, %esi 
        cmpl       %eax, %esi 
        je         display_done__hla_735

display_messages__hla_736:
        subl       $4, %esi 
        mov        (%esi), %ecx 
        subl       %ecx, %esi 
        pushl      %esi 
        call       display_block__hla_723
        popl       %esi 
        cmpl       display_buffer__hla_86, %esi 
        jne        display_messages__hla_736
        mov        labels_list__hla_73, %eax 
        mov        %eax, display_buffer__hla_86 

display_done__hla_735:
        ret
xflush_display_buffer__hla_734:

/* procedure _02e2__p____hla_742 */

_02e2__p____hla_742:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "display_user_messages"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_02e2__p____hla_742:

/* procedure display_user_messages__hla_744 */

display_user_messages__hla_744:
        movl       $0, displayed_count__hla_44 
        call       flush_display_buffer__hla_734
        cmpl       $1, displayed_count__hla_44 
        jb         line_break_ok__hla_745
        je         make_line_break__hla_746
        mov        last_displayed__hla_146, %ax 
        cmpw       $2573, %ax 
        je         line_break_ok__hla_745
        cmpw       $3338, %ax 
        je         line_break_ok__hla_745

make_line_break__hla_746:
        call       put_newln__hla_29

line_break_ok__hla_745:
        ret
xdisplay_user_messages__hla_744:

/* procedure _02ec__p____hla_752 */

_02ec__p____hla_752:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "fatal_error"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_02ec__p____hla_752:

/* procedure fatal_error__hla_754 */

fatal_error__hla_754:
        pushl      $str__hla_755 
        call       puts__hla_23
        popl       %esi 
        call       display_string__hla_518
        pushl      $46 
        call       putc__hla_21
        call       put_newln__hla_29
        pushl      $255 
        call       exitProcess__hla_14
xfatal_error__hla_754:

/* procedure _02f5__p____hla_761 */

_02f5__p____hla_761:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "assembler_error"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_02f5__p____hla_761:

/* procedure assembler_error__hla_763 */

assembler_error__hla_763:
        popl       errMsgPtr__hla_764 
        pushl      $exception__hla_766 
        pushl      %ebp 
        .byte      0x64
        mov        0, %ebp 
        pushl      8(%ebp) 
        mov        4(%esp), %ebp 
        pushl      $HWexcept__hla_ 
        .byte      0x64
        pushl      0 
        .byte      0x64
        mov        %esp, 0 
        call       display_user_messages__hla_744
        pushl      $0 
        mov        current_line__hla_60, %ebx 

get_error_lines__hla_767:
        pushl      %ebx 
        testb      $128, 7(%ebx) 
        jz         display_error_line__hla_768
        movl       %ebx, %edx 

find_definition_origin__hla_769:
        mov        12(%edx), %edx 
        testb      $128, 7(%edx) 
        jnz        find_definition_origin__hla_769
        pushl      %edx 
        mov        8(%ebx), %ebx 
        jmp        get_error_lines__hla_767

display_error_line__hla_768:
        mov        (%ebx), %esi 
        call       display_string__hla_518
        movl       $line_number_start__hla_152, %esi 
        call       display_string__hla_518
        mov        4(%ebx), %eax 
        andl       $2147483647, %eax 
        pushl      %eax 
        call       putu32__hla_25
        pushl      $93 
        call       putc__hla_21
        popl       %esi 
        cmpl       %esi, %ebx 
        je         line_number_ok__hla_770
        pushl      $32 
        call       putc__hla_21
        pushl      %esi 
        mov        (%esi), %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        call       display_block__hla_723
        movl       $line_number_start__hla_152, %esi 
        call       display_string__hla_518
        popl       %esi 
        mov        4(%esi), %eax 
        andl       $2147483647, %eax 
        pushl      %eax 
        call       putu32__hla_25
        pushl      $93 
        call       putc__hla_21

line_number_ok__hla_770:
        movl       $line_data_start__hla_153, %esi 
        call       display_string__hla_518
        movl       %ebx, %esi 
        popl       %ebx 
        orl        %ebx, %ebx 
        jnz        display_error_line__hla_768
        pushl      $str__hla_755 
        call       puts__hla_23
        pushl      errMsgPtr__hla_764 
        call       puts__hla_23
        pushl      $46 
        call       putc__hla_21
        call       put_newln__hla_29
        pushl      $2 
        call       exitProcess__hla_14
        .byte      0x64
        mov        0, %esp 
        .byte      0x64
        popl       0 
        addl       $8, %esp 
        popl       %ebp 
        addl       $4, %esp 
        jmp        endtry__hla_765
exception__hla_766:
        pushl      $str__hla_771 
        call       puts__hla_23
        pushl      %eax 
        call       puthex32__hla_27
        call       put_newln__hla_29
endtry__hla_765:
        pushl      $2 
        call       exitProcess__hla_14
xassembler_error__hla_763:

/* procedure _0305__p____hla_777 */

_0305__p____hla_777:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "convert_line"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0305__p____hla_777:

/* procedure convert_line__hla_779 */

convert_line__hla_779:
        pushl      %ecx 
        testb      $15, macro_status__hla_116 
        jz         convert_line_data__hla_780
        mov        $59, %ax 
        stosw

convert_line_data__hla_780:
        cmpl       memory_end__hla_46, %edi 
        jae        out_of_memory__hla_593
false__hla_783:
repeat__hla_783:
        mov        (%esi), %al 
        addl       $1, %esi 
continue__hla_783:
        cmpb       $32, %al 
        je         repeat__hla_783
        cmpb       $9, %al 
        je         repeat__hla_783
exitloop__hla_783:

        movb       %al, %ah 
        movl       $characters__hla_159, %ebx 
        xlat
        cmpb       $0, %al 
        jz         convert_separator__hla_785
        cmpb       $39, %ah 
        je         convert_string__hla_786
        cmpb       $34, %ah 
        je         convert_string__hla_786
        movb       $26, (%edi) 
        addl       $2, %edi 
        xchgb      %ah, %al 
        stosb
        movl       $characters__hla_159, %ebx 
        xorl       %ecx, %ecx 

convert_symbol__hla_787:
        lodsb
        stosb
        xlat
        cmpb       $0, %al 
        loopnz     convert_symbol__hla_787
        negl       %ecx 
        cmpl       $255, %ecx 
        ja         name_too_long__hla_590
        movl       %edi, %ebx 
        subl       %ecx, %ebx 
        mov        %cl, -2(%ebx) 

found_separator__hla_788:
        decl       %edi 
        mov        -1(%esi), %ah 

convert_separator__hla_785:
        xchgb      %ah, %al 
        cmpb       $32, %al 
        jb         control_character__hla_789
        je         convert_line_data__hla_780

symbol_character__hla_790:
        cmpb       $59, %al 
        je         ignore_comment__hla_791
        cmpb       $92, %al 
        je         backslash_character__hla_792
        stosb
        jmp        convert_line_data__hla_780

control_character__hla_789:
        cmpb       $26, %al 
        je         line_end__hla_793
        cmpb       $13, %al 
        je         cr_character__hla_794
        cmpb       $10, %al 
        je         lf_character__hla_795
        cmpb       $9, %al 
        je         convert_line_data__hla_780
        orb        %al, %al 
        jnz        symbol_character__hla_790
        jmp        line_end__hla_793

lf_character__hla_795:
        lodsb
        cmpb       $13, %al 
        je         line_end__hla_793
        decl       %esi 
        jmp        line_end__hla_793

cr_character__hla_794:
        lodsb
        cmpb       $10, %al 
        je         line_end__hla_793
        decl       %esi 
        jmp        line_end__hla_793

convert_string__hla_786:
        mov        $34, %al 
        stosb
        scasl
        movl       %edi, %ebx 

copy_string__hla_796:
        lodsb
        stosb
        cmpb       $10, %al 
        je         missing_end_quote__hla_589
        cmpb       $13, %al 
        je         missing_end_quote__hla_589
        orb        %al, %al 
        jz         missing_end_quote__hla_589
        cmpb       $26, %al 
        je         missing_end_quote__hla_589
        cmpb       %ah, %al 
        jne        copy_string__hla_796
        lodsb
        cmpb       %ah, %al 
        je         copy_string__hla_796
        decl       %esi 
        decl       %edi 
        movl       %edi, %eax 
        subl       %ebx, %eax 
        mov        %eax, -4(%ebx) 
        jmp        convert_line_data__hla_780

backslash_character__hla_792:
        movb       $0, (%edi) 
        lodsb
        cmpb       $32, %al 
        je         concatenate_lines__hla_797
        cmpb       $9, %al 
        je         concatenate_lines__hla_797
        cmpb       $26, %al 
        je         unexpected_end_of_file__hla_605
        cmpb       $10, %al 
        je         concatenate_lf__hla_798
        cmpb       $13, %al 
        je         concatenate_cr__hla_799
        cmpb       $59, %al 
        je         find_concatenated_line__hla_800
        mov        $26, %al 
        stosb
        movl       %edi, %ecx 
        mov        $23553, %ax 
        stosw
        decl       %esi 

group_backslashes__hla_801:
        lodsb
        cmpb       $92, %al 
        jne        backslashed_symbol__hla_802
        stosb
        incb       (%ecx) 
        jmp        group_backslashes__hla_801

backslashed_symbol__hla_802:
        cmpb       $26, %al 
        je         unexpected_end_of_file__hla_605
        cmpb       $10, %al 
        je         extra_characters_on_line__hla_571
        cmpb       $13, %al 
        je         extra_characters_on_line__hla_571
        cmpb       $32, %al 
        je         extra_characters_on_line__hla_571
        cmpb       $9, %al 
        je         extra_characters_on_line__hla_571
        cmpb       $34, %al 
        je         extra_characters_on_line__hla_571
        cmpb       $39, %al 
        je         extra_characters_on_line__hla_571
        cmpb       $59, %al 
        je         extra_characters_on_line__hla_571
        movb       %al, %ah 
        movl       $characters__hla_159, %ebx 
        xlat
        orb        %al, %al 
        jz         backslashed_symbol_character__hla_803
        movb       %ah, %al 

convert_backslashed_symbol__hla_804:
        stosb
        xlat
        orb        %al, %al 
        jz         found_separator__hla_788
        incb       (%ecx) 
        jz         name_too_long__hla_590
        lodsb
        jmp        convert_backslashed_symbol__hla_804

backslashed_symbol_character__hla_803:
        movb       %ah, %al 
        stosb
        incb       (%ecx) 
        jmp        convert_line_data__hla_780

concatenate_lines__hla_797:
        lodsb
        cmpb       $32, %al 
        je         concatenate_lines__hla_797
        cmpb       $9, %al 
        je         concatenate_lines__hla_797
        cmpb       $26, %al 
        je         unexpected_end_of_file__hla_605
        cmpb       $10, %al 
        je         concatenate_lf__hla_798
        cmpb       $13, %al 
        je         concatenate_cr__hla_799
        cmpb       $59, %al 
        jne        extra_characters_on_line__hla_571

find_concatenated_line__hla_800:
        lodsb
        cmpb       $10, %al 
        je         concatenate_lf__hla_798
        cmpb       $13, %al 
        je         concatenate_cr__hla_799
        orb        %al, %al 
        jz         concatenate_ok__hla_805
        cmpb       $26, %al 
        jne        find_concatenated_line__hla_800
        jmp        unexpected_end_of_file__hla_605

concatenate_lf__hla_798:
        lodsb
        cmpb       $13, %al 
        je         concatenate_ok__hla_805
        decl       %esi 
        jmp        concatenate_ok__hla_805

concatenate_cr__hla_799:
        lodsb
        cmpb       $10, %al 
        je         concatenate_ok__hla_805
        decl       %esi 

concatenate_ok__hla_805:
        incl       (%esp) 
        jmp        convert_line_data__hla_780

ignore_comment__hla_791:
        lodsb
        cmpb       $10, %al 
        je         lf_character__hla_795
        cmpb       $13, %al 
        je         cr_character__hla_794
        orb        %al, %al 
        jz         line_end__hla_793
        cmpb       $26, %al 
        jne        ignore_comment__hla_791

line_end__hla_793:
        xorb       %al, %al 
        stosb
        popl       %ecx 
        ret
xconvert_line__hla_779:

/* procedure _0327__p____hla_811 */

_0327__p____hla_811:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "move_data"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0327__p____hla_811:

/* procedure move_data__hla_813 */

move_data__hla_813:
        shrl       $1, %ecx 
        jnc        movsb_ok__hla_814
        movsb

movsb_ok__hla_814:
        shrl       $1, %ecx 
        jnc        movsw_ok__hla_815
        movsw

movsw_ok__hla_815:
        rep movsl
        ret
xmove_data__hla_813:

/* procedure _0331__p____hla_821 */

_0331__p____hla_821:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "calculate_hash"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0331__p____hla_821:

/* procedure calculate_hash__hla_823 */

calculate_hash__hla_823:
        xorl       %ebx, %ebx 
        mov        $-2128831035, %eax 
        mov        $16777619, %ebp 

fnv1a_hash__hla_824:
        xorb       (%esi,%ebx,1), %al 
        mull       %ebp 
        incb       %bl 
        cmpb       %cl, %bl 
        jb         fnv1a_hash__hla_824
        ret
xcalculate_hash__hla_823:

/* procedure _033a__p____hla_830 */

_033a__p____hla_830:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_preprocessor_symbol"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_033a__p____hla_830:

/* procedure get_preprocessor_symbol__hla_832 */

get_preprocessor_symbol__hla_832:
        pushl      %ebp 
        pushl      %edi 
        pushl      %esi 
        movl       %ecx, %ebp 
        shll       $22, %ebp 
        movzbl     %cl, %ecx 
        movl       $hash_tree__hla_76, %ebx 
        mov        $10, %edi 

follow_hashes_roots__hla_833:
        mov        (%ebx), %edx 
        orl        %edx, %edx 
        jz         preprocessor_symbol_not_found__hla_834
        xorl       %eax, %eax 
        shll       $1, %ebp 
        adcl       $0, %eax 
        lea        (%edx,%eax,4), %ebx 
        decl       %edi 
        jnz        follow_hashes_roots__hla_833
        movl       %ebx, %edi 
        call       calculate_hash__hla_823
        movl       %eax, %ebp 
        andl       $1023, %ebp 
        shll       $10, %ebp 
        xorl       %eax, %ebp 
        movl       %edi, %ebx 
        mov        $22, %edi 

follow_hashes_tree__hla_835:
        mov        (%ebx), %edx 
        orl        %edx, %edx 
        jz         preprocessor_symbol_not_found__hla_834
        xorl       %eax, %eax 
        shll       $1, %ebp 
        adcl       $0, %eax 
        lea        (%edx,%eax,4), %ebx 
        decl       %edi 
        jnz        follow_hashes_tree__hla_835
        movb       %cl, %al 
        mov        (%ebx), %edx 
        orl        %edx, %edx 
        jz         preprocessor_symbol_not_found__hla_834

compare_with_preprocessor_symbol__hla_836:
        mov        4(%edx), %edi 
        cmpl       $1, %edi 
        jbe        next_equal_hash__hla_837
        repe cmpsb
        je         preprocessor_symbol_found__hla_838
        movb       %al, %cl 
        mov        (%esp), %esi 

next_equal_hash__hla_837:
        mov        (%edx), %edx 
        orl        %edx, %edx 
        jnz        compare_with_preprocessor_symbol__hla_836

preprocessor_symbol_not_found__hla_834:
        popl       %esi 
        popl       %edi 
        popl       %ebp 
        stc
        ret

preprocessor_symbol_found__hla_838:
        popl       %ebx 
        popl       %edi 
        popl       %ebp 
        clc
        ret
xget_preprocessor_symbol__hla_832:

/* procedure _0348__p____hla_844 */

_0348__p____hla_844:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "process_macro_operators"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0348__p____hla_844:

/* procedure process_macro_operators__hla_846 */

process_macro_operators__hla_846:
        xorb       %dl, %dl 
        movl       %edi, %ebp 

before_macro_operators__hla_847:
        movl       %esi, %edi 
        lodsb
        cmpb       $96, %al 
        je         symbol_conversion__hla_848
        cmpb       $35, %al 
        je         concatenation__hla_849
        cmpb       $26, %al 
        je         symbol_before_macro_operators__hla_850
        cmpb       $59, %al 
        je         no_more_macro_operators__hla_851
        cmpb       $34, %al 
        je         string_before_macro_operators__hla_852
        xorb       %dl, %dl 
        orb        %al, %al 
        jnz        before_macro_operators__hla_847
        movl       %esi, %edi 
        ret

no_more_macro_operators__hla_851:
        movl       %ebp, %edi 
        ret

symbol_before_macro_operators__hla_850:
        mov        $26, %dl 
        movl       %esi, %ebx 
        lodsb
        movzbl     %al, %ecx 
        jecxz      symbol_before_macro_operators_ok__hla_853
        movl       %esi, %edi 
        cmpb       $92, (%esi) 
        je         escaped_symbol__hla_854

symbol_before_macro_operators_ok__hla_853:
        addl       %ecx, %esi 
        jmp        before_macro_operators__hla_847

string_before_macro_operators__hla_852:
        mov        $34, %dl 
        movl       %esi, %ebx 
        lodsl
        addl       %eax, %esi 
        jmp        before_macro_operators__hla_847

escaped_symbol__hla_854:
        decb       -1(%edi) 
        decl       %ecx 
        incl       %esi 
        cmpl       $1, %ecx 
        rep movsb
        jne        after_macro_operators__hla_855
        mov        -1(%esi), %al 
        movl       %ebx, %ecx 
        movl       $characters__hla_159, %ebx 
        xlat
        movl       %ecx, %ebx 
        orb        %al, %al 
        jnz        after_macro_operators__hla_855
        subl       $3, %edi 
        mov        -1(%esi), %al 
        stosb
        xorb       %dl, %dl 

after_macro_operators__hla_855:
        lodsb
        cmpb       $96, %al 
        je         symbol_conversion__hla_848
        cmpb       $35, %al 
        je         concatenation__hla_849
        stosb
        cmpb       $26, %al 
        je         symbol_after_macro_operators__hla_856
        cmpb       $59, %al 
        je         no_more_macro_operators__hla_851
        cmpb       $34, %al 
        je         string_after_macro_operators__hla_857
        xorb       %dl, %dl 
        orb        %al, %al 
        jnz        after_macro_operators__hla_855
        ret

symbol_after_macro_operators__hla_856:
        mov        $26, %dl 
        movl       %edi, %ebx 
        lodsb
        stosb
        movzbl     %al, %ecx 
        jecxz      symbol_after_macro_operatorss_ok__hla_858
        cmpb       $92, (%esi) 
        je         escaped_symbol__hla_854

symbol_after_macro_operatorss_ok__hla_858:
        rep movsb
        jmp        after_macro_operators__hla_855

string_after_macro_operators__hla_857:
        mov        $34, %dl 
        movl       %edi, %ebx 
        lodsl
        stosl
        movl       %eax, %ecx 
        rep movsb
        jmp        after_macro_operators__hla_855

concatenation__hla_849:
        cmpb       $26, %dl 
        je         symbol_concatenation__hla_859
        cmpb       $34, %dl 
        je         string_concatenation__hla_860

no_concatenation__hla_861:
        cmpl       %edi, %esi 
        je         before_macro_operators__hla_847
        jmp        after_macro_operators__hla_855

symbol_concatenation__hla_859:
        cmpb       $26, (%esi) 
        jne        no_concatenation__hla_861
        incl       %esi 
        lodsb
        movzbl     %al, %ecx 
        jecxz      do_symbol_concatenation__hla_862
        cmpb       $92, (%esi) 
        jne        do_symbol_concatenation__hla_862
        subl       $2, %esi 
        jmp        no_concatenation__hla_861

do_symbol_concatenation__hla_862:
        addb       %al, (%ebx) 
        jc         name_too_long__hla_590
        rep movsb
        jmp        after_macro_operators__hla_855

string_concatenation__hla_860:
        cmpb       $34, (%esi) 
        je         do_string_concatenation__hla_863
        cmpb       $96, (%esi) 
        jne        no_concatenation__hla_861

concatenate_converted_symbol__hla_864:
        incl       %esi 
        mov        (%esi), %al 
        cmpb       $96, %al 
        je         concatenate_converted_symbol__hla_864
        cmpb       $34, %al 
        je         do_string_concatenation__hla_863
        cmpb       $26, %al 
        jne        concatenate_converted_symbol_character__hla_865
        incl       %esi 
        lodsb
        movzbl     %al, %ecx 
        addl       %ecx, (%ebx) 
        rep movsb
        jmp        after_macro_operators__hla_855

concatenate_converted_symbol_character__hla_865:
        orb        %al, %al 
        jz         after_macro_operators__hla_855
        cmpb       $35, %al 
        je         after_macro_operators__hla_855
        incl       (%ebx) 
        movsb
        jmp        after_macro_operators__hla_855

do_string_concatenation__hla_863:
        incl       %esi 
        lodsl
        movl       %eax, %ecx 
        addl       %eax, (%ebx) 
        rep movsb
        jmp        after_macro_operators__hla_855

reduce_symbol_conversion__hla_866:
        incl       %esi 

symbol_conversion__hla_848:
        movl       %esi, %edx 
        mov        (%esi), %al 
        cmpb       $26, %al 
        jne        symbol_character_conversion__hla_867
        lodsw
        movzbl     %ah, %ecx 
        lea        3(%edi), %ebx 
        jmp        convert_to_quoted_string__hla_868

symbol_character_conversion__hla_867:
        cmpb       $34, %al 
        je         after_macro_operators__hla_855
        cmpb       $96, %al 
        je         reduce_symbol_conversion__hla_866
        lea        5(%edi), %ebx 
        xorl       %ecx, %ecx 
        orb        %al, %al 
        jz         convert_to_quoted_string__hla_868
        cmpb       $35, %al 
        je         convert_to_quoted_string__hla_868
        incl       %ecx 

convert_to_quoted_string__hla_868:
        subl       %edx, %ebx 
        ja         shift_line_data__hla_869
        mov        $34, %al 
        movb       %al, %dl 
        stosb
        movl       %edi, %ebx 
        movl       %ecx, %eax 
        stosl
        rep movsb
        cmpl       %esi, %edi 
        je         before_macro_operators__hla_847
        jmp        after_macro_operators__hla_855

shift_line_data__hla_869:
        pushl      %ecx 
        movl       %esi, %edx 
        lea        -1(%ebp), %esi 
        addl       %ebx, %ebp 
        lea        -1(%ebp), %edi 
        lea        1(%esi), %ecx 
        subl       %edx, %ecx 
        std
        rep movsb
        cld
        popl       %eax 
        subl       $3, %edi 
        mov        $34, %dl 
        mov        %dl, -1(%edi) 
        movl       %edi, %ebx 
        mov        %eax, (%edi) 
        lea        4(%edi,%eax,1), %esi 
        jmp        before_macro_operators__hla_847
xprocess_macro_operators__hla_846:

/* procedure _0367__p____hla_875 */

_0367__p____hla_875:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "process_fix_constants"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0367__p____hla_875:

/* procedure process_fix_constants__hla_877 */

process_fix_constants__hla_877:
        movb       $3, value_type__hla_130 
        jmp        process_symbolic_constants
xprocess_fix_constants__hla_877:

/* procedure _036f__p____hla_883 */

_036f__p____hla_883:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "process_equ_constants"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_036f__p____hla_883:

/* procedure process_equ_constants__hla_885 */

process_equ_constants__hla_885:
        movb       $2, value_type__hla_130 
xprocess_equ_constants__hla_885:

/* procedure process_symbolic_constants */

process_symbolic_constants:

do_symbolic_constants__hla_887:
        movl       %esi, %ebp 
        lodsb
        cmpb       $26, %al 
        je         check_symbol__hla_888
        cmpb       $34, %al 
        je         ignore_string__hla_889
        cmpb       $123, %al 
        je         check_brace__hla_890
        orb        %al, %al 
        jnz        do_symbolic_constants__hla_887
        ret

ignore_string__hla_889:
        lodsl
        addl       %eax, %esi 
        jmp        do_symbolic_constants__hla_887

check_brace__hla_890:
        testb      $128, value_type__hla_130 
        jz         do_symbolic_constants__hla_887
        ret

no_replacing__hla_891:
        movzbl     -1(%esi), %ecx 
        addl       %ecx, %esi 
        jmp        do_symbolic_constants__hla_887

check_symbol__hla_888:
        mov        (%esi), %cl 
        incl       %esi 
        mov        value_type__hla_130, %ch 
        call       get_preprocessor_symbol__hla_832
        jc         no_replacing__hla_891
        mov        %edi, current_section__hla_100 
xprocess_symbolic_constants:

/* procedure replace_symbolic_constant__hla_893 */

replace_symbolic_constant__hla_893:

replaceSymbolicConstant__hla_894:
        mov        12(%edx), %ecx 
        mov        8(%edx), %edx 
        xchgl      %edx, %esi 
        call       move_data__hla_813
        movl       %edx, %esi 

process_after_replaced__hla_895:
        lodsb
        cmpb       $26, %al 
        je         symbol_after_replaced__hla_896
        stosb
        cmpb       $34, %al 
        je         string_after_replaced__hla_897
        cmpb       $123, %al 
        je         brace_after_replaced__hla_898
        orb        %al, %al 
        jnz        process_after_replaced__hla_895
        movl       %edi, %ecx 
        subl       %esi, %ecx 
        movl       %ebp, %edi 
        call       move_data__hla_813
        movl       %edi, %esi 
        ret

string_after_replaced__hla_897:
        lodsl
        stosl
        movl       %eax, %ecx 
        call       move_data__hla_813
        jmp        process_after_replaced__hla_895

brace_after_replaced__hla_898:
        testb      $128, value_type__hla_130 
        jz         process_after_replaced__hla_895
        movl       %edi, %edx 
        mov        current_section__hla_100, %ecx 
        subl       %ecx, %edx 
        subl       %esi, %ecx 
        rep movsb
        movl       %edi, %ecx 
        subl       %esi, %ecx 
        movl       %ebp, %edi 
        call       move_data__hla_813
        lea        (%ebp,%edx,1), %esi 
        ret

symbol_after_replaced__hla_896:
        mov        (%esi), %cl 
        incl       %esi 
        mov        value_type__hla_130, %ch 
        call       get_preprocessor_symbol__hla_832
        jnc        replaceSymbolicConstant__hla_894
        movzbl     -1(%esi), %ecx 
        mov        $26, %al 
        movb       %cl, %ah 
        stosw
        call       move_data__hla_813
        jmp        process_after_replaced__hla_895
xreplace_symbolic_constant__hla_893:

/* procedure _0384__p____hla_904 */

_0384__p____hla_904:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "find_macro_symbol_leaf"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0384__p____hla_904:

/* procedure find_macro_symbol_leaf__hla_906 */

find_macro_symbol_leaf__hla_906:
        shll       $8, %eax 
        movb       %cl, %al 
        movl       %eax, %ebp 
        movl       $macro_symbols__hla_65, %ebx 

follow_macro_symbols_tree__hla_907:
        mov        (%ebx), %edx 
        orl        %edx, %edx 
        jz         no_such_macro_symbol__hla_908
        xorl       %eax, %eax 
        shrl       $1, %ebp 
        adcl       $0, %eax 
        lea        (%edx,%eax,4), %ebx 
        orl        %ebp, %ebp 
        jnz        follow_macro_symbols_tree__hla_907
        addl       $8, %ebx 
        clc
        ret

no_such_macro_symbol__hla_908:
        stc
        ret
xfind_macro_symbol_leaf__hla_906:

/* procedure _038e__p____hla_914 */

_038e__p____hla_914:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "add_macro_symbol"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_038e__p____hla_914:

/* procedure add_macro_symbol__hla_916 */

add_macro_symbol__hla_916:
        pushl      %ebx 
        pushl      %ebp 
        call       find_macro_symbol_leaf__hla_906
        jc         extend_macro_symbol_tree__hla_917
        mov        (%ebx), %eax 

make_macro_symbol__hla_918:
        mov        free_additional_memory__hla_53, %edx 
        addl       $16, %edx 
        cmpl       labels_list__hla_73, %edx 
        ja         out_of_memory__hla_593
        xchgl      %edx, free_additional_memory__hla_53 
        mov        %edx, (%ebx) 
        mov        %eax, (%edx) 
        mov        %esi, 4(%edx) 
        popl       %ebp 
        popl       %ebx 
        ret

extend_macro_symbol_tree__hla_917:
        mov        free_additional_memory__hla_53, %edx 
        addl       $16, %edx 
        cmpl       labels_list__hla_73, %edx 
        ja         out_of_memory__hla_593
        xchgl      %edx, free_additional_memory__hla_53 
        xorl       %eax, %eax 
        mov        %eax, (%edx) 
        mov        %eax, 4(%edx) 
        mov        %eax, 8(%edx) 
        mov        %eax, 12(%edx) 
        shrl       $1, %ebp 
        adcl       $0, %eax 
        mov        %edx, (%ebx) 
        lea        (%edx,%eax,4), %ebx 
        orl        %ebp, %ebp 
        jnz        extend_macro_symbol_tree__hla_917
        addl       $8, %ebx 
        xorl       %eax, %eax 
        jmp        make_macro_symbol__hla_918
xadd_macro_symbol__hla_916:

/* procedure _039c__p____hla_928 */

_039c__p____hla_928:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_macro_argument"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_039c__p____hla_928:

/* procedure get_macro_argument__hla_930 */

get_macro_argument__hla_930:
        lodsb
        movzbl     %al, %ecx 
        mov        counter_limit__hla_83, %eax 
        call       add_macro_symbol__hla_916
        addl       %ecx, %esi 
        xchgl      %ebx, %esi 
        mov        %esi, 12(%edx) 
        cmpb       $60, (%esi) 
        jne        simple_argument__hla_931
        incl       %esi 
        mov        %esi, 12(%edx) 
        mov        $1, %ecx 

enclosed_argument__hla_932:
        lodsb
        orb        %al, %al 
        jz         invalid_macro_arguments__hla_581
        cmpb       $26, %al 
        je         enclosed_symbol__hla_933
        cmpb       $34, %al 
        je         enclosed_string__hla_934
        cmpb       $62, %al 
        je         enclosed_argument_end__hla_935
        cmpb       $60, %al 
        jne        enclosed_argument__hla_932
        incl       %ecx 
        jmp        enclosed_argument__hla_932

enclosed_symbol__hla_933:
        movzbl     (%esi), %eax 
        incl       %esi 
        addl       %eax, %esi 
        jmp        enclosed_argument__hla_932

enclosed_string__hla_934:
        lodsl
        addl       %eax, %esi 
        jmp        enclosed_argument__hla_932

enclosed_argument_end__hla_935:
        decl       %ecx 
        jnz        enclosed_argument__hla_932
        mov        (%esi), %al 
        orb        %al, %al 
        jz         enclosed_argument_ok__hla_936
        cmpb       $44, %al 
        jne        invalid_macro_arguments__hla_581

enclosed_argument_ok__hla_936:
        movl       %esi, %eax 
        subl       12(%edx), %eax 
        decl       %eax 
        orl        $-2147483648, %eax 
        mov        %eax, 8(%edx) 
        jmp        argument_value_ok__hla_937

simple_argument__hla_931:
        lodsb
        orb        %al, %al 
        jz         argument_value_end__hla_938
        cmpb       $44, %al 
        je         argument_value_end__hla_938
        cmpb       $34, %al 
        je         argument_string__hla_939
        cmpb       $26, %al 
        jne        simple_argument__hla_931
        movzbl     (%esi), %eax 
        incl       %esi 
        addl       %eax, %esi 
        jmp        simple_argument__hla_931

argument_string__hla_939:
        lodsl
        addl       %eax, %esi 
        jmp        simple_argument__hla_931

argument_value_end__hla_938:
        decl       %esi 
        movl       %esi, %eax 
        subl       12(%edx), %eax 
        mov        %eax, 8(%edx) 

argument_value_ok__hla_937:
        xchgl      %ebx, %esi 
        cmpb       $42, (%esi) 
        jne        macro_argument_ok__hla_940
        cmpl       $0, 8(%edx) 
        je         invalid_macro_arguments__hla_581
        incl       %esi 

macro_argument_ok__hla_940:
        ret
xget_macro_argument__hla_930:

/* procedure _03ae__p____hla_946 */

_03ae__p____hla_946:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_number"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_03ae__p____hla_946:

/* procedure get_number__hla_948 */

get_number__hla_948:
        xorl       %ebp, %ebp 
        lodsb
        cmpb       $34, %al 
        je         get_text_number__hla_949
        cmpb       $26, %al 
        jne        not_number__hla_950
        lodsb
        movzbl     %al, %ecx 
        mov        %esi, number_start__hla_88 
        mov        (%esi), %al 
        cmpb       $36, %al 
        je         number_begin__hla_951
        subb       $48, %al 
        cmpb       $9, %al 
        ja         invalid_number__hla_952

number_begin__hla_951:
        movl       %esi, %ebx 
        addl       %ecx, %esi 
        pushl      %esi 
        decl       %esi 
        movl       $0, (%edi) 
        movl       $0, 4(%edi) 
        cmpb       $36, (%ebx) 
        je         pascal_hex_number__hla_953
        cmpw       $30768, (%ebx) 
        je         get_hex_number__hla_956
        mov        (%esi), %al 
        decl       %esi 
        cmpb       $104, %al 
        je         get_hex_number__hla_956
        cmpb       $98, %al 
        je         get_bin_number__hla_957
        cmpb       $100, %al 
        je         get_dec_number__hla_958
        cmpb       $111, %al 
        je         get_oct_number__hla_959
        cmpb       $72, %al 
        je         get_hex_number__hla_956
        cmpb       $66, %al 
        je         get_bin_number__hla_957
        cmpb       $68, %al 
        je         get_dec_number__hla_958
        cmpb       $79, %al 
        je         get_oct_number__hla_959
        incl       %esi 

get_dec_number__hla_958:
        movl       %esi, %ebx 
        mov        number_start__hla_88, %esi 

get_dec_digit__hla_960:
        cmpl       %ebx, %esi 
        ja         number_ok__hla_961
        xorl       %edx, %edx 
        mov        (%edi), %eax 
        shld       $2, %eax, %edx 
        shll       $2, %eax 
        addl       (%edi), %eax 
        adcl       $0, %edx 
        addl       %eax, %eax 
        adcl       %edx, %edx 
        mov        %eax, (%edi) 
        mov        4(%edi), %eax 
        addl       %eax, %eax 
        jc         dec_out_of_range__hla_962
        addl       %eax, %eax 
        jc         dec_out_of_range__hla_962
        addl       4(%edi), %eax 
        jc         dec_out_of_range__hla_962
        addl       %eax, %eax 
        jc         dec_out_of_range__hla_962
        addl       %edx, %eax 
        jc         dec_out_of_range__hla_962
        mov        %eax, 4(%edi) 
        movzbl     (%esi), %eax 
        subb       $48, %al 
        cmpb       $9, %al 
        ja         bad_number__hla_963
        addl       %eax, (%edi) 
        adcl       $0, 4(%edi) 
        jc         dec_out_of_range__hla_962
        incl       %esi 
        jmp        get_dec_digit__hla_960

dec_out_of_range__hla_962:
        orl        $-1, %ebp 
        incl       %esi 
        jmp        get_dec_digit__hla_960

bad_number__hla_963:
        popl       %eax 

invalid_number__hla_952:
        mov        number_start__hla_88, %esi 
        decl       %esi 

not_number__hla_950:
        decl       %esi 
        stc
        ret

get_bin_number__hla_957:
        xorb       %bl, %bl 

get_bin_digit__hla_964:
        cmpl       number_start__hla_88, %esi 
        jb         number_ok__hla_961
        movzbl     (%esi), %eax 
        subb       $48, %al 
        cmpb       $1, %al 
        ja         bad_number__hla_963
        xorl       %edx, %edx 
        movb       %bl, %cl 
        decl       %esi 
        cmpb       $64, %bl 
        je         bin_out_of_range__hla_965
        incb       %bl 
        cmpb       $50, %cl 
        jae        bin_digit_high__hla_966
        shll       %cl, %eax 
        orl        %eax, (%edi) 
        jmp        get_bin_digit__hla_964

bin_digit_high__hla_966:
        subb       $32, %cl 
        shll       %cl, %eax 
        orl        %eax, 4(%edi) 
        jmp        get_bin_digit__hla_964

bin_out_of_range__hla_965:
        orb        %al, %al 
        jz         get_bin_digit__hla_964
        orl        $-1, %ebp 
        jmp        get_bin_digit__hla_964

pascal_hex_number__hla_953:
        cmpb       $1, %cl 
        je         bad_number__hla_963

get_hex_number__hla_956:
        xorb       %bl, %bl 

get_hex_digit__hla_967:
        cmpl       number_start__hla_88, %esi 
        jb         number_ok__hla_961
        movzbl     (%esi), %eax 
        cmpb       $120, %al 
        je         hex_number_ok__hla_968
        cmpb       $36, %al 
        je         pascal_hex_ok__hla_969
        subb       $48, %al 
        cmpb       $9, %al 
        jbe        hex_digit_ok__hla_970
        subb       $7, %al 
        cmpb       $15, %al 
        jbe        hex_letter_digit_ok__hla_971
        subb       $32, %al 
        cmpb       $15, %al 
        ja         bad_number__hla_963

hex_letter_digit_ok__hla_971:
        cmpb       $10, %al 
        jb         bad_number__hla_963

hex_digit_ok__hla_970:
        xorl       %edx, %edx 
        movb       %bl, %cl 
        decl       %esi 
        cmpb       $64, %bl 
        je         hex_out_of_range__hla_972
        addb       $4, %bl 
        cmpb       $32, %cl 
        jae        hex_digit_high__hla_973
        shll       %cl, %eax 
        orl        %eax, (%edi) 
        jmp        get_hex_digit__hla_967

hex_digit_high__hla_973:
        subb       $32, %cl 
        shll       %cl, %eax 
        orl        %eax, 4(%edi) 
        jmp        get_hex_digit__hla_967

hex_out_of_range__hla_972:
        orb        %al, %al 
        jz         get_hex_digit__hla_967
        orl        $-1, %ebp 
        jmp        get_hex_digit__hla_967

get_oct_number__hla_959:
        xorb       %bl, %bl 

get_oct_digit__hla_974:
        cmpl       number_start__hla_88, %esi 
        jb         number_ok__hla_961
        movzbl     (%esi), %eax 
        subb       $48, %al 
        cmpb       $7, %al 
        ja         bad_number__hla_963

oct_digit_ok__hla_975:
        xorl       %edx, %edx 
        movb       %bl, %cl 
        decl       %esi 
        cmpb       $64, %bl 
        jae        oct_out_of_range__hla_976
        addb       $3, %bl 
        cmpb       $30, %cl 
        je         oct_digit_wrap__hla_977
        ja         oct_digit_high__hla_978
        shll       %cl, %eax 
        orl        %eax, (%edi) 
        jmp        get_oct_digit__hla_974

oct_digit_wrap__hla_977:
        shll       %cl, %eax 
        adcl       $0, 4(%edi) 
        orl        %eax, (%edi) 
        jmp        get_oct_digit__hla_974

oct_digit_high__hla_978:
        subb       $32, %cl 
        shll       %cl, %eax 
        orl        %eax, 4(%edi) 
        jmp        get_oct_digit__hla_974

oct_out_of_range__hla_976:
        orb        %al, %al 
        jz         get_oct_digit__hla_974
        orl        $-1, %ebp 
        jmp        get_oct_digit__hla_974

hex_number_ok__hla_968:
        decl       %esi 

pascal_hex_ok__hla_969:
        cmpl       number_start__hla_88, %esi 
        jne        bad_number__hla_963

number_ok__hla_961:
        popl       %esi 

number_done__hla_979:
        clc
        ret

get_text_number__hla_949:
        lodsl
        movl       %eax, %edx 
        xorb       %bl, %bl 
        movl       $0, (%edi) 
        movl       $0, 4(%edi) 

get_text_character__hla_980:
        subl       $1, %edx 
        jc         number_done__hla_979
        movzbl     (%esi), %eax 
        incl       %esi 
        movb       %bl, %cl 
        cmpb       $64, %bl 
        je         text_out_of_range__hla_981
        addb       $8, %bl 
        cmpb       $32, %cl 
        jae        text_character_high__hla_982
        shll       %cl, %eax 
        orl        %eax, (%edi) 
        jmp        get_text_character__hla_980

text_character_high__hla_982:
        subb       $32, %cl 
        shll       %cl, %eax 
        orl        %eax, 4(%edi) 
        jmp        get_text_character__hla_980

text_out_of_range__hla_981:
        orl        $-1, %ebp 
        jmp        get_text_character__hla_980
xget_number__hla_948:

/* procedure _03d8__p____hla_988 */

_03d8__p____hla_988:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "skip_foreign_symbol"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_03d8__p____hla_988:

/* procedure skip_foreign_symbol__hla_990 */

skip_foreign_symbol__hla_990:

sfs__hla_991:
        lodsb
        movzbl     %al, %eax 
        addl       %eax, %esi 

skip_foreign_line__hla_992:
        lodsb
        cmpb       $26, %al 
        je         sfs__hla_991
        cmpb       $59, %al 
        je         sfs__hla_991
        cmpb       $34, %al 
        je         skip_foreign_string__hla_993
        orb        %al, %al 
        jnz        skip_foreign_line__hla_992
        ret

skip_foreign_string__hla_993:
        lodsl
        addl       %eax, %esi 
        jmp        skip_foreign_line__hla_992
xskip_foreign_symbol__hla_990:

/* procedure _03e3__p____hla_999 */

_03e3__p____hla_999:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_macro_symbol"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_03e3__p____hla_999:

/* procedure get_macro_symbol__hla_1001 */

get_macro_symbol__hla_1001:
        pushl      %ecx 
        call       find_macro_symbol_leaf__hla_906
        jc         macro_symbol_not_found__hla_1002
        mov        (%ebx), %edx 
        movl       %esi, %ebx 

try_macro_symbol__hla_1003:
        orl        %edx, %edx 
        jz         macro_symbol_not_found__hla_1002
        mov        (%esp), %ecx 
        mov        4(%edx), %edi 
        repe cmpsb
        je         macro_symbol_found__hla_1004
        movl       %ebx, %esi 
        mov        (%edx), %edx 
        jmp        try_macro_symbol__hla_1003

macro_symbol_found__hla_1004:
        popl       %ecx 
        clc
        ret

macro_symbol_not_found__hla_1002:
        popl       %ecx 
        stc
        ret
xget_macro_symbol__hla_1001:

/* procedure _03ee__p____hla_1010 */

_03ee__p____hla_1010:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_number_symbol"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_03ee__p____hla_1010:

/* procedure store_number_symbol__hla_1012 */

store_number_symbol__hla_1012:
        mov        $26, %ax 
        stosw
        pushl      %edi 
        movl       %ecx, %eax 
        mov        $1000000000, %ecx 
        xorl       %edx, %edx 
        xorb       %bl, %bl 

store_number_digits__hla_1013:
        divl       %ecx 
        pushl      %edx 
        orb        %bl, %bl 
        jnz        store_number_digit__hla_1014
        cmpl       $1, %ecx 
        je         store_number_digit__hla_1014
        orb        %al, %al 
        jz         number_digit_ok__hla_1015
        notb       %bl 

store_number_digit__hla_1014:
        addb       $48, %al 
        stosb

number_digit_ok__hla_1015:
        movl       %ecx, %eax 
        xorl       %edx, %edx 
        mov        $10, %ecx 
        divl       %ecx 
        movl       %eax, %ecx 
        popl       %eax 
        orl        %ecx, %ecx 
        jnz        store_number_digits__hla_1013
        popl       %ebx 
        movl       %edi, %eax 
        subl       %ebx, %eax 
        mov        %al, -1(%ebx) 
        ret
xstore_number_symbol__hla_1012:

/* procedure _03f9__p____hla_1021 */

_03f9__p____hla_1021:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "close_macro_block"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_03f9__p____hla_1021:

/* procedure close_macro_block__hla_1023 */

close_macro_block__hla_1023:
        cmpl       $0, counter__hla_82 
        je         block_closed__hla_1024
        jl         reverse_counter__hla_1025
        mov        counter__hla_82, %eax 
        cmpl       counter_limit__hla_83, %eax 
        je         block_closed__hla_1024
        incl       counter__hla_82 
        jmp        continue_block__hla_1026

reverse_counter__hla_1025:
        mov        counter__hla_82, %eax 
        decl       %eax 
        cmpl       $-2147483648, %eax 
        je         block_closed__hla_1024
        mov        %eax, counter__hla_82 

continue_block__hla_1026:
        mov        macro_block__hla_62, %esi 
        mov        macro_block_line__hla_63, %eax 
        mov        %eax, macro_line__hla_61 
        mov        macro_block_line_number__hla_64, %ecx 
        stc
        ret

block_closed__hla_1024:
        clc
        ret
xclose_macro_block__hla_1023:

/* procedure _0404__p____hla_1032 */

_0404__p____hla_1032:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "skip_pattern"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0404__p____hla_1032:

/* procedure skip_pattern__hla_1034 */

skip_pattern__hla_1034:

skipPattern__hla_1035:
        lodsb
        orb        %al, %al 
        jz         invalid_macro_arguments__hla_581
        cmpb       $44, %al 
        je         pattern_skipped__hla_1036
        cmpb       $34, %al 
        je         skip_quoted_string_in_pattern__hla_1037
        cmpb       $26, %al 
        je         skip_symbol_in_pattern__hla_1038
        cmpb       $61, %al 
        jne        skipPattern__hla_1035
        mov        (%esi), %al 
        cmpb       $26, %al 
        je         skipPattern__hla_1035
        cmpb       $34, %al 
        je         skipPattern__hla_1035
        incl       %esi 
        jmp        skipPattern__hla_1035

skip_symbol_in_pattern__hla_1038:
        lodsb
        movzbl     %al, %eax 
        addl       %eax, %esi 
        jmp        skipPattern__hla_1035

skip_quoted_string_in_pattern__hla_1037:
        lodsl
        addl       %eax, %esi 
        jmp        skipPattern__hla_1035

pattern_skipped__hla_1036:
        ret
xskip_pattern__hla_1034:

/* procedure _0410__p____hla_1044 */

_0410__p____hla_1044:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "exact_match"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0410__p____hla_1044:

/* procedure exact_match__hla_1046 */

exact_match__hla_1046:

exactMatch__hla_1047:
        cmpl       parameters_end__hla_69, %esi 
        je         exact_match_complete__hla_1048
        mov        (%esi), %ah 
        mov        (%ebx), %al 
        cmpb       $44, %al 
        je         exact_match_complete__hla_1048
        cmpb       $26, %al 
        je         exact_match_complete__hla_1048
        cmpb       $61, %al 
        je         match_verbatim__hla_1049
        call       match_elements__hla_1050
        je         exactMatch__hla_1047

exact_match_complete__hla_1048:
        ret

match_verbatim__hla_1049:
        incl       %ebx 
        call       match_elements__hla_1050
        je         exactMatch__hla_1047
        decl       %ebx 
        ret

match_elements__hla_1050:
        mov        (%ebx), %al 
        cmpb       $26, %al 
        je         match_symbols__hla_1051
        cmpb       $34, %al 
        je         match_quoted_strings__hla_1052
        cmpb       %ah, %al 
        je         symbol_characters_matched__hla_1053
        ret

symbol_characters_matched__hla_1053:
        lea        1(%ebx), %ebx 
        lea        1(%esi), %esi 
        ret

match_quoted_strings__hla_1052:
        mov        1(%ebx), %ecx 
        addl       $5, %ecx 
        jmp        compare_elements__hla_1054

match_symbols__hla_1051:
        movzbl     1(%ebx), %ecx 
        addl       $2, %ecx 

compare_elements__hla_1054:
        movl       %esi, %eax 
        movl       %edi, %ebp 
        movl       %ebx, %edi 
        repe cmpsb
        jne        elements_mismatch__hla_1055
        movl       %edi, %ebx 
        movl       %ebp, %edi 
        ret

elements_mismatch__hla_1055:
        movl       %eax, %esi 
        movl       %ebp, %edi 
        ret
xexact_match__hla_1046:

/* procedure _0421__p____hla_1061 */

_0421__p____hla_1061:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "skip_match_element"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0421__p____hla_1061:

/* procedure skip_match_element__hla_1063 */

skip_match_element__hla_1063:
        cmpl       parameters_end__hla_69, %esi 
        je         cannot_match__hla_1064
        mov        (%esi), %al 
        cmpb       $26, %al 
        je         skip_match_symbol__hla_1065
        cmpb       $34, %al 
        je         skip_match_quoted_string__hla_1066
        addl       $1, %esi 
        ret

skip_match_quoted_string__hla_1066:
        mov        1(%esi), %eax 
        addl       $5, %esi 
        jmp        skip_match_ok__hla_1067

skip_match_symbol__hla_1065:
        movzbl     1(%esi), %eax 
        addl       $2, %esi 

skip_match_ok__hla_1067:
        addl       %eax, %esi 
        ret

cannot_match__hla_1064:
        stc
        ret
xskip_match_element__hla_1063:

/* procedure _042d__p____hla_1073 */

_042d__p____hla_1073:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "skip_parameters"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_042d__p____hla_1073:

/* procedure skip_parameters__hla_1075 */

skip_parameters__hla_1075:

skipParms__hla_1076:
        lodsb
        orb        %al, %al 
        jz         parameters_skipped__hla_1077
        cmpb       $123, %al 
        je         parameters_skipped__hla_1077
        cmpb       $34, %al 
        je         skip_quoted_parameter__hla_1078
        cmpb       $26, %al 
        jne        skipParms__hla_1076
        lodsb
        movzbl     %al, %eax 
        addl       %eax, %esi 
        jmp        skipParms__hla_1076

skip_quoted_parameter__hla_1078:
        lodsl
        addl       %eax, %esi 
        jmp        skipParms__hla_1076

parameters_skipped__hla_1077:
        ret
xskip_parameters__hla_1075:

/* procedure _0438__p____hla_1084 */

_0438__p____hla_1084:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "process_macro"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0438__p____hla_1084:

/* procedure process_macro__hla_1086 */

process_macro__hla_1086:
        pushl      macro_status__hla_116 
        orb        $16, macro_status__hla_116 
        pushl      counter__hla_82 
        pushl      macro_block__hla_62 
        pushl      macro_block_line__hla_63 
        pushl      macro_block_line_number__hla_64 
        pushl      struc_label__hla_67 
        pushl      struc_name__hla_66 
        pushl      %eax 
        pushl      current_line__hla_60 
        lodsb
        cmpb       $123, %al 
        je         false__hla_1092
        orb        %al, %al 
        jnz        unexpected_characters__hla_604
forever__hla_1094:
continue__hla_1093:
        mov        %esi, macro_line__hla_61 
        addl       $18, %esi 
        lodsb
        orb        %al, %al 
        jz         continue__hla_1093
        cmpb       $123, %al 
        je         exitloop__hla_1093
        cmpb       $59, %al 
        jne        unexpected_characters__hla_604
        call       skip_foreign_symbol__hla_990
        jmp        forever__hla_1094
exitloop__hla_1093:

false__hla_1092:
        mov        $-2147483648, %ecx 
        mov        %esi, macro_block__hla_62 
        mov        macro_line__hla_61, %eax 
        mov        %eax, macro_block_line__hla_63 
        mov        %ecx, macro_block_line_number__hla_64 
        xorl       %eax, %eax 
        mov        %eax, counter__hla_82 
        cmpl       counter_limit__hla_83, %eax 
        je         false__hla_1097
        incl       counter__hla_82 
false__hla_1097:

process_macro_line__hla_1098:
        mov        %edi, current_line__hla_60 
        cmpl       memory_end__hla_46, %edi 
        jae        out_of_memory__hla_593
        mov        4(%esp), %eax 
        orl        %eax, %eax 
        jz         instant_macro_line_header__hla_1101
        stosl
        movl       %ecx, %eax 
        stosl
        mov        (%esp), %eax 
        stosl
        mov        macro_line__hla_61, %eax 
        stosl
        jmp        macro_line_header_ok__hla_1102

instant_macro_line_header__hla_1101:
        mov        macro_line__hla_61, %edx 
        mov        (%edx), %eax 
        stosl
        mov        4(%edx), %eax 
        stosl
        mov        8(%edx), %eax 
        stosl
        mov        12(%edx), %eax 
        stosl

macro_line_header_ok__hla_1102:
        orb        $32, macro_status__hla_116 
        pushl      %ebx 
        pushl      %ecx 
        testb      $15, macro_status__hla_116 
        jz         process_macro_line_element__hla_1103
        mov        $59, %ax 
        stosw

process_macro_line_element__hla_1103:
        lodsb
        cmpb       $125, %al 
        je         macro_line_processed__hla_1104
        orb        %al, %al 
        jz         macro_line_processed__hla_1104
        cmpb       $26, %al 
        je         process_macro_symbol__hla_1105
        cmpb       $59, %al 
        je         macro_foreign_line__hla_1106
        andb       $223, macro_status__hla_116 
        stosb
        cmpb       $34, %al 
        jne        process_macro_line_element__hla_1103

copy_macro_string__hla_1107:
        mov        (%esi), %ecx 
        addl       $4, %ecx 
        rep movsb
        jmp        process_macro_line_element__hla_1103

process_macro_directive__hla_1108:
        movl       %eax, %edx 
        popl       %edi 
        popl       %eax 
        movb       $0, (%edi) 
        incl       %edi 
        popl       %ecx 
        popl       %ebx 
        jmp *      %edx 

process_macro_symbol__hla_1105:
        pushl      %esi 
        pushl      %edi 
        testb      $32, macro_status__hla_116 
        jz         not_macro_directive__hla_1109
        movzbl     (%esi), %ecx 
        incl       %esi 
        movl       $macro_directives__hla_1087, %edi 
        call       search_rsrvd_word_table__hla_626
        jnc        process_macro_directive__hla_1108
        decl       %esi 

not_macro_directive__hla_1109:
        andb       $223, macro_status__hla_116 
        movzbl     (%esi), %ecx 
        incl       %esi 
        mov        counter__hla_82, %eax 
        call       get_macro_symbol__hla_1001
        jnc        group_macro_symbol__hla_1110
        xorl       %eax, %eax 
        cmpl       %eax, counter__hla_82 
        je         multiple_macro_symbol_values__hla_1111
        call       get_macro_symbol__hla_1001
        jc         not_macro_symbol__hla_1112

replace_macro_symbol__hla_1113:
        popl       %edi 
        popl       %eax 
        mov        8(%edx), %ecx 
        andl       $2147483647, %ecx 
        mov        12(%edx), %edx 
        orl        %edx, %edx 
        jz         replace_macro_counter__hla_1114
        xchgl      %edx, %esi 
        rep movsb
        movl       %edx, %esi 
        jmp        process_macro_line_element__hla_1103

group_macro_symbol__hla_1110:
        xorl       %eax, %eax 
        cmpl       %eax, counter__hla_82 
        je         replace_macro_symbol__hla_1113
        pushl      %esi 
        pushl      %edx 
        subl       %ecx, %esi 
        call       get_macro_symbol__hla_1001
        movl       %edx, %ebx 
        popl       %edx 
        popl       %esi 
        jc         replace_macro_symbol__hla_1113
        cmpl       %ebx, %edx 
        ja         replace_macro_symbol__hla_1113
        movl       %ebx, %edx 
        jmp        replace_macro_symbol__hla_1113

multiple_macro_symbol_values__hla_1111:
        incl       %eax 
        pushl      %eax 
        call       get_macro_symbol__hla_1001
        popl       %eax 
        jc         not_macro_symbol__hla_1112
        popl       %edi 
        pushl      %ecx 
        mov        8(%edx), %ecx 
        mov        12(%edx), %edx 
        xchgl      %edx, %esi 
        btr        $31, %ecx 
        jc         enclose_macro_symbol_value__hla_1115
        rep movsb
        jmp        macro_symbol_value_ok__hla_1116

enclose_macro_symbol_value__hla_1115:
        movb       $60, (%edi) 
        incl       %edi 
        rep movsb
        movb       $62, (%edi) 
        incl       %edi 

macro_symbol_value_ok__hla_1116:
        cmpl       counter_limit__hla_83, %eax 
        je         multiple_macro_symbol_values_ok__hla_1117
        movb       $44, (%edi) 
        incl       %edi 
        movl       %edx, %esi 
        popl       %ecx 
        pushl      %edi 
        subl       %ecx, %esi 
        jmp        multiple_macro_symbol_values__hla_1111

multiple_macro_symbol_values_ok__hla_1117:
        popl       %ecx 
        popl       %eax 
        movl       %edx, %esi 
        jmp        process_macro_line_element__hla_1103

replace_macro_counter__hla_1114:
        mov        counter__hla_82, %eax 
        andl       $2147483647, %eax 
        jz         group_macro_counter__hla_1118
        addl       %eax, %ecx 
        decl       %ecx 
        call       store_number_symbol__hla_1012
        jmp        process_macro_line_element__hla_1103

group_macro_counter__hla_1118:
        movl       %ecx, %edx 
        xorl       %ecx, %ecx 

multiple_macro_counter_values__hla_1119:
        pushl      %ecx 
        pushl      %edx 
        addl       %edx, %ecx 
        call       store_number_symbol__hla_1012
        popl       %edx 
        popl       %ecx 
        incl       %ecx 
        cmpl       counter_limit__hla_83, %ecx 
        je         process_macro_line_element__hla_1103
        movb       $44, (%edi) 
        incl       %edi 
        jmp        multiple_macro_counter_values__hla_1119

not_macro_symbol__hla_1112:
        popl       %edi 
        popl       %esi 
        mov        $26, %al 
        stosb
        mov        (%esi), %al 
        incl       %esi 
        stosb
        cmpb       $46, (%esi) 
        jne        copy_raw_symbol__hla_1120
        mov        16(%esp), %ebx 
        orl        %ebx, %ebx 
        jz         copy_raw_symbol__hla_1120
        cmpb       $1, %al 
        je         copy_struc_name__hla_1121
        xchgl      %ebx, %esi 
        movzbl     -1(%esi), %ecx 
        addb       %cl, -1(%edi) 
        jc         name_too_long__hla_590
        rep movsb
        xchgl      %ebx, %esi 

copy_raw_symbol__hla_1120:
        movzbl     %al, %ecx 
        rep movsb
        jmp        process_macro_line_element__hla_1103

copy_struc_name__hla_1121:
        incl       %esi 
        xchgl      %ebx, %esi 
        movzbl     -1(%esi), %ecx 
        mov        %cl, -1(%edi) 
        rep movsb
        xchgl      %ebx, %esi 
        mov        20(%esp), %eax 
        cmpb       $59, (%eax) 
        je         process_macro_line_element__hla_1103
        cmpb       $26, (%eax) 
        jne        disable_replaced_struc_name__hla_1122
        movb       $59, (%eax) 
        jmp        process_macro_line_element__hla_1103

disable_replaced_struc_name__hla_1122:
        mov        16(%esp), %ebx 
        pushl      %esi 
        pushl      %edi 
        lea        -3(%ebx), %edi 
        lea        -2(%edi), %esi 
        lea        1(%esi), %ecx 
        subl       %eax, %ecx 
        std
        rep movsb
        cld
        movw       $59, (%eax) 
        popl       %edi 
        popl       %esi 
        jmp        process_macro_line_element__hla_1103

macro_foreign_line__hla_1106:
        call       skip_foreign_symbol__hla_990

macro_line_processed__hla_1104:
        movb       $0, (%edi) 
        incl       %edi 
        pushl      %eax 
        call       preprocess_line
        popl       %eax 
        popl       %ecx 
        popl       %ebx 
        cmpb       $125, %al 
        je         macro_block_processed__hla_1123

process_next_line__hla_1124:
        incl       %ecx 
        mov        %esi, macro_line__hla_61 
        addl       $18, %esi 
        jmp        process_macro_line__hla_1098

macro_block_processed__hla_1123:
        call       close_macro_block__hla_1023
        jc         process_macro_line__hla_1098
        popl       current_line__hla_60 
        addl       $12, %esp 
        popl       macro_block_line_number__hla_64 
        popl       macro_block_line__hla_63 
        popl       macro_block__hla_62 
        popl       counter__hla_82 
        popl       %eax 
        andb       $240, %al 
        andb       $15, macro_status__hla_116 
        orb        %al, macro_status__hla_116 
        ret

local_symbols__hla_1090:
        lodsb
        cmpb       $26, %al 
        jne        invalid_argument__hla_578
        movb       $59, -1(%edi) 
        xorb       %al, %al 
        stosb

make_local_symbol__hla_1125:
        pushl      %ecx 
        lodsb
        movzbl     %al, %ecx 
        mov        counter__hla_82, %eax 
        call       add_macro_symbol__hla_916
        mov        %edi, 12(%edx) 
        movzbl     locals_counter__hla_148, %eax 
        addl       %ecx, %eax 
        incl       %eax 
        cmpl       $256, %eax 
        jae        name_too_long__hla_590
        lea        2(%edi,%eax,1), %ebp 
        cmpl       memory_end__hla_46, %ebp 
        jae        out_of_memory__hla_593
        movb       %al, %ah 
        mov        $26, %al 
        stosw
        rep movsb
        mov        $63, %al 
        stosb
        pushl      %esi 
        movl       $(locals_counter__hla_148+1), %esi 
        movzbl     locals_counter__hla_148, %ecx 
        rep movsb
        popl       %esi 
        movl       %edi, %eax 
        subl       12(%edx), %eax 
        mov        %eax, 8(%edx) 
        xorb       %al, %al 
        stosb
        movl       $locals_counter__hla_148, %eax 
        movzbl     (%eax), %ecx 

counter_loop__hla_1128:
        incb       (%eax,%ecx,1) 
        cmpb       $58, (%eax,%ecx,1) 
        jb         counter_ok__hla_1129
        jne        letter_digit__hla_1130
        movb       $65, (%eax,%ecx,1) 
        jmp        counter_ok__hla_1129

letter_digit__hla_1130:
        cmpb       $70, (%eax,%ecx,1) 
        jbe        counter_ok__hla_1129
        movb       $48, (%eax,%ecx,1) 
        loop       counter_loop__hla_1128

counter_ok__hla_1129:
        popl       %ecx 
        lodsb
        cmpb       $125, %al 
        je         macro_block_processed__hla_1123
        orb        %al, %al 
        jz         process_next_line__hla_1124
        cmpb       $44, %al 
        jne        extra_characters_on_line__hla_571
        decl       %edi 
        lodsb
        cmpb       $26, %al 
        je         make_local_symbol__hla_1125
        jmp        invalid_argument__hla_578

common_block__hla_1088:
        call       close_macro_block__hla_1023
        jc         process_macro_line__hla_1098
        movl       $0, counter__hla_82 
        jmp        new_macro_block__hla_1131

forward_block__hla_1089:
        cmpl       $0, counter_limit__hla_83 
        je         common_block__hla_1088
        call       close_macro_block__hla_1023
        jc         process_macro_line__hla_1098
        movl       $1, counter__hla_82 
        jmp        new_macro_block__hla_1131

reverse_block__hla_1091:
        cmpl       $0, counter_limit__hla_83 
        je         common_block__hla_1088
        call       close_macro_block__hla_1023
        jc         process_macro_line__hla_1098
        mov        counter_limit__hla_83, %eax 
        orl        $-2147483648, %eax 
        mov        %eax, counter__hla_82 

new_macro_block__hla_1131:
        mov        %esi, macro_block__hla_62 
        mov        macro_line__hla_61, %eax 
        mov        %eax, macro_block_line__hla_63 
        mov        %ecx, macro_block_line_number__hla_64 
        jmp        process_macro_line__hla_1098
xprocess_macro__hla_1086:

/* procedure _046d__p____hla_1137 */

_046d__p____hla_1137:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "add_preprocessor_symbol"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_046d__p____hla_1137:

/* procedure add_preprocessor_symbol__hla_1139 */

add_preprocessor_symbol__hla_1139:
        pushl      %edi 
        pushl      %esi 
        call       calculate_hash__hla_823
        movl       %eax, %ebp 
        andl       $1023, %ebp 
        shrl       $10, %eax 
        xorl       %eax, %ebp 
        shll       $22, %ecx 
        orl        %ecx, %ebp 
        movl       $hash_tree__hla_76, %ebx 
        mov        $32, %ecx 

find_leave_for_symbol__hla_1140:
        mov        (%ebx), %edx 
        orl        %edx, %edx 
        jz         extend_hashes_tree__hla_1141
        xorl       %eax, %eax 
        roll       $1, %ebp 
        adcl       $0, %eax 
        lea        (%edx,%eax,4), %ebx 
        decl       %ecx 
        jnz        find_leave_for_symbol__hla_1140
        mov        (%ebx), %edx 
        orl        %edx, %edx 
        jz         add_symbol_entry__hla_1142
        shrl       $30, %ebp 
        cmpl       $3, %ebp 
        je         reuse_symbol_entry__hla_1143
        cmpl       $0, 4(%edx) 
        jne        add_symbol_entry__hla_1142

find_entry_to_reuse__hla_1144:
        mov        (%edx), %edi 
        orl        %edi, %edi 
        jz         reuse_symbol_entry__hla_1143
        cmpl       $0, 4(%edi) 
        jne        reuse_symbol_entry__hla_1143
        movl       %edi, %edx 
        jmp        find_entry_to_reuse__hla_1144

add_symbol_entry__hla_1142:
        movl       %edx, %eax 
        mov        labels_list__hla_73, %edx 
        subl       $16, %edx 
        cmpl       free_additional_memory__hla_53, %edx 
        jb         out_of_memory__hla_593
        mov        %edx, labels_list__hla_73 
        mov        %eax, (%edx) 
        mov        %edx, (%ebx) 

reuse_symbol_entry__hla_1143:
        popl       %esi 
        popl       %edi 
        mov        %esi, 4(%edx) 
        ret

extend_hashes_tree__hla_1141:
        mov        labels_list__hla_73, %edx 
        subl       $8, %edx 
        cmpl       free_additional_memory__hla_53, %edx 
        jb         out_of_memory__hla_593
        mov        %edx, labels_list__hla_73 
        xorl       %eax, %eax 
        mov        %eax, (%edx) 
        mov        %eax, 4(%edx) 
        shll       $1, %ebp 
        adcl       $0, %eax 
        mov        %edx, (%ebx) 
        lea        (%edx,%eax,4), %ebx 
        decl       %ecx 
        jnz        extend_hashes_tree__hla_1141
        mov        labels_list__hla_73, %edx 
        subl       $16, %edx 
        cmpl       free_additional_memory__hla_53, %edx 
        jb         out_of_memory__hla_593
        mov        %edx, labels_list__hla_73 
        movl       $0, (%edx) 
        mov        %edx, (%ebx) 
        popl       %esi 
        popl       %edi 
        mov        %esi, 4(%edx) 
        ret
xadd_preprocessor_symbol__hla_1139:

/* procedure _0480__p____hla_1156 */

_0480__p____hla_1156:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "preprocess_path"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0480__p____hla_1156:

/* procedure preprocess_path__hla_1158 */

preprocess_path__hla_1158:
forever__hla_1160:
continue__hla_1159:
false__hla_1161:
repeat__hla_1161:
        lodsb
        cmpb       $37, %al 
        je         environment_variable__hla_1162
        stosb
continue__hla_1161:
        testb      %al, %al 
        jne        repeat__hla_1161
exitloop__hla_1161:

        cmpl       memory_end__hla_46, %edi 
        ja         out_of_memory__hla_593
        ret

environment_variable__hla_1162:
        movl       %esi, %ebx 
false__hla_1165:
repeat__hla_1165:
        lodsb
        orb        %al, %al 
        jz         not_environment_variable__hla_1166
continue__hla_1165:
        cmpb       $37, %al 
        jne        repeat__hla_1165
exitloop__hla_1165:

        movb       $0, -1(%esi) 
        pushl      %ebx 
        call       get_environment_variable__hla_500
        movb       $37, -1(%esi) 
        jmp        continue__hla_1159

not_environment_variable__hla_1166:
        mov        $37, %al 
        stosb
        movl       %ebx, %esi 
        jmp        forever__hla_1160
exitloop__hla_1159:

xpreprocess_path__hla_1158:

/* procedure _0490__p____hla_1172 */

_0490__p____hla_1172:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "preprocess_line"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0490__p____hla_1172:

/* procedure preprocess_line */

preprocess_line:
        movl       %esp, %eax 
        subl       $256, %eax 
        jc         stack_overflow__hla_600
        cmpl       stack_limit__hla_49, %eax 
        jb         stack_overflow__hla_600
        pushl      %ecx 
        pushl      %esi 

preprocess_current_line__hla_1186:
        mov        current_line__hla_60, %esi 
        addl       $16, %esi 
        cmpw       $59, (%esi) 
        jne        line_start_ok__hla_1187
        addl       $2, %esi 

line_start_ok__hla_1187:
        testb      $240, macro_status__hla_116 
        jnz        macro_preprocessing__hla_1188
        cmpb       $26, (%esi) 
        jne        not_fix_constant__hla_1189
        movzbl     1(%esi), %edx 
        lea        2(%esi,%edx,1), %edx 
        cmpw       $794, (%edx) 
        jne        not_fix_constant__hla_1189
        movl       $characters__hla_159, %ebx 
        movzbl     2(%edx), %eax 
        xlat
        rorl       $8, %eax 
        mov        3(%edx), %al 
        xlat
        rorl       $8, %eax 
        mov        4(%edx), %al 
        xlat
        rorl       $16, %eax 
        cmpl       $7891302, %eax 
        je         define_fix_constant__hla_1192

not_fix_constant__hla_1189:
        call       process_fix_constants__hla_877
        jmp        initial_preprocessing_ok__hla_1193

define_fix_constant__hla_1192:
        addl       $5, %edx 
        addl       $2, %esi 
        pushl      %edx 
        pushl      %esi 
        movl       %edx, %esi 
        call       skip_parameters__hla_1075
        xchgl      %esi, (%esp) 
        mov        $3, %ch 
        jmp        define_preprocessor_constant__hla_1194

define_equ_constant__hla_1195:
        addl       $3, %esi 
        pushl      %esi 
        call       process_equ_constants__hla_885
        pushl      %esi 
        mov        struc_name__hla_66, %esi 
        mov        $2, %ch 

define_preprocessor_constant__hla_1194:
        movb       $59, -2(%esi) 
        mov        -1(%esi), %cl 
        call       add_preprocessor_symbol__hla_1139
        popl       %esi 
        popl       %ebx 
        movl       %edi, %ecx 
        decl       %ecx 
        subl       %ebx, %ecx 
        mov        %ebx, 8(%edx) 
        mov        %ecx, 12(%edx) 
        jmp        line_preprocessed__hla_1196

define_symbolic_constant__hla_1175:
        lodsb
        cmpb       $26, %al 
        jne        invalid_name__hla_582
        lodsb
        movb       %al, %cl 
        mov        $2, %ch 
        call       add_preprocessor_symbol__hla_1139
        movzbl     -1(%esi), %eax 
        addl       %eax, %esi 
        pushl      %esi 
        pushl      %edx 
        call       skip_parameters__hla_1075
        popl       %edx 
        popl       %ebx 
        lea        -1(%esi), %ecx 
        subl       %ebx, %ecx 
        mov        %ebx, 8(%edx) 
        mov        %ecx, 12(%edx) 
        jmp        line_preprocessed__hla_1196

macro_preprocessing__hla_1188:
        call       process_macro_operators__hla_846

initial_preprocessing_ok__hla_1193:
        mov        current_line__hla_60, %esi 
        addl       $16, %esi 
        mov        macro_status__hla_116, %al 
        testb      $2, %al 
        jnz        skip_macro_block__hla_1197
        testb      $1, %al 
        jnz        find_macro_block__hla_1198

preprocess_instruction__hla_1199:
        mov        %esi, current_offset__hla_89 
        lodsb
        movzbl     (%esi), %ecx 
        incl       %esi 
        cmpb       $26, %al 
        jne        not_preprocessor_symbol__hla_1200
        cmpb       $3, %cl 
        jb         not_preprocessor_directive__hla_1201
        pushl      %edi 
        movl       $preprocessor_directives__hla_1174, %edi 
        call       search_rsrvd_word_table__hla_626
        popl       %edi 
        jc         not_preprocessor_directive__hla_1201
        movb       $59, -2(%edx) 
        jmp *      %eax 

not_preprocessor_directive__hla_1201:
        xorb       %ch, %ch 
        call       get_preprocessor_symbol__hla_832
        jc         not_macro__hla_1202
        movb       $59, -2(%ebx) 
        movl       $0, struc_name__hla_66 
        jmp        use_macro__hla_1203

not_macro__hla_1202:
        mov        %esi, struc_name__hla_66 
        addl       %ecx, %esi 
        lodsb
        cmpb       $58, %al 
        je         preprocess_label__hla_1204
        cmpb       $26, %al 
        jne        not_preprocessor_symbol__hla_1200
        lodsb
        cmpb       $3, %al 
        jne        not_symbolic_constant__hla_1205
        movl       $characters__hla_159, %ebx 
        movzbl     (%esi), %eax 
        xlat
        rorl       $8, %eax 
        mov        1(%esi), %al 
        xlat
        rorl       $8, %eax 
        mov        2(%esi), %al 
        xlat
        rorl       $16, %eax 
        cmpl       $7696741, %eax 
        je         define_equ_constant__hla_1195
        mov        $3, %al 

not_symbolic_constant__hla_1205:
        mov        $1, %ch 
        movb       %al, %cl 
        call       get_preprocessor_symbol__hla_832
        jc         not_preprocessor_symbol__hla_1200
        pushl      %edx 
        pushl      %esi 
        mov        struc_name__hla_66, %esi 
        mov        %esi, struc_label__hla_67 
        subl       $2, struc_label__hla_67 
        mov        -1(%esi), %cl 
        mov        $2, %ch 
        call       get_preprocessor_symbol__hla_832
        jc         struc_name_ok__hla_1208
        mov        12(%edx), %ecx 
        addl       $3, %ecx 
        lea        (%edi,%ecx,1), %ebx 
        movl       %edi, %ecx 
        subl       struc_label__hla_67, %ecx 
        lea        -1(%edi), %esi 
        lea        -1(%ebx), %edi 
        std
        rep movsb
        cld
        mov        struc_label__hla_67, %edi 
        mov        8(%edx), %esi 
        mov        12(%edx), %ecx 
        addl       %ecx, struc_name__hla_66 
        addl       $3, struc_name__hla_66 
        call       move_data__hla_813
        mov        $58, %al 
        stosb
        mov        $59, %ax 
        stosw
        movl       %ebx, %edi 
        popl       %esi 
        addl       12(%edx), %esi 
        addl       $3, %esi 
        popl       %edx 
        jmp        use_macro__hla_1203

struc_name_ok__hla_1208:
        mov        struc_name__hla_66, %edx 
        movzbl     -1(%edx), %eax 
        addl       %eax, %edx 
        mov        $58, %al 
        mov        %al, (%edx) 
        incb       %al 
        xchgb      %al, 1(%edx) 
        decb       %al 
        mov        %al, 2(%edx) 
        popl       %esi 
        popl       %edx 
        jmp        use_macro__hla_1203

preprocess_label__hla_1204:
        decl       %esi 
        subl       %ecx, %esi 
        lea        -2(%esi), %ebp 
        mov        $2, %ch 
        call       get_preprocessor_symbol__hla_832
        jnc        symbolic_constant_in_label__hla_1209
        lea        1(%esi,%ecx,1), %esi 
        jmp        preprocess_instruction__hla_1199

symbolic_constant_in_label__hla_1209:
        mov        8(%edx), %ebx 
        mov        12(%edx), %ecx 
        addl       %ebx, %ecx 

check_for_broken_label__hla_1210:
        cmpl       %ecx, %ebx 
        je         label_broken__hla_1211
        cmpb       $26, (%ebx) 
        jne        label_broken__hla_1211
        movzbl     1(%ebx), %eax 
        lea        2(%ebx,%eax,1), %ebx 
        cmpl       %ecx, %ebx 
        je         label_constant_ok__hla_1212
        cmpb       $58, (%ebx) 
        jne        label_broken__hla_1211
        incl       %ebx 
        jmp        check_for_broken_label__hla_1210

label_broken__hla_1211:
        pushl      $line_preprocessed__hla_1196 
        jmp        replace_symbolic_constant__hla_893

label_constant_ok__hla_1212:
        movl       %edi, %ecx 
        subl       %esi, %ecx 
        mov        12(%edx), %edi 
        addl       %ebp, %edi 
        pushl      %edi 
        lea        (%edi,%ecx,1), %eax 
        pushl      %eax 
        cmpl       %edi, %esi 
        je         replace_label__hla_1213
        jb         move_rest_of_line_up__hla_1214
        rep movsb
        jmp        replace_label__hla_1213

move_rest_of_line_up__hla_1214:
        lea        -1(%esi,%ecx,1), %esi 
        lea        -1(%edi,%ecx,1), %edi 
        std
        rep movsb
        cld

replace_label__hla_1213:
        mov        12(%edx), %ecx 
        mov        4(%esp), %edi 
        subl       %ecx, %edi 
        mov        8(%edx), %esi 
        rep movsb
        popl       %edi 
        popl       %esi 
        incl       %esi 
        jmp        preprocess_instruction__hla_1199

not_preprocessor_symbol__hla_1200:
        mov        current_offset__hla_89, %esi 
        call       process_equ_constants__hla_885

line_preprocessed__hla_1196:
        popl       %esi 
        popl       %ecx 
        ret

use_macro__hla_1203:
        pushl      free_additional_memory__hla_53 
        pushl      macro_symbols__hla_65 
        movl       $0, macro_symbols__hla_65 
        pushl      counter_limit__hla_83 
        pushl      4(%edx) 
        movl       $1, 4(%edx) 
        pushl      %edx 
        movl       %esi, %ebx 
        mov        8(%edx), %esi 
        mov        12(%edx), %eax 
        mov        %eax, macro_line__hla_61 
        movl       $0, counter_limit__hla_83 

process_macro_arguments__hla_1215:
        mov        (%esi), %al 
        orb        %al, %al 
        jz         arguments_end__hla_1216
        cmpb       $123, %al 
        je         arguments_end__hla_1216
        incl       %esi 
        cmpb       $91, %al 
        jne        get_macro_arguments__hla_1217
        movl       %esi, %ebp 
        incl       %esi 
        incl       counter_limit__hla_83 

get_macro_arguments__hla_1217:
        call       get_macro_argument__hla_930
        lodsb
        cmpb       $44, %al 
        je         next_argument__hla_1218
        cmpb       $93, %al 
        je         next_arguments_group__hla_1219
        decl       %esi 
        jmp        arguments_end__hla_1216

next_argument__hla_1218:
        cmpb       $44, (%ebx) 
        jne        process_macro_arguments__hla_1215
        incl       %ebx 
        jmp        process_macro_arguments__hla_1215

next_arguments_group__hla_1219:
        cmpb       $44, (%ebx) 
        jne        arguments_end__hla_1216
        incl       %ebx 
        incl       counter_limit__hla_83 
        movl       %ebp, %esi 
        jmp        process_macro_arguments__hla_1215

arguments_end__hla_1216:
        cmpb       $0, (%ebx) 
        jne        invalid_macro_arguments__hla_581
        mov        4(%esp), %eax 
        decl       %eax 
        call       process_macro__hla_1086
        popl       %edx 
        popl       4(%edx) 
        popl       counter_limit__hla_83 
        popl       macro_symbols__hla_65 
        popl       free_additional_memory__hla_53 
        jmp        line_preprocessed__hla_1196
        int        $3 
        int        $3 
        int        $3 

 .ascii "include_file"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 

include_file__hla_1176:
        lodsb
        cmpb       $34, %al 
        jne        invalid_argument__hla_578
        lodsl
        cmpb       $0, (%esi,%eax,1) 
        jne        extra_characters_on_line__hla_571
        pushl      %esi 
        pushl      %edi 
        mov        current_line__hla_60, %ebx 

find_current_file_path__hla_1220:
        mov        (%ebx), %esi 
        testb      $128, 7(%ebx) 
        jz         copy_current_file_path__hla_1221
        mov        8(%ebx), %ebx 
        jmp        find_current_file_path__hla_1220

copy_current_file_path__hla_1221:
        lodsb
        stosb
        orb        %al, %al 
        jnz        copy_current_file_path__hla_1221

cut_current_file_name__hla_1222:
        cmpl       (%esp), %edi 
        je         current_file_path_ok__hla_1223
        cmpb       $92, -1(%edi) 
        je         current_file_path_ok__hla_1223
        cmpb       $47, -1(%edi) 
        je         current_file_path_ok__hla_1223
        decl       %edi 
        jmp        cut_current_file_name__hla_1222

current_file_path_ok__hla_1223:
        mov        4(%esp), %esi 
        call       preprocess_path__hla_1158
        popl       %edx 
        movl       %edx, %esi 
        call       exists__hla_407
        jnc        include_path_ok__hla_1224
        mov        include_paths__hla_52, %ebp 

try_include_directories__hla_1225:
        movl       %esi, %edi 
        movl       %ebp, %esi 
        cmpb       $0, (%esi) 
        je         try_in_current_directory__hla_1226
        pushl      %ebp 
        pushl      %edi 
false__hla_1227:
repeat__hla_1227:
        lodsb
        cmpb       $59, %al 
        je         include_directory_ok__hla_1228
        stosb
continue__hla_1227:
        testb      %al, %al 
        jne        repeat__hla_1227
exitloop__hla_1227:

        decl       %esi 
        decl       %edi 

include_directory_ok__hla_1228:
        cmpb       $47, -1(%edi) 
        je         path_separator_ok__hla_1229
        cmpb       $92, -1(%edi) 
        je         path_separator_ok__hla_1229
        mov        $47, %al 
        stosb

path_separator_ok__hla_1229:
        mov        %esi, 4(%esp) 
        mov        8(%esp), %esi 
        call       preprocess_path__hla_1158
        popl       %edx 
        movl       %edx, %esi 
        call       exists__hla_407
        popl       %ebp 
        jnc        include_path_ok__hla_1224
        jmp        try_include_directories__hla_1225

try_in_current_directory__hla_1226:
        mov        (%esp), %esi 
        pushl      %edi 
        call       preprocess_path__hla_1158
        popl       %edx 
        movl       %edx, %esi 
        call       exists__hla_407
        jc         file_not_found__hla_572

include_path_ok__hla_1224:
        mov        (%esp), %edi 
false__hla_1230:
repeat__hla_1230:
        lodsb
        stosb
continue__hla_1230:
        testb      %al, %al 
        jne        repeat__hla_1230
exitloop__hla_1230:

        popl       %esi 
        lea        -1(%edi), %ecx 
        subl       %esi, %ecx 
        mov        %ecx, -4(%esi) 
        pushl      macro_status__hla_116 
        andb       $15, macro_status__hla_116 
        mov        $16388, %eax 
        call       preprocess_file
        popl       %eax 
        mov        %al, macro_status__hla_116 
        jmp        line_preprocessed__hla_1196

irp_directive__hla_1177:
        movb       $1, base_code__hla_132 
        jmp        define_instant_macro__hla_1231

irps_directive__hla_1178:
        movb       $2, base_code__hla_132 
        jmp        define_instant_macro__hla_1231

match_directive__hla_1180:
        movb       $16, base_code__hla_132 

define_instant_macro__hla_1231:
        mov        macro_status__hla_116, %al 
        andb       $240, %al 
        orb        $9, %al 
        mov        %al, macro_status__hla_116 
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        mov        %esi, instant_macro_start__hla_68 
        cmpb       $16, base_code__hla_132 
        je         prepare_match__hla_1232
        call       skip_parameters__hla_1075

instant_macro_parameters_skipped__hla_1233:
        decl       %esi 
        mov        %esi, parameters_end__hla_69 
        lodsb
        cmpb       $123, %al 
        je         found_macro_block__hla_1234
        orb        %al, %al 
        jnz        invalid_macro_arguments__hla_581
        jmp        line_preprocessed__hla_1196

prepare_match__hla_1232:
        call       skip_pattern__hla_1034
        movb       $130, value_type__hla_130 
        call       process_symbolic_constants
        jmp        instant_macro_parameters_skipped__hla_1233

use_instant_macro__hla_1235:
        pushl      %edi 
        pushl      current_line__hla_60 
        pushl      %esi 
        mov        error_line__hla_84, %eax 
        mov        %eax, current_line__hla_60 
        mov        %eax, macro_line__hla_61 
        mov        instant_macro_start__hla_68, %esi 
        cmpb       $16, base_code__hla_132 
        jae        do_match__hla_1236
        cmpb       $0, base_code__hla_132 
        jne        do_irp__hla_1237
        call       get_number__hla_948
        jc         invalid_value__hla_586
        orl        %ebp, %ebp 
        jnz        invalid_value__hla_586
        cmpl       $0, 4(%edi) 
        jne        value_out_of_range__hla_607
        mov        (%edi), %eax 
        orl        %eax, %eax 
        jz         instant_macro_done__hla_1238
        cmpl       $-2147483648, %eax 
        jae        value_out_of_range__hla_607
        pushl      free_additional_memory__hla_53 
        pushl      macro_symbols__hla_65 
        movl       $0, macro_symbols__hla_65 
        pushl      counter_limit__hla_83 
        movl       $0, struc_name__hla_66 
        mov        %eax, counter_limit__hla_83 
        lodsb
        orb        %al, %al 
        jz         rept_counters_ok__hla_1239
        cmpb       $123, %al 
        je         rept_counters_ok__hla_1239
        cmpb       $26, %al 
        jne        invalid_macro_arguments__hla_581

add_rept_counter__hla_1240:
        lodsb
        movzbl     %al, %ecx 
        xorl       %eax, %eax 
        call       add_macro_symbol__hla_916
        addl       %ecx, %esi 
        xorl       %eax, %eax 
        mov        %eax, 12(%edx) 
        incl       %eax 
        mov        %eax, 8(%edx) 
        lodsb
        cmpb       $58, %al 
        jne        rept_counter_added__hla_1241
        pushl      %edx 
        call       get_number__hla_948
        jc         invalid_value__hla_586
        orl        %ebp, %ebp 
        jnz        invalid_value__hla_586
        cmpl       $0, 4(%edi) 
        jne        value_out_of_range__hla_607
        mov        (%edi), %eax 
        movl       %eax, %edx 
        addl       counter_limit__hla_83, %edx 
        jc         value_out_of_range__hla_607
        popl       %edx 
        mov        %eax, 8(%edx) 
        lodsb

rept_counter_added__hla_1241:
        cmpb       $44, %al 
        jne        rept_counters_ok__hla_1239
        lodsb
        cmpb       $26, %al 
        jne        invalid_macro_arguments__hla_581
        jmp        add_rept_counter__hla_1240

rept_counters_ok__hla_1239:
        decl       %esi 

instant_macro_parameters_ok__hla_1242:
        xorl       %eax, %eax 
        call       process_macro__hla_1086
        popl       counter_limit__hla_83 
        popl       macro_symbols__hla_65 
        popl       free_additional_memory__hla_53 

instant_macro_done__hla_1238:
        popl       %ebx 
        popl       %esi 
        popl       %edx 
        cmpb       $0, (%ebx) 
        je         line_preprocessed__hla_1196
        mov        %edi, current_line__hla_60 
        mov        $4, %ecx 
        rep movsl
        testb      $15, macro_status__hla_116 
        jz         instant_macro_attached_line__hla_1243
        mov        $59, %ax 
        stosw

instant_macro_attached_line__hla_1243:
        movl       %ebx, %esi 
        subl       %ebx, %edx 
        movl       %edx, %ecx 
        call       move_data__hla_813
        jmp        preprocess_current_line__hla_1186

do_irp__hla_1237:
        cmpb       $26, (%esi) 
        jne        invalid_macro_arguments__hla_581
        movzbl     1(%esi), %eax 
        lea        2(%esi,%eax,1), %esi 
        lodsb
        cmpb       $1, base_code__hla_132 
        ja         irps_name_ok__hla_1244
        cmpb       $42, %al 
        jne        irp_name_ok__hla_1245
        lodsb

irp_name_ok__hla_1245:
        cmpb       $44, %al 
        jne        invalid_macro_arguments__hla_581
        jmp        irp_parameters_start__hla_1246

irps_name_ok__hla_1244:
        cmpb       $44, %al 
        jne        invalid_macro_arguments__hla_581
        mov        (%esi), %al 
        orb        %al, %al 
        jz         instant_macro_done__hla_1238
        cmpb       $123, %al 
        je         instant_macro_done__hla_1238

irp_parameters_start__hla_1246:
        xorl       %eax, %eax 
        pushl      free_additional_memory__hla_53 
        pushl      macro_symbols__hla_65 
        mov        %eax, macro_symbols__hla_65 
        pushl      counter_limit__hla_83 
        mov        %eax, counter_limit__hla_83 
        mov        %eax, struc_name__hla_66 
        movl       %esi, %ebx 
        cmpb       $1, base_code__hla_132 
        ja         get_irps_parameter__hla_1247
        mov        parameters_end__hla_69, %edx 
        mov        (%edx), %al 
        pushl      %eax 
        movb       $0, (%edx) 

get_irp_parameter__hla_1248:
        incl       counter_limit__hla_83 
        mov        instant_macro_start__hla_68, %esi 
        incl       %esi 
        call       get_macro_argument__hla_930
        cmpb       $44, (%ebx) 
        jne        irp_parameters_end__hla_1249
        incl       %ebx 
        jmp        get_irp_parameter__hla_1248

irp_parameters_end__hla_1249:
        movl       %ebx, %esi 
        popl       %eax 
        mov        %al, (%esi) 
        jmp        instant_macro_parameters_ok__hla_1242

get_irps_parameter__hla_1247:
        mov        instant_macro_start__hla_68, %esi 
        incl       %esi 
        lodsb
        movzbl     %al, %ecx 
        incl       counter_limit__hla_83 
        mov        counter_limit__hla_83, %eax 
        call       add_macro_symbol__hla_916
        mov        %ebx, 12(%edx) 
        cmpb       $26, (%ebx) 
        je         irps_symbol__hla_1250
        cmpb       $34, (%ebx) 
        je         irps_quoted_string__hla_1251
        mov        $1, %eax 
        jmp        irps_parameter_ok__hla_1252

irps_quoted_string__hla_1251:
        mov        1(%ebx), %eax 
        addl       $5, %eax 
        jmp        irps_parameter_ok__hla_1252

irps_symbol__hla_1250:
        movzbl     1(%ebx), %eax 
        addl       $2, %eax 

irps_parameter_ok__hla_1252:
        mov        %eax, 8(%edx) 
        addl       %eax, %ebx 
        cmpb       $0, (%ebx) 
        je         irps_parameters_end__hla_1253
        cmpb       $123, (%ebx) 
        jne        get_irps_parameter__hla_1247

irps_parameters_end__hla_1253:
        movl       %ebx, %esi 
        jmp        instant_macro_parameters_ok__hla_1242

do_match__hla_1236:
        movl       %esi, %ebx 
        call       skip_pattern__hla_1034
        call       exact_match__hla_1046
        movl       %edi, %edx 
        mov        (%ebx), %al 
        cmpb       $26, %al 
        je         free_match__hla_1254
        cmpb       $44, %al 
        jne        instant_macro_done__hla_1238
        cmpl       parameters_end__hla_69, %esi 
        je         matched_pattern__hla_1255
        jmp        instant_macro_done__hla_1238

free_match__hla_1254:
        addl       $12, %edx 
        cmpl       memory_end__hla_46, %edx 
        ja         out_of_memory__hla_593
        mov        %ebx, -12(%edx) 
        mov        %esi, -8(%edx) 
        call       skip_match_element__hla_1063
        jc         try_different_matching__hla_1258
        mov        %esi, -4(%edx) 
        movzbl     1(%ebx), %eax 
        lea        2(%ebx,%eax,1), %ebx 
        cmpb       $26, (%ebx) 
        je         free_match__hla_1254

find_exact_match__hla_1259:
        call       exact_match__hla_1046
        cmpl       parameters_end__hla_69, %esi 
        je         end_matching__hla_1260
        cmpb       $26, (%ebx) 
        je         free_match__hla_1254
        mov        -12(%edx), %ebx 
        movzbl     1(%ebx), %eax 
        lea        2(%ebx,%eax,1), %ebx 
        mov        -4(%edx), %esi 
        jmp        match_more_elements__hla_1261

try_different_matching__hla_1258:
        subl       $12, %edx 
        cmpl       %edi, %edx 
        je         instant_macro_done__hla_1238
        mov        -12(%edx), %ebx 
        movzbl     1(%ebx), %eax 
        lea        2(%ebx,%eax,1), %ebx 
        cmpb       $26, (%ebx) 
        je         try_different_matching__hla_1258
        mov        -4(%edx), %esi 

match_more_elements__hla_1261:
        call       skip_match_element__hla_1063
        jc         try_different_matching__hla_1258
        mov        %esi, -4(%edx) 
        jmp        find_exact_match__hla_1259

end_matching__hla_1260:
        cmpb       $44, (%ebx) 
        jne        instant_macro_done__hla_1238

matched_pattern__hla_1255:
        xorl       %eax, %eax 
        pushl      free_additional_memory__hla_53 
        pushl      macro_symbols__hla_65 
        mov        %eax, macro_symbols__hla_65 
        pushl      counter_limit__hla_83 
        mov        %eax, counter_limit__hla_83 
        mov        %eax, struc_name__hla_66 
        pushl      %esi 
        pushl      %edi 
        pushl      %edx 

add_matched_symbol__hla_1262:
        cmpl       (%esp), %edi 
        je         matched_symbols_ok__hla_1263
        mov        (%edi), %esi 
        incl       %esi 
        lodsb
        movzbl     %al, %ecx 
        xorl       %eax, %eax 
        call       add_macro_symbol__hla_916
        mov        4(%edi), %eax 
        mov        %eax, 12(%edx) 
        mov        8(%edi), %ecx 
        subl       %eax, %ecx 
        mov        %ecx, 8(%edx) 
        addl       $12, %edi 
        jmp        add_matched_symbol__hla_1262

matched_symbols_ok__hla_1263:
        popl       %edx 
        popl       %edi 
        popl       %esi 
        jmp        instant_macro_parameters_ok__hla_1242

define_struc__hla_1185:
        mov        $1, %ch 
        jmp        make_macro__hla_1264

define_macro__hla_1179:
        xorb       %ch, %ch 

make_macro__hla_1264:
        lodsb
        cmpb       $26, %al 
        jne        invalid_name__hla_582
        lodsb
        movb       %al, %cl 
        call       add_preprocessor_symbol__hla_1139
        mov        current_line__hla_60, %eax 
        mov        %eax, 12(%edx) 
        movzbl     -1(%esi), %eax 
        addl       %eax, %esi 
        mov        %esi, 8(%edx) 
        mov        macro_status__hla_116, %al 
        andb       $240, %al 
        orb        $1, %al 
        mov        %al, macro_status__hla_116 
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        xorb       %bl, %bl 
        lodsb
        orb        %al, %al 
        jz         line_preprocessed__hla_1196
        cmpb       $123, %al 
        je         found_macro_block__hla_1234
        decl       %esi 

skip_macro_arguments__hla_1265:
        lodsb
        cmpb       $26, %al 
        je         skip_macro_argument__hla_1266
        cmpb       $91, %al 
        jne        invalid_macro_arguments__hla_581
        xorb       $-1, %bl 
        jz         invalid_macro_arguments__hla_581
        lodsb
        cmpb       $26, %al 
        jne        invalid_macro_arguments__hla_581

skip_macro_argument__hla_1266:
        movzbl     (%esi), %eax 
        incl       %esi 
        addl       %eax, %esi 
        lodsb
        cmpb       $42, %al 
        jne        macro_argument_end__hla_1267
        lodsb

macro_argument_end__hla_1267:
        cmpb       $44, %al 
        je         skip_macro_arguments__hla_1265
        cmpb       $93, %al 
        jne        end_macro_arguments__hla_1268
        lodsb
        notb       %bl 

end_macro_arguments__hla_1268:
        orb        %bl, %bl 
        jnz        invalid_macro_arguments__hla_581
        orb        %al, %al 
        jz         line_preprocessed__hla_1196
        cmpb       $123, %al 
        je         found_macro_block__hla_1234
        jmp        invalid_macro_arguments__hla_581

find_macro_block__hla_1198:
        addl       $2, %esi 
        lodsb
        orb        %al, %al 
        jz         line_preprocessed__hla_1196
        cmpb       $123, %al 
        jne        unexpected_characters__hla_604

found_macro_block__hla_1234:
        orb        $2, macro_status__hla_116 

skip_macro_block__hla_1197:
false__hla_1269:
repeat__hla_1269:
        lodsb
        cmpb       $26, %al 
        je         skip_macro_symbol__hla_1270
        cmpb       $59, %al 
        je         skip_macro_symbol__hla_1270
        cmpb       $34, %al 
        je         skip_macro_string__hla_1271
        orb        %al, %al 
        jz         line_preprocessed__hla_1196
continue__hla_1269:
        cmpb       $125, %al 
        jne        repeat__hla_1269
exitloop__hla_1269:

        mov        macro_status__hla_116, %al 
        andb       $240, macro_status__hla_116 
        testb      $8, %al 
        jnz        use_instant_macro__hla_1235
        cmpb       $0, (%esi) 
        je         line_preprocessed__hla_1196
        movl       %edi, %ecx 
        subl       %esi, %ecx 
        movl       %esi, %edx 
        lea        -1(%esi,%ecx,1), %esi 
        lea        17(%edi), %edi 
        movl       %edi, %ebx 
        decl       %edi 
        std
        rep movsb
        cld
        movl       %edx, %edi 
        xorb       %al, %al 
        stosb
        mov        current_line__hla_60, %esi 
        mov        %edi, current_line__hla_60 
        mov        $4, %ecx 
        rep movsl
        movl       %ebx, %edi 
        jmp        preprocess_current_line__hla_1186

skip_macro_symbol__hla_1270:
        movzbl     (%esi), %eax 
        incl       %esi 
        addl       %eax, %esi 
        jmp        skip_macro_block__hla_1197

skip_macro_string__hla_1271:
        lodsl
        addl       %eax, %esi 
        jmp        skip_macro_block__hla_1197

rept_directive__hla_1182:
        movb       $0, base_code__hla_132 
        jmp        define_instant_macro__hla_1231

purge_macro__hla_1181:
        xorb       %ch, %ch 
        jmp        restore_preprocessor_symbol__hla_1272

purge_struc__hla_1184:
        mov        $1, %ch 
        jmp        restore_preprocessor_symbol__hla_1272

restore_equ_constant__hla_1183:
        mov        $2, %ch 

restore_preprocessor_symbol__hla_1272:
        pushl      %ecx 
        lodsb
        cmpb       $26, %al 
        jne        invalid_name__hla_582
        lodsb
        movb       %al, %cl 
        call       get_preprocessor_symbol__hla_832
        jc         no_symbol_to_restore__hla_1273
        movl       $0, 4(%edx) 
        jmp        symbol_restored__hla_1274

no_symbol_to_restore__hla_1273:
        addl       %ecx, %esi 

symbol_restored__hla_1274:
        popl       %ecx 
        lodsb
        cmpb       $44, %al 
        je         restore_preprocessor_symbol__hla_1272
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
        ret
xpreprocess_line:

/* procedure _04fc__p____hla_1280 */

_04fc__p____hla_1280:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "preprocess_file"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_04fc__p____hla_1280:

/* procedure preprocess_file */

preprocess_file:
        pushl      %edx 
        pushl      %eax 
        call       readFileIntoMemory__hla_535
        pushl      memory_end__hla_46 
        xorl       %ecx, %ecx 
        movl       %esi, %ebx 

preprocess_source__hla_1282:
        incl       %ecx 
        mov        %edi, current_line__hla_60 
        movl       %edx, %eax 
        stosl
        movl       %ecx, %eax 
        stosl
        movl       %esi, %eax 
        subl       %ebx, %eax 
        stosl
        xorl       %eax, %eax 
        stosl
        pushl      %ebx 
        pushl      %edx 
        call       convert_line__hla_779
        call       preprocess_line
        popl       %edx 
        popl       %ebx 
        cmpb       $26, -1(%esi) 
        jne        preprocess_source__hla_1282

file_end__hla_1283:
        popl       memory_end__hla_46 
        ret
xpreprocess_file:

/* procedure _0505__p____hla_1289 */

_0505__p____hla_1289:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "preprocessor"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0505__p____hla_1289:

/* procedure preprocessor__hla_1291 */

preprocessor__hla_1291:
        pushl      $str__hla_1292 
        call       getenv__hla_492
        mov        %eax, include_paths__hla_52 
        mov        additional_memory__hla_47, %eax 
        mov        %eax, free_additional_memory__hla_53 
        mov        additional_memory_end__hla_48, %eax 
        mov        %eax, labels_list__hla_73 
        xorl       %eax, %eax 
        mov        %eax, display_buffer__hla_86 
        mov        %eax, hash_tree__hla_76 
        mov        %al, macro_status__hla_116 
        mov        memory_start__hla_45, %edi 
        mov        input_file__hla_50, %edx 
        mov        $12296, %eax 
        call       preprocess_file
        mov        error_line__hla_84, %eax 
        mov        %eax, current_line__hla_60 
        cmpb       $0, macro_status__hla_116 
        jne        incomplete_macro__hla_575
        mov        %edi, source_start__hla_54 
        ret
xpreprocessor__hla_1291:

/* procedure _050e__p____hla_1298 */

_050e__p____hla_1298:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "fp_mul"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_050e__p____hla_1298:

/* procedure fp_mul__hla_1300 */

fp_mul__hla_1300:
        orl        %ecx, %ecx 
        jz         fp_zero__hla_1301
        mov        12(%edi), %eax 
        mull       %ecx 
        mov        %eax, 12(%edi) 
        movl       %edx, %ebx 
        mov        (%edi), %eax 
        mull       %ecx 
        addl       %ebx, %eax 
        adcl       $0, %edx 
        mov        %eax, (%edi) 
        movl       %edx, %ebx 
        mov        4(%edi), %eax 
        mull       %ecx 
        addl       %ebx, %eax 
        adcl       $0, %edx 
        mov        %eax, 4(%edi) 

_loop___hla_1302:
        orl        %edx, %edx 
        jz         _done___hla_1303
        mov        (%edi), %eax 
        shrd       $1, %eax, 12(%edi) 
        mov        4(%edi), %eax 
        shrd       $1, %eax, (%edi) 
        shrd       $1, %edx, %eax 
        mov        %eax, 4(%edi) 
        shrl       $1, %edx 
        incl       8(%edi) 
        cmpl       $32768, 8(%edi) 
        jge        value_out_of_range__hla_607
        jmp        _loop___hla_1302

_done___hla_1303:
        ret

fp_zero__hla_1301:
        movl       $32768, 8(%edi) 
        ret
xfp_mul__hla_1300:

/* procedure _0519__p____hla_1309 */

_0519__p____hla_1309:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "fp_div"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0519__p____hla_1309:

/* procedure fp_div__hla_1311 */

fp_div__hla_1311:
        mov        4(%edi), %eax 
        xorl       %edx, %edx 
        divl       %ecx 
        mov        %eax, 4(%edi) 
        mov        (%edi), %eax 
        divl       %ecx 
        mov        %eax, (%edi) 
        mov        12(%edi), %eax 
        divl       %ecx 
        mov        %eax, 12(%edi) 
        movl       %eax, %ebx 
        orl        (%edi), %ebx 
        orl        4(%edi), %ebx 
        jz         fp_zero__hla_1312

_loop___hla_1313:
        testb      $128, 7(%edi) 
        jnz        _exp_ok___hla_1314
        mov        (%edi), %eax 
        shld       $1, %eax, 4(%edi) 
        mov        12(%edi), %eax 
        shld       $1, %eax, (%edi) 
        addl       %eax, %eax 
        mov        %eax, 12(%edi) 
        decl       8(%edi) 
        addl       %edx, %edx 
        jmp        _loop___hla_1313

_exp_ok___hla_1314:
        movl       %edx, %eax 
        xorl       %edx, %edx 
        divl       %ecx 
        addl       %eax, 12(%edi) 
        adcl       $0, (%edi) 
        adcl       $0, 4(%edi) 
        jnc        _done___hla_1315
        mov        4(%edi), %eax 
        mov        (%edi), %ebx 
        shrd       $1, %eax, (%edi) 
        shrd       $1, %ebx, 12(%edi) 
        shrl       $1, %eax 
        orl        $-2147483648, %eax 
        mov        %eax, 4(%edi) 
        incl       8(%edi) 

_done___hla_1315:
        ret

fp_zero__hla_1312:
        movl       $32768, 8(%edi) 
        ret
xfp_div__hla_1311:

/* procedure _0525__p____hla_1321 */

_0525__p____hla_1321:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "fp_add"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0525__p____hla_1321:

/* procedure fp_add__hla_1323 */

fp_add__hla_1323:
        cmpl       $32768, 8(%ebx) 
        je         _done___hla_1324
        cmpl       $32768, 8(%edi) 
        je         _copy___hla_1325
        mov        8(%ebx), %eax 
        cmpl       8(%edi), %eax 
        jge        _exp_ok___hla_1326
        mov        8(%edi), %eax 

_exp_ok___hla_1326:
        call       _change_exp___hla_1327
        xchgl      %edi, %ebx 
        call       _change_exp___hla_1327
        xchgl      %edi, %ebx 
        mov        12(%ebx), %edx 
        mov        (%ebx), %eax 
        mov        4(%ebx), %ebx 
        addl       %edx, 12(%edi) 
        adcl       %eax, (%edi) 
        adcl       %ebx, 4(%edi) 
        jnc        _done___hla_1324
        mov        (%edi), %eax 
        shrd       $1, %eax, 12(%edi) 
        mov        4(%edi), %eax 
        shrd       $1, %eax, (%edi) 
        shrl       $1, %eax 
        orl        $-2147483648, %eax 
        mov        %eax, 4(%edi) 
        incl       8(%edi) 

_done___hla_1324:
        ret

_copy___hla_1325:
        mov        (%ebx), %eax 
        mov        %eax, (%edi) 
        mov        4(%ebx), %eax 
        mov        %eax, 4(%edi) 
        mov        8(%ebx), %eax 
        mov        %eax, 8(%edi) 
        mov        12(%ebx), %eax 
        mov        %eax, 12(%edi) 
        ret

_change_exp___hla_1327:
        pushl      %ecx 
        movl       %eax, %ecx 
        subl       8(%ebx), %ecx 
        mov        4(%ebx), %edx 
        jecxz      _exp_done___hla_1328

_exp_loop__hla_1329:
        mov        (%ebx), %ebp 
        shrd       $1, %ebp, 12(%ebx) 
        shrd       $1, %edx, (%ebx) 
        shrl       $1, %edx 
        incl       8(%ebx) 
        loop       _exp_loop__hla_1329

_exp_done___hla_1328:
        mov        %edx, 4(%ebx) 
        popl       %ecx 
        ret
xfp_add__hla_1323:

/* procedure _0533__p____hla_1335 */

_0533__p____hla_1335:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "fp_optimize"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0533__p____hla_1335:

/* procedure fp_optimize__hla_1337 */

fp_optimize__hla_1337:
        mov        (%edi), %eax 
        mov        4(%edi), %ebp 
        orl        (%edi), %ebp 
        orl        12(%edi), %ebp 
        jz         fp_zero__hla_1338

_loop___hla_1339:
        testb      $128, 7(%edi) 
        jnz        _done___hla_1340
        shld       $1, %eax, 4(%edi) 
        mov        12(%edi), %ebp 
        shld       $1, %ebp, %eax 
        mov        %eax, (%edi) 
        shll       $1, 12(%edi) 
        decl       8(%edi) 
        jmp        _loop___hla_1339

_done___hla_1340:
        ret

fp_zero__hla_1338:
        movl       $32768, 8(%edi) 
        ret
xfp_optimize__hla_1337:

/* procedure _053e__p____hla_1346 */

_053e__p____hla_1346:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "convert_number"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_053e__p____hla_1346:

/* procedure convert_number__hla_1348 */

convert_number__hla_1348:
        lea        -16(%edi), %eax 
        cmpl       labels_list__hla_73, %eax 
        jae        out_of_memory__hla_593
        cmpb       $40, (%esi) 
        je         expression_value__hla_1351
        incl       %edi 
        call       get_number__hla_948
        jc         symbol_value__hla_1352
        orl        %ebp, %ebp 
        jz         valid_number__hla_1353
        movb       $15, -1(%edi) 
        ret

valid_number__hla_1353:
        cmpl       $0, 4(%edi) 
        jne        qword_number__hla_1354
        cmpw       $0, 2(%edi) 
        jne        dword_number__hla_1355
        cmpb       $0, 1(%edi) 
        jne        word_number__hla_1356

byte_number__hla_1357:
        movb       $1, -1(%edi) 
        incl       %edi 
        ret

qword_number__hla_1354:
        movb       $8, -1(%edi) 
        addl       $8, %edi 
        ret

dword_number__hla_1355:
        movb       $4, -1(%edi) 
        scasl
        ret

word_number__hla_1356:
        movb       $2, -1(%edi) 
        scasw
        ret

expression_value__hla_1351:
        movl       %esp, %eax 
        subl       $256, %eax 
        jc         stack_overflow__hla_600
        cmpl       stack_limit__hla_49, %eax 
        jb         stack_overflow__hla_600
        incl       %esi 
        pushl      current_offset__hla_89 
        call       convert_expression
        popl       current_offset__hla_89 
        lodsb
        cmpb       $41, %al 
        jne        invalid_expression__hla_579
        ret

symbol_value__hla_1352:
        lodsb
        cmpb       $26, %al 
        jne        invalid_value__hla_586
        lodsb
        movzbl     %al, %ecx 
        pushl      %ecx 
        pushl      %esi 
        pushl      %edi 
        movl       $address_registers__hla_164, %edi 
        call       get_symbol__hla_638
        jnc        register_value__hla_1358
        movl       $directive_operators__hla_162, %edi 
        call       get_symbol__hla_638
        popl       %edi 
        popl       %esi 
        popl       %ecx 
        jnc        broken_value__hla_1359
        call       get_label_id__hla_688

store_label_value__hla_1360:
        movb       $17, -1(%edi) 
        stosl
        ret

broken_value__hla_1359:
        subl       $2, %esi 
        orl        $-1, %eax 
        jmp        store_label_value__hla_1360

register_value__hla_1358:
        popl       %edi 
        addl       $8, %esp 
        movb       $16, -1(%edi) 
        movb       %ah, %al 
        stosb
        ret
xconvert_number__hla_1348:

/* procedure _0552__p____hla_1366 */

_0552__p____hla_1366:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_fp_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0552__p____hla_1366:

/* procedure get_fp_value__hla_1368 */

get_fp_value__hla_1368:
        pushl      %edi 
        pushl      %esi 
        lodsb
        cmpb       $26, %al 
        je         fp_value_start__hla_1369
        cmpb       $45, %al 
        je         fp_sign_ok__hla_1370
        cmpb       $43, %al 
        jne        not_fp_value__hla_1371

fp_sign_ok__hla_1370:
        lodsb
        cmpb       $26, %al 
        jne        not_fp_value__hla_1371

fp_value_start__hla_1369:
        lodsb
        movzbl     %al, %ecx 
        cmpb       $1, %cl 
        jbe        not_fp_value__hla_1371
        lea        1(%esi), %edx 
        xorb       %ah, %ah 

check_fp_value__hla_1372:
        lodsb
        cmpb       $46, %al 
        je         fp_character_dot__hla_1373
        cmpb       $69, %al 
        je         fp_character_exp__hla_1374
        cmpb       $101, %al 
        je         fp_character_exp__hla_1374
        cmpb       $70, %al 
        je         fp_last_character__hla_1375
        cmpb       $102, %al 
        je         fp_last_character__hla_1375

digit_expected__hla_1376:
        cmpb       $48, %al 
        jb         not_fp_value__hla_1371
        cmpb       $57, %al 
        ja         not_fp_value__hla_1371
        jmp        fp_character_ok__hla_1377

fp_character_dot__hla_1373:
        cmpl       %edx, %esi 
        je         not_fp_value__hla_1371
        orb        %ah, %ah 
        jnz        not_fp_value__hla_1371
        orb        $1, %ah 
        lodsb
        loop       digit_expected__hla_1376

not_fp_value__hla_1371:
        popl       %esi 
        popl       %edi 
        stc
        ret

fp_last_character__hla_1375:
        cmpb       $1, %cl 
        jne        not_fp_value__hla_1371
        orb        $4, %ah 
        jmp        fp_character_ok__hla_1377

fp_character_exp__hla_1374:
        cmpl       %edx, %esi 
        je         not_fp_value__hla_1371
        cmpb       $1, %ah 
        ja         not_fp_value__hla_1371
        orb        $2, %ah 
        cmpl       $1, %ecx 
        jne        fp_character_ok__hla_1377
        cmpb       $43, (%esi) 
        je         fp_exp_sign__hla_1378
        cmpb       $45, (%esi) 
        jne        fp_character_ok__hla_1377

fp_exp_sign__hla_1378:
        incl       %esi 
        cmpb       $26, (%esi) 
        jne        not_fp_value__hla_1371
        incl       %esi 
        lodsb
        movzbl     %al, %ecx 
        incl       %ecx 

fp_character_ok__hla_1377:
        decl       %ecx 
        jnz        check_fp_value__hla_1372
        orb        %ah, %ah 
        jz         not_fp_value__hla_1371
        popl       %esi 
        lodsb
        movb       $0, fp_sign__hla_122 
        cmpb       $26, %al 
        je         fp_get__hla_1379
        incl       %esi 
        cmpb       $43, %al 
        je         fp_get__hla_1379
        movb       $1, fp_sign__hla_122 

fp_get__hla_1379:
        lodsb
        movzbl     %al, %ecx 
        xorl       %edx, %edx 
        movl       $fp_value__hla_90, %edi 
        mov        %edx, (%edi) 
        mov        %edx, 4(%edi) 
        mov        %edx, 12(%edi) 
        call       fp_optimize__hla_1337
        movb       $0, fp_format__hla_123 
        mov        (%esi), %al 

fp_before_dot__hla_1380:
        lodsb
        cmpb       $46, %al 
        je         fp_dot__hla_1381
        cmpb       $69, %al 
        je         fp_exponent__hla_1382
        cmpb       $101, %al 
        je         fp_exponent__hla_1382
        cmpb       $70, %al 
        je         fp_done__hla_1383
        cmpb       $102, %al 
        je         fp_done__hla_1383
        subb       $48, %al 
        movl       $(fp_value__hla_90+16), %edi 
        xorl       %edx, %edx 
        mov        %edx, 12(%edi) 
        mov        %edx, (%edi) 
        mov        %edx, 4(%edi) 
        mov        %al, 7(%edi) 
        mov        $7, %dl 
        mov        %edx, 8(%edi) 
        call       fp_optimize__hla_1337
        movl       $fp_value__hla_90, %edi 
        pushl      %ecx 
        mov        $10, %ecx 
        call       fp_mul__hla_1300
        popl       %ecx 
        movl       $(fp_value__hla_90+16), %ebx 
        call       fp_add__hla_1323
        decl       %ecx 
        jnz        fp_before_dot__hla_1380

fp_dot__hla_1381:
        movl       $(fp_value__hla_90+16), %edi 
        xorl       %edx, %edx 
        mov        %edx, (%edi) 
        mov        %edx, 4(%edi) 
        movb       $128, 7(%edi) 
        mov        %edx, 8(%edi) 
        mov        %edx, 12(%edi) 
        decl       %ecx 
        jz         fp_done__hla_1383

fp_after_dot__hla_1384:
        lodsb
        cmpb       $69, %al 
        je         fp_exponent__hla_1382
        cmpb       $101, %al 
        je         fp_exponent__hla_1382
        cmpb       $70, %al 
        je         fp_done__hla_1383
        cmpb       $102, %al 
        je         fp_done__hla_1383
        incb       fp_format__hla_123 
        cmpb       $128, fp_format__hla_123 
        jne        fp_counter_ok__hla_1385
        movb       $127, fp_format__hla_123 

fp_counter_ok__hla_1385:
        decl       %esi 
        movl       $(fp_value__hla_90+16), %edi 
        pushl      %ecx 
        mov        $10, %ecx 
        call       fp_div__hla_1311
        pushl      (%edi) 
        pushl      4(%edi) 
        pushl      8(%edi) 
        pushl      12(%edi) 
        lodsb
        subb       $48, %al 
        movzbl     %al, %ecx 
        call       fp_mul__hla_1300
        movl       %edi, %ebx 
        movl       $fp_value__hla_90, %edi 
        call       fp_add__hla_1323
        movl       $(fp_value__hla_90+16), %edi 
        popl       12(%edi) 
        popl       8(%edi) 
        popl       4(%edi) 
        popl       (%edi) 
        popl       %ecx 
        decl       %ecx 
        jnz        fp_after_dot__hla_1384
        jmp        fp_done__hla_1383

fp_exponent__hla_1382:
        orb        $128, fp_format__hla_123 
        xorl       %edx, %edx 
        xorl       %ebp, %ebp 
        decl       %ecx 
        jnz        get_exponent__hla_1386
        cmpb       $43, (%esi) 
        je         fp_exponent_sign__hla_1387
        cmpb       $45, (%esi) 
        jne        fp_done__hla_1383
        notl       %ebp 

fp_exponent_sign__hla_1387:
        addl       $2, %esi 
        lodsb
        movzbl     %al, %ecx 

get_exponent__hla_1386:
        movzbl     (%esi), %eax 
        incl       %esi 
        subb       $48, %al 
        cmpb       $10, %al 
        jae        exponent_ok__hla_1388
        imul       $10, %edx, %edx 
        cmpl       $32768, %edx 
        jae        value_out_of_range__hla_607
        addl       %eax, %edx 
        loop       get_exponent__hla_1386

exponent_ok__hla_1388:
        movl       $fp_value__hla_90, %edi 
        orl        %edx, %edx 
        jz         fp_done__hla_1383
        movl       %edx, %ecx 
        orl        %ebp, %ebp 
        jnz        fp_negative_power__hla_1389

fp_power__hla_1390:
        pushl      %ecx 
        mov        $10, %ecx 
        call       fp_mul__hla_1300
        popl       %ecx 
        loop       fp_power__hla_1390
        jmp        fp_done__hla_1383

fp_negative_power__hla_1389:
        pushl      %ecx 
        mov        $10, %ecx 
        call       fp_div__hla_1311
        popl       %ecx 
        loop       fp_negative_power__hla_1389

fp_done__hla_1383:
        movl       $fp_value__hla_90, %edi 
        mov        fp_format__hla_123, %al 
        mov        %al, 10(%edi) 
        mov        fp_sign__hla_122, %al 
        mov        %al, 11(%edi) 
        testb      $128, 15(%edi) 
        jz         fp_ok__hla_1391
        addl       $1, (%edi) 
        adcl       $0, 4(%edi) 
        jnc        fp_ok__hla_1391
        mov        4(%edi), %eax 
        shrd       $1, %eax, (%edi) 
        shrl       $1, %eax 
        orl        $-2147483648, %eax 
        mov        %eax, 4(%edi) 
        incw       8(%edi) 

fp_ok__hla_1391:
        popl       %edi 
        clc
        ret
xget_fp_value__hla_1368:

/* procedure _0571__p____hla_1397 */

_0571__p____hla_1397:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "convert_expression"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0571__p____hla_1397:

/* procedure convert_expression */

convert_expression:
        pushl      %ebp 
        call       get_fp_value__hla_1368
        jnc        fp_expression__hla_1399
        mov        %esp, current_offset__hla_89 

expression_loop__hla_1400:
        pushl      %edi 
        movl       $single_operand_operators__hla_161, %edi 
        call       get_operator__hla_662
        popl       %edi 
        orb        %al, %al 
        jz         expression_element__hla_1401
        pushl      %eax 
        jmp        expression_loop__hla_1400

expression_element__hla_1401:
        mov        (%esi), %al 
        cmpb       $26, %al 
        je         expression_number__hla_1402
        cmpb       $34, %al 
        je         expression_number__hla_1402
        cmpb       $40, %al 
        je         expression_number__hla_1402
        mov        $33, %al 
        stosb
        jmp        expression_operator__hla_1403

expression_number__hla_1402:
        call       convert_number__hla_1348

expression_operator__hla_1403:
        pushl      %edi 
        movl       $operators__hla_160, %edi 
        call       get_operator__hla_662
        popl       %edi 
        orb        %al, %al 
        jz         expression_end__hla_1404

operators_loop__hla_1405:
        cmpl       current_offset__hla_89, %esp 
        je         push_operator__hla_1406
        movb       %al, %bl 
        andb       $240, %bl 
        mov        (%esp), %bh 
        andb       $240, %bh 
        cmpb       %bh, %bl 
        ja         push_operator__hla_1406
        popl       %ebx 
        mov        %bl, (%edi) 
        incl       %edi 
        jmp        operators_loop__hla_1405

push_operator__hla_1406:
        pushl      %eax 
        jmp        expression_loop__hla_1400

expression_end__hla_1404:
        cmpl       current_offset__hla_89, %esp 
        je         expression_converted__hla_1407
        popl       %eax 
        stosb
        jmp        expression_end__hla_1404

expression_converted__hla_1407:
        popl       %ebp 
        ret

fp_expression__hla_1399:
        mov        $46, %al 
        stosb
        mov        fp_value__hla_90, %eax 
        stosl
        mov        fp_value__hla_90+4, %eax 
        stosl
        mov        fp_value__hla_90+8, %eax 
        stosl
        popl       %ebp 
        ret
xconvert_expression:

/* procedure _0581__p____hla_1413 */

_0581__p____hla_1413:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "calculation_loop"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0581__p____hla_1413:

/* procedure calculation_loop__hla_1415 */

calculation_loop__hla_1415:

calculationLoop__hla_1416:
        lodsb
        cmpb       $1, %al 
        je         get_byte_number__hla_1417
        cmpb       $2, %al 
        je         get_word_number__hla_1418
        cmpb       $4, %al 
        je         get_dword_number__hla_1419
        cmpb       $8, %al 
        je         get_qword_number__hla_1420
        cmpb       $15, %al 
        je         value_out_of_range__hla_607
        cmpb       $16, %al 
        je         get_register__hla_1421
        cmpb       $17, %al 
        je         get_label__hla_1422
        cmpb       $41, %al 
        je         expression_calculated__hla_1423
        cmpb       $93, %al 
        je         expression_calculated__hla_1423
        cmpb       $33, %al 
        je         invalid_expression__hla_579
        subl       $20, %edi 
        movl       %edi, %ebx 
        subl       $20, %ebx 
        cmpb       $224, %al 
        je         calculate_rva__hla_1424
        cmpb       $208, %al 
        je         calculate_not__hla_1425
        cmpb       $131, %al 
        je         calculate_neg__hla_1426
        mov        8(%ebx), %dx 
        orw        8(%edi), %dx 
        cmpb       $128, %al 
        je         calculate_add__hla_1427
        cmpb       $129, %al 
        je         calculate_sub__hla_1428
        mov        12(%ebx), %ah 
        orb        12(%edi), %ah 
        jz         absolute_values_calculation__hla_1429
        cmpl       $0, error_line__hla_84 
        jne        absolute_values_calculation__hla_1429
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

absolute_values_calculation__hla_1429:
        cmpb       $144, %al 
        je         calculate_mul__hla_1430
        cmpb       $145, %al 
        je         calculate_div__hla_1431
        orw        %dx, %dx 
        jnz        invalid_expression__hla_579
        cmpb       $160, %al 
        je         calculate_mod__hla_1432
        cmpb       $176, %al 
        je         calculate_and__hla_1433
        cmpb       $177, %al 
        je         calculate_or__hla_1434
        cmpb       $178, %al 
        je         calculate_xor__hla_1435
        cmpb       $192, %al 
        je         calculate_shl__hla_1436
        cmpb       $193, %al 
        je         calculate_shr__hla_1437
        jmp        invalid_expression__hla_579

expression_calculated__hla_1423:
        subl       $20, %edi 
        cmpb       $0, value_undefined__hla_129 
        je         expression_value_ok__hla_1438
        xorl       %eax, %eax 
        mov        %eax, (%edi) 
        mov        %eax, 4(%edi) 
        mov        %al, 12(%edi) 

expression_value_ok__hla_1438:
        ret

get_byte_number__hla_1417:
        movw       $0, 8(%edi) 
        movb       $0, 12(%edi) 
        xorl       %eax, %eax 
        lodsb
        stosl
        xorb       %al, %al 
        stosl
        addl       $12, %edi 
        jmp        calculationLoop__hla_1416

get_word_number__hla_1418:
        movw       $0, 8(%edi) 
        movb       $0, 12(%edi) 
        xorl       %eax, %eax 
        lodsw
        stosl
        xorw       %ax, %ax 
        stosl
        addl       $12, %edi 
        jmp        calculationLoop__hla_1416

get_dword_number__hla_1419:
        movw       $0, 8(%edi) 
        movb       $0, 12(%edi) 
        movsl
        xorl       %eax, %eax 
        stosl
        addl       $12, %edi 
        jmp        calculationLoop__hla_1416

get_qword_number__hla_1420:
        movw       $0, 8(%edi) 
        movb       $0, 12(%edi) 
        movsl
        movsl
        addl       $12, %edi 
        jmp        calculationLoop__hla_1416

get_register__hla_1421:
        movb       $0, 9(%edi) 
        movb       $0, 12(%edi) 
        lodsb
        mov        %al, 8(%edi) 
        movb       $1, 10(%edi) 
        xorl       %eax, %eax 
        stosl
        stosl
        addl       $12, %edi 
        jmp        calculationLoop__hla_1416

get_label__hla_1422:
        xorl       %eax, %eax 
        mov        %eax, 8(%edi) 
        mov        %al, 12(%edi) 
        mov        %eax, 20(%edi) 
        lodsl
        cmpl       $15, %eax 
        jb         predefined_label__hla_1439
        je         reserved_word_used_as_symbol__hla_597
        movl       %eax, %ebx 
        mov        current_pass__hla_111, %ax 
        mov        %ax, 18(%ebx) 
        orb        $8, 8(%ebx) 
        testb      $1, 8(%ebx) 
        jz         label_undefined__hla_1440
        cmpw       16(%ebx), %ax 
        je         label_defined__hla_1441
        testb      $4, 8(%ebx) 
        jnz        label_undefined__hla_1440
        testb      $1, 9(%ebx) 
        jz         label_defined__hla_1441
        mov        (%ebx), %eax 
        subl       adjustment__hla_42, %eax 
        stosl
        mov        4(%ebx), %eax 
        sbbl       adjustment__hla_42+4, %eax 
        stosl
        mov        adjustment__hla_42, %eax 
        orl        adjustment__hla_42+4, %eax 
        jz         got_label__hla_1442
        orb        $-1, next_pass_needed__hla_115 
        jmp        got_label__hla_1442

label_defined__hla_1441:
        mov        (%ebx), %eax 
        stosl
        mov        4(%ebx), %eax 
        stosl

got_label__hla_1442:
        mov        11(%ebx), %al 
        mov        %al, 4(%edi) 
        mov        12(%ebx), %eax 
        mov        %eax, (%edi) 
        mov        20(%ebx), %eax 
        mov        %eax, 8(%edi) 
        addl       $12, %edi 
        mov        10(%ebx), %al 
        orb        %al, %al 
        jz         calculationLoop__hla_1416
        cmpb       $-1, size_override__hla_125 
        je         calculationLoop__hla_1416
        cmpb       $0, size_override__hla_125 
        je         check_size__hla_1443
        cmpb       $0, operand_size__hla_127 
        jne        calculationLoop__hla_1416
        mov        %al, operand_size__hla_127 
        jmp        calculationLoop__hla_1416

check_size__hla_1443:
        xchgb      %al, operand_size__hla_127 
        orb        %al, %al 
        jz         calculationLoop__hla_1416
        cmpb       operand_size__hla_127, %al 
        jne        operand_sizes_do_not_match__hla_591
        jmp        calculationLoop__hla_1416

current_offset_label__hla_1444:
        mov        labels_type__hla_119, %al 
        mov        %al, 12(%edi) 
        mov        org_symbol__hla_79, %eax 
        mov        %eax, 16(%edi) 
        mov        current_offset__hla_89, %eax 
        xorl       %edx, %edx 
        subl       org_origin__hla_40, %eax 
        sbbl       org_origin__hla_40+4, %edx 
        stosl
        movl       %edx, %eax 
        stosl
        mov        org_registers__hla_77, %eax 
        stosl
        addl       $8, %edi 
        jmp        calculationLoop__hla_1416

org_origin_label__hla_1445:
        mov        labels_type__hla_119, %al 
        mov        %al, 12(%edi) 
        mov        org_symbol__hla_79, %eax 
        mov        %eax, 16(%edi) 
        mov        org_start__hla_78, %eax 
        xorl       %edx, %edx 
        subl       org_origin__hla_40, %eax 
        sbbl       org_origin__hla_40+4, %edx 
        stosl
        movl       %edx, %eax 
        stosl
        mov        org_registers__hla_77, %eax 
        stosl
        addl       $8, %edi 
        jmp        calculationLoop__hla_1416

counter_label__hla_1446:
        mov        counter__hla_82, %eax 

make_dword_label_value__hla_1447:
        stosl
        xorl       %eax, %eax 
        stosl
        addl       $12, %edi 
        jmp        calculationLoop__hla_1416

timestamp_label__hla_1448:
        call       make_timestamp__hla_546
        jmp        make_dword_label_value__hla_1447

predefined_label__hla_1439:
        orl        %eax, %eax 
        jz         current_offset_label__hla_1444
        cmpl       $1, %eax 
        je         counter_label__hla_1446
        cmpl       $2, %eax 
        je         timestamp_label__hla_1448
        cmpl       $3, %eax 
        je         org_origin_label__hla_1445

label_undefined__hla_1440:
        cmpw       $1, current_pass__hla_111 
        ja         undefined_value__hla_1449

force_next_pass__hla_1450:
        orb        $-1, next_pass_needed__hla_115 

undefined_value__hla_1449:
        movb       $0, 12(%edi) 
        orb        $-1, value_undefined__hla_129 
        xorl       %eax, %eax 
        stosl
        stosl
        addl       $12, %edi 
        cmpl       $0, error_line__hla_84 
        jne        calculationLoop__hla_1416
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $undefined_symbol__hla_603, error__hla_85 
        jmp        calculationLoop__hla_1416

calculate_add__hla_1427:
        mov        16(%ebx), %ecx 
        cmpb       $0, 12(%edi) 
        je         add_values__hla_1451
        mov        16(%edi), %ecx 
        cmpb       $0, 12(%ebx) 
        je         add_values__hla_1451
        cmpl       $0, error_line__hla_84 
        jne        add_values__hla_1451
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

add_values__hla_1451:
        mov        12(%edi), %al 
        orb        %al, 12(%ebx) 
        mov        %ecx, 16(%ebx) 
        mov        (%edi), %eax 
        addl       %eax, (%ebx) 
        mov        4(%edi), %eax 
        adcl       %eax, 4(%ebx) 
        orw        %dx, %dx 
        jz         calculationLoop__hla_1416
        pushl      %esi 
        movl       %ebx, %esi 
        lea        10(%edi), %ebx 
        mov        8(%edi), %cl 
        call       add_register__hla_1452
        lea        11(%edi), %ebx 
        mov        9(%edi), %cl 
        call       add_register__hla_1452
        popl       %esi 
        jmp        calculationLoop__hla_1416

add_register__hla_1452:
        orb        %cl, %cl 
        jz         add_register_done__hla_1453

add_register_start__hla_1454:
        cmpb       %cl, 8(%esi) 
        jne        add_in_second_slot__hla_1455
        mov        (%ebx), %al 
        addb       %al, 10(%esi) 
        jnz        add_register_done__hla_1453
        movb       $0, 8(%esi) 
        ret

add_in_second_slot__hla_1455:
        cmpb       %cl, 9(%esi) 
        jne        create_in_first_slot__hla_1456
        mov        (%ebx), %al 
        addb       %al, 11(%esi) 
        jnz        add_register_done__hla_1453
        movb       $0, 9(%esi) 
        ret

create_in_first_slot__hla_1456:
        cmpb       $0, 8(%esi) 
        jne        create_in_second_slot__hla_1457
        mov        %cl, 8(%esi) 
        mov        (%ebx), %al 
        mov        %al, 10(%esi) 
        ret

create_in_second_slot__hla_1457:
        cmpb       $0, 9(%esi) 
        jne        invalid_expression__hla_579
        mov        %cl, 9(%esi) 
        mov        (%ebx), %al 
        mov        %al, 11(%esi) 

add_register_done__hla_1453:
        ret

calculate_sub__hla_1428:
        xorb       %ah, %ah 
        mov        12(%ebx), %ah 
        mov        12(%edi), %al 
        orb        %al, %al 
        jz         sub_values__hla_1458
        cmpb       %ah, %al 
        jne        invalid_sub__hla_1459
        xorb       %ah, %ah 
        mov        16(%edi), %ecx 
        cmpl       16(%ebx), %ecx 
        je         sub_values__hla_1458
        cmpl       org_symbol__hla_79, %ecx 
        jne        invalid_sub__hla_1459
        testb      $1, 12(%ebx) 
        jnz        invalid_sub__hla_1459
        mov        $3, %ah 

sub_values__hla_1458:
        mov        %ah, 12(%ebx) 
        mov        (%edi), %eax 
        subl       %eax, (%ebx) 
        mov        4(%edi), %eax 
        sbbl       %eax, 4(%ebx) 
        orw        %dx, %dx 
        jz         calculationLoop__hla_1416
        pushl      %esi 
        movl       %ebx, %esi 
        lea        10(%edi), %ebx 
        mov        8(%edi), %cl 
        call       sub_register__hla_1460
        lea        11(%edi), %ebx 
        mov        9(%edi), %cl 
        call       sub_register__hla_1460
        popl       %esi 
        jmp        calculationLoop__hla_1416

invalid_sub__hla_1459:
        cmpl       $0, error_line__hla_84 
        jne        sub_values__hla_1458
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 
        jmp        sub_values__hla_1458

sub_register__hla_1460:
        orb        %cl, %cl 
        jz         add_register_done__hla_1453
        negb       (%ebx) 
        jmp        add_register_start__hla_1454

calculate_mul__hla_1430:
        orw        %dx, %dx 
        jz         mul_start__hla_1461
        cmpw       $0, 8(%ebx) 
        jne        mul_start__hla_1461
        mov        (%ebx), %eax 
        xchgl      %eax, (%edi) 
        mov        %eax, (%ebx) 
        mov        4(%ebx), %eax 
        xchgl      %eax, 4(%edi) 
        mov        %eax, 4(%ebx) 
        mov        8(%ebx), %eax 
        xchgl      %eax, 8(%edi) 
        mov        %eax, 8(%ebx) 
        mov        12(%ebx), %eax 
        xchgl      %eax, 12(%edi) 
        mov        %eax, 12(%ebx) 

mul_start__hla_1461:
        pushl      %esi 
        pushl      %edx 
        movl       %ebx, %esi 
        xorb       %bl, %bl 
        bt         $31, 4(%esi) 
        jnc        mul_first_sign_ok__hla_1462
        notl       (%esi) 
        notl       4(%esi) 
        addl       $1, (%esi) 
        adcl       $0, 4(%esi) 
        notb       %bl 

mul_first_sign_ok__hla_1462:
        bt         $31, 4(%edi) 
        jnc        mul_second_sign_ok__hla_1463
        notl       (%edi) 
        notl       4(%edi) 
        addl       $1, (%edi) 
        adcl       $0, 4(%edi) 
        notb       %bl 

mul_second_sign_ok__hla_1463:
        cmpl       $0, 4(%esi) 
        jz         mul_numbers__hla_1464
        cmpl       $0, 4(%edi) 
        jnz        value_out_of_range__hla_607

mul_numbers__hla_1464:
        mov        4(%esi), %eax 
        mull       (%edi) 
        orl        %edx, %edx 
        jnz        value_out_of_range__hla_607
        movl       %eax, %ecx 
        mov        (%esi), %eax 
        mull       4(%edi) 
        orl        %edx, %edx 
        jnz        value_out_of_range__hla_607
        addl       %eax, %ecx 
        jc         value_out_of_range__hla_607
        mov        (%esi), %eax 
        mull       (%edi) 
        addl       %ecx, %edx 
        jc         value_out_of_range__hla_607
        testl      $-2147483648, %edx 
        jnz        value_out_of_range__hla_607
        mov        %eax, (%esi) 
        mov        %edx, 4(%esi) 
        orb        %bl, %bl 
        jz         mul_ok__hla_1465
        notl       (%esi) 
        notl       4(%esi) 
        addl       $1, (%esi) 
        adcl       $0, 4(%esi) 

mul_ok__hla_1465:
        popl       %edx 
        orw        %dx, %dx 
        jz         mul_calculated__hla_1466
        cmpw       $0, 8(%edi) 
        jne        invalid_value__hla_586
        cmpb       $0, 8(%esi) 
        je         mul_first_register_ok__hla_1467
        mov        (%edi), %al 
        cbw
        cwde
        cdq
        cmpl       4(%edi), %edx 
        jne        value_out_of_range__hla_607
        cmpl       (%edi), %eax 
        jne        value_out_of_range__hla_607
        imulb      10(%esi) 
        movb       %ah, %dl 
        cbw
        cmpb       %dl, %ah 
        jne        value_out_of_range__hla_607
        mov        %al, 10(%esi) 

mul_first_register_ok__hla_1467:
        cmpb       $0, 9(%esi) 
        je         mul_calculated__hla_1466
        mov        (%edi), %al 
        cbw
        cwde
        cdq
        cmpl       4(%edi), %edx 
        jne        value_out_of_range__hla_607
        cmpl       (%edi), %eax 
        jne        value_out_of_range__hla_607
        imulb      11(%esi) 
        movb       %ah, %dl 
        cbw
        cmpb       %dl, %ah 
        jne        value_out_of_range__hla_607
        mov        %al, 11(%esi) 

mul_calculated__hla_1466:
        popl       %esi 
        jmp        calculationLoop__hla_1416

calculate_div__hla_1431:
        pushl      %esi 
        pushl      %edx 
        movl       %ebx, %esi 
        call       div_64__hla_1468
        popl       %edx 
        orw        %dx, %dx 
        jz         div_calculated__hla_1469
        cmpb       $0, 8(%esi) 
        je         div_first_register_ok__hla_1470
        mov        (%edi), %al 
        cbw
        cwde
        cdq
        cmpl       4(%edi), %edx 
        jne        value_out_of_range__hla_607
        cmpl       (%edi), %eax 
        jne        value_out_of_range__hla_607
        orb        %al, %al 
        jz         value_out_of_range__hla_607
        mov        10(%esi), %al 
        cbw
        idivb      (%edi) 
        orb        %ah, %ah 
        jnz        invalid_use_of_symbol__hla_585
        mov        %al, 10(%esi) 

div_first_register_ok__hla_1470:
        cmpb       $0, 9(%esi) 
        je         div_calculated__hla_1469
        mov        (%edi), %al 
        cbw
        cwde
        cdq
        cmpl       4(%edi), %edx 
        jne        value_out_of_range__hla_607
        cmpl       (%edi), %eax 
        jne        value_out_of_range__hla_607
        orb        %al, %al 
        jz         value_out_of_range__hla_607
        mov        11(%esi), %al 
        cbw
        idivb      (%edi) 
        orb        %ah, %ah 
        jnz        invalid_use_of_symbol__hla_585
        mov        %al, 11(%esi) 

div_calculated__hla_1469:
        popl       %esi 
        jmp        calculationLoop__hla_1416

calculate_mod__hla_1432:
        pushl      %esi 
        movl       %ebx, %esi 
        call       div_64__hla_1468
        mov        %eax, (%esi) 
        mov        %edx, 4(%esi) 
        popl       %esi 
        jmp        calculationLoop__hla_1416

calculate_and__hla_1433:
        mov        (%edi), %eax 
        andl       %eax, (%ebx) 
        mov        4(%edi), %eax 
        andl       %eax, 4(%ebx) 
        jmp        calculationLoop__hla_1416

calculate_or__hla_1434:
        mov        (%edi), %eax 
        orl        %eax, (%ebx) 
        mov        4(%edi), %eax 
        orl        %eax, 4(%ebx) 
        jmp        calculationLoop__hla_1416

calculate_xor__hla_1435:
        mov        (%edi), %eax 
        xorl       %eax, (%ebx) 
        mov        4(%edi), %eax 
        xorl       %eax, 4(%ebx) 
        jmp        calculationLoop__hla_1416

shr_negative__hla_1471:
        notl       (%edi) 
        notl       4(%edi) 
        addl       $1, (%edi) 
        adcl       $0, 4(%edi) 

calculate_shl__hla_1436:
        mov        4(%edi), %eax 
        bt         $31, %eax 
        jc         shl_negative__hla_1472
        orl        %eax, %eax 
        jnz        zero_value__hla_1473
        mov        (%edi), %ecx 
        cmpl       $64, %ecx 
        jae        zero_value__hla_1473
        cmpl       $32, %ecx 
        jae        shl_high__hla_1474
        mov        4(%ebx), %edx 
        mov        (%ebx), %eax 
        shld       %cl, %eax, %edx 
        shll       %cl, %eax 
        mov        %eax, (%ebx) 
        mov        %edx, 4(%ebx) 
        jmp        calculationLoop__hla_1416

shl_high__hla_1474:
        subb       $32, %cl 
        mov        (%ebx), %eax 
        shll       %cl, %eax 
        mov        %eax, 4(%ebx) 
        movl       $0, (%ebx) 
        jmp        calculationLoop__hla_1416

shl_negative__hla_1472:
        notl       (%edi) 
        notl       4(%edi) 
        addl       $1, (%edi) 
        adcl       $0, 4(%edi) 

calculate_shr__hla_1437:
        mov        4(%edi), %eax 
        bt         $31, %eax 
        jc         shr_negative__hla_1471
        orl        %eax, %eax 
        jnz        zero_value__hla_1473
        mov        (%edi), %ecx 
        cmpl       $64, %ecx 
        jae        zero_value__hla_1473
        cmpl       $32, %ecx 
        jae        shr_high__hla_1475
        mov        4(%ebx), %edx 
        mov        (%ebx), %eax 
        shrd       %cl, %edx, %eax 
        shrl       %cl, %edx 
        mov        %eax, (%ebx) 
        mov        %edx, 4(%ebx) 
        jmp        calculationLoop__hla_1416

shr_high__hla_1475:
        subb       $32, %cl 
        mov        4(%ebx), %eax 
        shrl       %cl, %eax 
        mov        %eax, (%ebx) 
        movl       $0, 4(%ebx) 
        jmp        calculationLoop__hla_1416

zero_value__hla_1473:
        movl       $0, (%ebx) 
        movl       $0, 4(%ebx) 
        jmp        calculationLoop__hla_1416

calculate_not__hla_1425:
        cmpw       $0, 8(%edi) 
        jne        invalid_expression__hla_579
        cmpb       $0, 12(%edi) 
        je         not_ok__hla_1476
        cmpl       $0, error_line__hla_84 
        jne        not_ok__hla_1476
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

not_ok__hla_1476:
        cmpb       $1, value_size__hla_124 
        je         not_byte__hla_1477
        cmpb       $2, value_size__hla_124 
        je         not_word__hla_1478
        cmpb       $4, value_size__hla_124 
        je         not_dword__hla_1479
        cmpb       $6, value_size__hla_124 
        je         not_pword__hla_1480

not_qword__hla_1481:
        notl       (%edi) 
        notl       4(%edi) 
        addl       $20, %edi 
        jmp        calculationLoop__hla_1416

not_byte__hla_1477:
        cmpl       $0, 4(%edi) 
        jne        not_qword__hla_1481
        cmpw       $0, 2(%edi) 
        jne        not_qword__hla_1481
        cmpb       $0, 1(%edi) 
        jne        not_qword__hla_1481
        notb       (%edi) 
        addl       $20, %edi 
        jmp        calculationLoop__hla_1416

not_word__hla_1478:
        cmpl       $0, 4(%edi) 
        jne        not_qword__hla_1481
        cmpw       $0, 2(%edi) 
        jne        not_qword__hla_1481
        notw       (%edi) 
        addl       $20, %edi 
        jmp        calculationLoop__hla_1416

not_dword__hla_1479:
        cmpl       $0, 4(%edi) 
        jne        not_qword__hla_1481
        notl       (%edi) 
        addl       $20, %edi 
        jmp        calculationLoop__hla_1416

not_pword__hla_1480:
        cmpw       $0, 6(%edi) 
        jne        not_qword__hla_1481
        notl       (%edi) 
        notw       4(%edi) 
        addl       $20, %edi 
        jmp        calculationLoop__hla_1416

calculate_neg__hla_1426:
        cmpw       $0, 8(%edi) 
        jne        invalid_expression__hla_579
        cmpb       $0, 12(%edi) 
        je         neg_ok__hla_1482
        cmpl       $0, error_line__hla_84 
        jne        neg_ok__hla_1482
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

neg_ok__hla_1482:
        mov        (%edi), %eax 
        mov        4(%edi), %edx 
        movl       $0, (%edi) 
        movl       $0, 4(%edi) 
        subl       %eax, (%edi) 
        sbbl       %edx, 4(%edi) 
        addl       $20, %edi 
        jmp        calculationLoop__hla_1416

calculate_rva__hla_1424:
        cmpw       $0, 8(%edi) 
        jne        invalid_expression__hla_579
        cmpb       $5, output_format__hla_117 
        je         calculate_gotoff__hla_1483
        cmpb       $3, output_format__hla_117 
        jne        invalid_expression__hla_579
        testl      $8, format_flags__hla_94 
        jnz        pe64_rva__hla_1484
        cmpb       $2, 12(%edi) 
        je         rva_ok__hla_1485
        cmpl       $0, error_line__hla_84 
        jne        rva_ok__hla_1485
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

rva_ok__hla_1485:
        movb       $0, 12(%edi) 
        mov        code_start__hla_55, %eax 
        mov        52(%eax), %eax 
        cdq
        subl       %eax, (%edi) 
        sbbl       %edx, 4(%edi) 
        addl       $20, %edi 
        jmp        calculationLoop__hla_1416

pe64_rva__hla_1484:
        cmpb       $4, 12(%edi) 
        je         pe64_rva_ok__hla_1486
        cmpl       $0, error_line__hla_84 
        jne        pe64_rva_ok__hla_1486
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

pe64_rva_ok__hla_1486:
        movb       $0, 12(%edi) 
        mov        code_start__hla_55, %eax 
        mov        52(%eax), %edx 
        mov        48(%eax), %eax 
        subl       %eax, (%edi) 
        sbbl       %edx, 4(%edi) 
        addl       $20, %edi 
        jmp        calculationLoop__hla_1416

calculate_gotoff__hla_1483:
        testl      $9, format_flags__hla_94 
        jnz        invalid_expression__hla_579
        cmpb       $2, 12(%edi) 
        je         gotoff_ok__hla_1487
        cmpl       $0, error_line__hla_84 
        jne        pe64_rva_ok__hla_1486
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

gotoff_ok__hla_1487:
        movb       $5, 12(%edi) 
        addl       $20, %edi 
        jmp        calculationLoop__hla_1416

div_64__hla_1468:
        xorl       %ebx, %ebx 
        cmpl       $0, (%edi) 
        jne        divider_ok__hla_1488
        cmpl       $0, 4(%edi) 
        jne        divider_ok__hla_1488
        cmpb       $0, next_pass_needed__hla_115 
        je         value_out_of_range__hla_607
        jmp        div_done__hla_1489

divider_ok__hla_1488:
        bt         $31, 4(%esi) 
        jnc        div_first_sign_ok__hla_1490
        notl       (%esi) 
        notl       4(%esi) 
        addl       $1, (%esi) 
        adcl       $0, 4(%esi) 
        notw       %bx 

div_first_sign_ok__hla_1490:
        bt         $31, 4(%edi) 
        jnc        div_second_sign_ok__hla_1491
        notl       (%edi) 
        notl       4(%edi) 
        addl       $1, (%edi) 
        adcl       $0, 4(%edi) 
        notb       %bl 

div_second_sign_ok__hla_1491:
        cmpl       $0, 4(%edi) 
        jne        div_high__hla_1492
        mov        (%edi), %ecx 
        mov        4(%esi), %eax 
        xorl       %edx, %edx 
        divl       %ecx 
        mov        %eax, 4(%esi) 
        mov        (%esi), %eax 
        divl       %ecx 
        mov        %eax, (%esi) 
        movl       %edx, %eax 
        xorl       %edx, %edx 
        jmp        div_done__hla_1489

div_high__hla_1492:
        mov        4(%esi), %eax 
        xorl       %edx, %edx 
        divl       4(%edi) 
        mov        (%esi), %ebx 
        mov        %eax, (%esi) 
        movl       $0, 4(%esi) 
        movl       %edx, %ecx 
        mull       (%edi) 

div_high_loop__hla_1493:
        cmpl       %edx, %ecx 
        ja         div_high_done__hla_1494
        jb         div_high_large_correction__hla_1495
        cmpl       %eax, %ebx 
        jae        div_high_done__hla_1494

div_high_correction__hla_1496:
        decl       (%esi) 
        subl       (%edi), %eax 
        sbbl       4(%edi), %edx 
        jnc        div_high_loop__hla_1493

div_high_done__hla_1494:
        subl       %eax, %ebx 
        sbbl       %edx, %ecx 
        movl       %ecx, %edx 
        movl       %ebx, %eax 
        ret

div_high_large_correction__hla_1495:
        pushl      %eax 
        pushl      %edx 
        movl       %edx, %eax 
        subl       %ecx, %eax 
        xorl       %edx, %edx 
        divl       4(%edi) 
        shrl       $1, %eax 
        jz         div_high_small_correction__hla_1497
        subl       %eax, (%esi) 
        pushl      %eax 
        mull       4(%edi) 
        subl       %eax, 4(%esp) 
        popl       %eax 
        mull       (%edi) 
        subl       %eax, 4(%esp) 
        sbbl       %edx, (%esp) 
        popl       %edx 
        popl       %eax 
        jmp        div_high_loop__hla_1493

div_high_small_correction__hla_1497:
        popl       %edx 
        popl       %eax 
        jmp        div_high_correction__hla_1496

div_done__hla_1489:
        orb        %bh, %bh 
        jz         remainder_ok__hla_1498
        notl       %eax 
        notl       %edx 
        addl       $1, %eax 
        adcl       $0, %edx 

remainder_ok__hla_1498:
        orb        %bl, %bl 
        jz         div_ok__hla_1499
        notl       (%esi) 
        notl       4(%esi) 
        addl       $1, (%esi) 
        adcl       $0, 4(%esi) 

div_ok__hla_1499:
        ret
xcalculation_loop__hla_1415:

/* procedure _05dd__p____hla_1505 */

_05dd__p____hla_1505:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "calculate_expression"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_05dd__p____hla_1505:

/* procedure calculate_expression__hla_1507 */

calculate_expression__hla_1507:
        mov        %edi, current_offset__hla_89 
        movb       $0, value_undefined__hla_129 
        cmpb       $0, (%esi) 
        je         get_string_value__hla_1508
        cmpb       $46, (%esi) 
        je         convert_fp__hla_1509
        jmp        calculation_loop__hla_1415

convert_fp__hla_1509:
        incl       %esi 
        movw       $0, 8(%edi) 
        movb       $0, 12(%edi) 
        mov        value_size__hla_124, %al 
        cmpb       $4, %al 
        je         convert_fp_dword__hla_1510
        cmpb       $8, %al 
        je         convert_fp_qword__hla_1511
        jmp        invalid_value__hla_586

convert_fp_dword__hla_1510:
        xorl       %eax, %eax 
        cmpw       $32768, 8(%esi) 
        je         fp_dword_store__hla_1512
        mov        8(%esi), %bx 
        mov        4(%esi), %eax 
        shll       $1, %eax 
        shrl       $9, %eax 
        jnc        fp_dword_ok__hla_1513
        incl       %eax 
        bt         $23, %eax 
        jnc        fp_dword_ok__hla_1513
        andl       $8388607, %eax 
        incw       %bx 
        shrl       $1, %eax 

fp_dword_ok__hla_1513:
        addw       $127, %bx 
        cmpw       $256, %bx 
        jae        value_out_of_range__hla_607
        shll       $23, %ebx 
        orl        %ebx, %eax 

fp_dword_store__hla_1512:
        mov        11(%esi), %bl 
        shll       $31, %ebx 
        orl        %ebx, %eax 
        mov        %eax, (%edi) 
        xorl       %eax, %eax 
        mov        %eax, 4(%edi) 
        addl       $13, %esi 
        ret

convert_fp_qword__hla_1511:
        xorl       %eax, %eax 
        xorl       %edx, %edx 
        cmpw       $32768, 8(%esi) 
        je         fp_qword_store__hla_1514
        mov        8(%esi), %bx 
        mov        (%esi), %eax 
        mov        4(%esi), %edx 
        addl       %eax, %eax 
        adcl       %edx, %edx 
        movl       %edx, %ecx 
        shrl       $12, %edx 
        shrd       $12, %ecx, %eax 
        jnc        fp_qword_ok__hla_1515
        addl       $1, %eax 
        adcl       $0, %edx 
        bt         $20, %edx 
        jnc        fp_qword_ok__hla_1515
        andl       $1048575, %edx 
        incw       %bx 
        shrl       $1, %edx 
        rcrl       $1, %eax 

fp_qword_ok__hla_1515:
        addw       $1023, %bx 
        cmpw       $2048, %bx 
        jae        value_out_of_range__hla_607
        shll       $20, %ebx 
        orl        %ebx, %edx 

fp_qword_store__hla_1514:
        mov        11(%esi), %bl 
        shll       $31, %ebx 
        orl        %ebx, %edx 
        mov        %eax, (%edi) 
        mov        %edx, 4(%edi) 
        addl       $13, %esi 
        ret

get_string_value__hla_1508:
        incl       %esi 
        lodsl
        movl       %eax, %ecx 
        cmpl       $8, %ecx 
        ja         value_out_of_range__hla_607
        movl       %edi, %edx 
        xorl       %eax, %eax 
        stosl
        stosl
        movl       %edx, %edi 
        rep movsb
        movl       %edx, %edi 
        incl       %esi 
        movw       $0, 8(%edi) 
        movb       $0, 12(%edi) 
        ret
xcalculate_expression__hla_1507:

/* procedure _05ed__p____hla_1521 */

_05ed__p____hla_1521:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_byte_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_05ed__p____hla_1521:

/* procedure get_byte_value__hla_1523 */

get_byte_value__hla_1523:
        movb       $1, value_size__hla_124 
        movb       $-1, size_override__hla_125 
        call       calculate_expression__hla_1507
        mov        16(%edi), %eax 
        mov        %eax, symbol_identifier__hla_91 
        movb       $0, value_type__hla_130 
        cmpw       $0, 8(%edi) 
        jne        invalid_value__hla_586
        cmpb       $0, 12(%edi) 
        je         check_byte_value__hla_1524
        cmpl       $0, error_line__hla_84 
        jne        check_byte_value__hla_1524
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

check_byte_value__hla_1524:
        mov        (%edi), %eax 
        mov        4(%edi), %edx 
        orl        %edx, %edx 
        jz         byte_positive__hla_1525
        cmpl       $-1, %edx 
        jne        range_exceeded__hla_1526
        cmpl       $-128, %eax 
        jb         range_exceeded__hla_1526
        ret

byte_positive__hla_1525:
        cmpl       $256, %eax 
        jae        range_exceeded__hla_1526

return_byte_value__hla_1527:
        ret

range_exceeded__hla_1526:
        xorl       %eax, %eax 
        xorl       %edx, %edx 
        cmpl       $0, error_line__hla_84 
        jne        return_byte_value__hla_1527
        mov        current_line__hla_60, %ecx 
        mov        %ecx, error_line__hla_84 
        movl       $value_out_of_range__hla_607, error__hla_85 
        ret
xget_byte_value__hla_1523:

/* procedure _05f9__p____hla_1533 */

_05f9__p____hla_1533:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_word_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_05f9__p____hla_1533:

/* procedure get_word_value__hla_1535 */

get_word_value__hla_1535:
        movb       $2, value_size__hla_124 
        movb       $-1, size_override__hla_125 
        call       calculate_expression__hla_1507
        mov        16(%edi), %eax 
        mov        %eax, symbol_identifier__hla_91 
        cmpw       $0, 8(%edi) 
        jne        invalid_value__hla_586
        mov        12(%edi), %al 
        mov        %al, value_type__hla_130 
        cmpb       $2, %al 
        jb         check_word_value__hla_1536
        cmpl       $0, error_line__hla_84 
        jne        check_word_value__hla_1536
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

check_word_value__hla_1536:
        mov        (%edi), %eax 
        mov        4(%edi), %edx 
        orl        %edx, %edx 
        jz         word_positive__hla_1537
        cmpl       $-1, %edx 
        jne        range_exceeded__hla_1538
        cmpl       $-32768, %eax 
        jb         range_exceeded__hla_1538
        ret

word_positive__hla_1537:
        cmpl       $65536, %eax 
        jae        range_exceeded__hla_1538
        ret

range_exceeded__hla_1538:
        xorl       %eax, %eax 
        xorl       %edx, %edx 
        cmpl       $0, error_line__hla_84 
        jne        done__hla_1539
        mov        current_line__hla_60, %ecx 
        mov        %ecx, error_line__hla_84 
        movl       $value_out_of_range__hla_607, error__hla_85 

done__hla_1539:
        ret
xget_word_value__hla_1535:

/* procedure _0605__p____hla_1545 */

_0605__p____hla_1545:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_dword_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0605__p____hla_1545:

/* procedure get_dword_value__hla_1547 */

get_dword_value__hla_1547:
        movb       $4, value_size__hla_124 
        movb       $-1, size_override__hla_125 
        call       calculate_expression__hla_1507
        mov        16(%edi), %eax 
        mov        %eax, symbol_identifier__hla_91 
        cmpw       $0, 8(%edi) 
        jne        invalid_value__hla_586
        mov        12(%edi), %al 
        mov        %al, value_type__hla_130 
        cmpb       $4, %al 
        jne        check_dword_value__hla_1548
        cmpl       $0, error_line__hla_84 
        jne        check_dword_value__hla_1548
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

check_dword_value__hla_1548:
        mov        (%edi), %eax 
        mov        4(%edi), %edx 
        orl        %edx, %edx 
        jz         dword_positive__hla_1549
        cmpl       $-1, %edx 
        jne        range_exceeded__hla_1550
        bt         $31, %eax 
        jnc        range_exceeded__hla_1550

dword_positive__hla_1549:
        ret

range_exceeded__hla_1550:
        xorl       %eax, %eax 
        xorl       %edx, %edx 
        cmpl       $0, error_line__hla_84 
        jne        done__hla_1551
        mov        current_line__hla_60, %ecx 
        mov        %ecx, error_line__hla_84 
        movl       $value_out_of_range__hla_607, error__hla_85 

done__hla_1551:
        ret
xget_dword_value__hla_1547:

/* procedure _0611__p____hla_1557 */

_0611__p____hla_1557:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_pword_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0611__p____hla_1557:

/* procedure get_pword_value__hla_1559 */

get_pword_value__hla_1559:
        movb       $6, value_size__hla_124 
        movb       $-1, size_override__hla_125 
        call       calculate_expression__hla_1507
        mov        16(%edi), %eax 
        mov        %eax, symbol_identifier__hla_91 
        cmpw       $0, 8(%edi) 
        jne        invalid_value__hla_586
        mov        12(%edi), %al 
        mov        %al, value_type__hla_130 
        cmpb       $4, %al 
        jne        check_pword_value__hla_1560
        cmpl       $0, error_line__hla_84 
        jne        check_pword_value__hla_1560
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_use_of_symbol__hla_585, error__hla_85 

check_pword_value__hla_1560:
        mov        (%edi), %eax 
        mov        4(%edi), %edx 
        cmpl       $65536, %edx 
        jge        range_exceeded__hla_1561
        cmpl       $-32768, %edx 
        jl         range_exceeded__hla_1561
        ret

range_exceeded__hla_1561:
        xorl       %eax, %eax 
        xorl       %edx, %edx 
        cmpl       $0, error_line__hla_84 
        jne        done__hla_1562
        mov        current_line__hla_60, %ecx 
        mov        %ecx, error_line__hla_84 
        movl       $value_out_of_range__hla_607, error__hla_85 

done__hla_1562:
        ret
xget_pword_value__hla_1559:

/* procedure _061c__p____hla_1568 */

_061c__p____hla_1568:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_qword_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_061c__p____hla_1568:

/* procedure get_qword_value__hla_1570 */

get_qword_value__hla_1570:
        movb       $8, value_size__hla_124 
        movb       $-1, size_override__hla_125 
        call       calculate_expression__hla_1507
        mov        16(%edi), %eax 
        mov        %eax, symbol_identifier__hla_91 
        cmpw       $0, 8(%edi) 
        jne        invalid_value__hla_586
        mov        12(%edi), %al 
        mov        %al, value_type__hla_130 

check_qword_value__hla_1571:
        mov        (%edi), %eax 
        mov        4(%edi), %edx 
        ret
xget_qword_value__hla_1570:

/* procedure _0625__p____hla_1577 */

_0625__p____hla_1577:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_address_register"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0625__p____hla_1577:

/* procedure get_address_register__hla_1579 */

get_address_register__hla_1579:
        orb        %al, %al 
        jz         address_register_ok__hla_1580
        cmpb       $1, %dl 
        jne        scaled_register__hla_1581
        orb        %bh, %bh 
        jnz        scaled_register__hla_1581
        movb       %al, %bh 

address_register_ok__hla_1580:
        ret

scaled_register__hla_1581:
        orb        %bl, %bl 
        jnz        invalid_address__hla_576
        movb       %al, %bl 
        movb       %dl, %cl 
        jmp        address_register_ok__hla_1580

range_exceeded__hla_1582:
        xorl       %eax, %eax 
        xorl       %edx, %edx 
        cmpl       $0, error_line__hla_84 
        jne        done__hla_1583
        mov        current_line__hla_60, %ecx 
        mov        %ecx, error_line__hla_84 
        movl       $value_out_of_range__hla_607, error__hla_85 

done__hla_1583:
        ret
xget_address_register__hla_1579:

/* procedure _0631__p____hla_1589 */

_0631__p____hla_1589:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_size_operator"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0631__p____hla_1589:

/* procedure get_size_operator__hla_1591 */

get_size_operator__hla_1591:
        xorb       %ah, %ah 
        cmpb       $17, %al 
        jne        no_size_operator__hla_1592
        movb       $1, size_declared__hla_128 
        lodsw
        xchgb      %ah, %al 
        movb       $1, size_override__hla_125 
        cmpb       operand_size__hla_127, %ah 
        je         size_operator_ok__hla_1593
        cmpb       $0, operand_size__hla_127 
        jne        operand_sizes_do_not_match__hla_591
        mov        %ah, operand_size__hla_127 

size_operator_ok__hla_1593:
        ret

no_size_operator__hla_1592:
        movb       $0, size_declared__hla_128 
        cmpb       $91, %al 
        jne        size_operator_ok__hla_1593
        movb       $0, size_override__hla_125 
        ret
xget_size_operator__hla_1591:

/* procedure _063b__p____hla_1599 */

_063b__p____hla_1599:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_063b__p____hla_1599:

/* procedure get_value__hla_1601 */

get_value__hla_1601:
        movb       $0, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        jne        invalid_value__hla_586
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         value_byte__hla_1602
        cmpb       $2, %al 
        je         value_word__hla_1603
        cmpb       $4, %al 
        je         value_dword__hla_1604
        cmpb       $6, %al 
        je         value_pword__hla_1605
        cmpb       $8, %al 
        je         value_qword__hla_1606
        orb        %al, %al 
        jnz        invalid_value__hla_586

value_qword__hla_1606:
        call       get_qword_value__hla_1570
        ret

value_pword__hla_1605:
        call       get_pword_value__hla_1559
        movzwl     %dx, %edx 
        ret

value_dword__hla_1604:
        call       get_dword_value__hla_1547
        xorl       %edx, %edx 
        ret

value_word__hla_1603:
        call       get_word_value__hla_1535
        xorl       %edx, %edx 
        movzwl     %ax, %eax 
        ret

value_byte__hla_1602:
        call       get_byte_value__hla_1523
        xorl       %edx, %edx 
        movzbl     %al, %eax 
        ret
xget_value__hla_1601:

/* procedure _0648__p____hla_1612 */

_0648__p____hla_1612:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_address_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0648__p____hla_1612:

/* procedure get_address_value__hla_1614 */

get_address_value__hla_1614:
        movb       $0, address_size__hla_126 
        movb       $8, value_size__hla_124 
xget_address_value__hla_1614:

/* procedure calculate_address__hla_1616 */

calculate_address__hla_1616:
        cmpb       $46, (%esi) 
        je         invalid_address__hla_576
        call       calculate_expression__hla_1507
        mov        16(%edi), %eax 
        mov        %eax, address_symbol__hla_92 
        mov        12(%edi), %al 
        mov        %al, value_type__hla_130 
        cmpb       $5, %al 
        je         gotoff_address__hla_1617
        testb      $1, %al 
        jnz        invalid_use_of_symbol__hla_585
        orb        %al, %al 
        jz         address_size_ok__hla_1618
        shlb       $5, %al 
        jmp        address_symbol_ok__hla_1619

gotoff_address__hla_1617:
        mov        $64, %al 

address_symbol_ok__hla_1619:
        mov        address_size__hla_126, %ah 
        orb        %al, address_size__hla_126 
        shrb       $4, %al 
        orb        %ah, %ah 
        jz         address_size_ok__hla_1618
        cmpb       %ah, %al 
        jne        address_sizes_do_not_agree__hla_567

address_size_ok__hla_1618:
        xorw       %bx, %bx 
        xorb       %cl, %cl 
        mov        address_size__hla_126, %ch 
        cmpw       $0, 8(%edi) 
        je         check_immediate_address__hla_1620
        mov        8(%edi), %al 
        mov        10(%edi), %dl 
        call       get_address_register__hla_1579
        mov        9(%edi), %al 
        mov        11(%edi), %dl 
        call       get_address_register__hla_1579
        movw       %bx, %ax 
        shrb       $4, %ah 
        shrb       $4, %al 
        orb        %bh, %bh 
        jz         check_address_registers__hla_1621
        orb        %bl, %bl 
        jz         check_address_registers__hla_1621
        cmpb       %ah, %al 
        jne        invalid_address__hla_576

check_address_registers__hla_1621:
        orb        %ah, %al 
        cmpb       $4, %al 
        je         sib_allowed__hla_1622
        cmpb       $8, %al 
        je         sib_allowed__hla_1622
        orb        %cl, %cl 
        jz         check_word_value__hla_1623
        cmpb       $1, %cl 
        je         check_word_value__hla_1623
        jmp        invalid_address__hla_576

check_word_value__hla_1623:
        mov        (%edi), %eax 
        mov        4(%edi), %edx 
        orl        %edx, %edx 
        jz         word_positive__hla_1624
        cmpl       $-1, %edx 
        jne        range_exceeded__hla_1625
        cmpl       $-32768, %eax 
        jb         range_exceeded__hla_1625
        ret

word_positive__hla_1624:
        cmpl       $65536, %eax 
        jae        range_exceeded__hla_1625
        ret

sib_allowed__hla_1622:
        orb        %bh, %bh 
        jnz        check_index_scale__hla_1626
        cmpb       $2, %cl 
        je         special_index_scale__hla_1627
        cmpb       $3, %cl 
        je         special_index_scale__hla_1627
        cmpb       $5, %cl 
        je         special_index_scale__hla_1627
        cmpb       $9, %cl 
        je         special_index_scale__hla_1627

check_index_scale__hla_1626:
        orb        %cl, %cl 
        jz         address_registers_ok__hla_1628
        cmpb       $1, %cl 
        je         address_registers_ok__hla_1628
        cmpb       $2, %cl 
        je         address_registers_ok__hla_1628
        cmpb       $4, %cl 
        je         address_registers_ok__hla_1628
        cmpb       $8, %cl 
        je         address_registers_ok__hla_1628
        jmp        invalid_address__hla_576

special_index_scale__hla_1627:
        movb       %bl, %bh 
        decb       %cl 

address_registers_ok__hla_1628:
        mov        (%edi), %eax 
        mov        4(%edi), %edx 
        orl        %edx, %edx 
        jz         dword_positive__hla_1629
        cmpl       $-1, %edx 
        jne        range_exceeded__hla_1625
        bt         $31, %eax 
        jnc        range_exceeded__hla_1625

dword_positive__hla_1629:
        ret

check_immediate_address__hla_1620:
        cmpb       $64, code_type__hla_118 
        jne        address_registers_ok__hla_1628
        cmpb       $4, address_size__hla_126 
        je         address_registers_ok__hla_1628

check_qword_value__hla_1630:
        mov        (%edi), %eax 
        mov        4(%edi), %edx 
        ret

range_exceeded__hla_1625:
        xorl       %eax, %eax 
        xorl       %edx, %edx 
        cmpl       $0, error_line__hla_84 
        jne        done__hla_1631
        mov        current_line__hla_60, %ecx 
        mov        %ecx, error_line__hla_84 
        movl       $value_out_of_range__hla_607, error__hla_85 

done__hla_1631:
        ret
xcalculate_address__hla_1616:

/* procedure _0661__p____hla_1637 */

_0661__p____hla_1637:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_relative_offset"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0661__p____hla_1637:

/* procedure get_relative_offset__hla_1639 */

get_relative_offset__hla_1639:
        movb       $4, value_size__hla_124 
        movb       $-1, size_override__hla_125 
        call       calculate_expression__hla_1507
xget_relative_offset__hla_1639:

/* procedure calculate_relative_offset__hla_1641 */

calculate_relative_offset__hla_1641:
        pushl      %esi 
        addl       $20, %edi 
        mov        display_buffer__hla_86, %esi 
        subl       $7, %esi 
        lea        -20(%esi), %eax 
        cmpl       %edi, %eax 
        jb         out_of_memory__hla_593
        movb       $17, (%esi) 
        xorl       %eax, %eax 
        mov        %eax, 1(%esi) 
        movw       $41, 5(%esi) 
        call       calculation_loop__hla_1415
        popl       %esi 
        cmpw       $0, 8(%edi) 
        jne        invalid_value__hla_586
        mov        12(%edi), %al 
        mov        %al, value_type__hla_130 
        mov        16(%edi), %eax 
        mov        %eax, symbol_identifier__hla_91 
        mov        (%edi), %eax 
        mov        4(%edi), %edx 
        orl        %edx, %edx 
        jz         offset_positive__hla_1644
        cmpl       $-1, %edx 
        jne        range_exceeded__hla_1645
        bt         $31, %eax 
        jnc        range_exceeded__hla_1645
        ret

offset_positive__hla_1644:
        bt         $31, %eax 
        jc         range_exceeded__hla_1645
        ret

range_exceeded__hla_1645:
        xorl       %eax, %eax 
        xorl       %edx, %edx 
        cmpl       $0, error_line__hla_84 
        jne        done__hla_1646
        mov        current_line__hla_60, %ecx 
        mov        %ecx, error_line__hla_84 
        movl       $value_out_of_range__hla_607, error__hla_85 

done__hla_1646:
        ret
xcalculate_relative_offset__hla_1641:

/* procedure _0670__p____hla_1652 */

_0670__p____hla_1652:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "skip_symbol"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0670__p____hla_1652:

/* procedure skip_symbol__hla_1654 */

skip_symbol__hla_1654:
        lodsb
        orb        %al, %al 
        jz         nothing_to_skip__hla_1655
        cmpb       $15, %al 
        je         nothing_to_skip__hla_1655
        cmpb       $1, %al 
        je         skip_instruction__hla_1656
        cmpb       $2, %al 
        je         skip_label__hla_1657
        cmpb       $3, %al 
        je         skip_label__hla_1657
        cmpb       $32, %al 
        jb         skip_assembler_symbol__hla_1658
        cmpb       $40, %al 
        je         skip_expression__hla_1659
        cmpb       $91, %al 
        je         skip_address__hla_1660

skip_done__hla_1661:
        clc
        ret

skip_label__hla_1657:
        addl       $2, %esi 

skip_instruction__hla_1656:
        addl       $2, %esi 

skip_assembler_symbol__hla_1658:
        incl       %esi 
        jmp        skip_done__hla_1661

skip_address__hla_1660:
        mov        (%esi), %al 
        andb       $240, %al 
        cmpb       $96, %al 
        jb         skip_expression__hla_1659
        cmpb       $112, %al 
        ja         skip_expression__hla_1659
        incl       %esi 
        jmp        skip_address__hla_1660

nothing_to_skip__hla_1655:
        decl       %esi 
        stc
        ret

skip_expression__hla_1659:
xskip_symbol__hla_1654:

/* procedure skip_expression__hla_1663 */

skip_expression__hla_1663:

skipExpression__hla_1664:
        lodsb
        orb        %al, %al 
        jz         skip_string__hla_1665
        cmpb       $46, %al 
        je         skip_fp_value__hla_1666
        cmpb       $41, %al 
        je         skip_done__hla_1667
        cmpb       $93, %al 
        je         skip_done__hla_1667
        cmpb       $33, %al 
        je         skipExpression__hla_1664
        cmpb       $15, %al 
        je         skipExpression__hla_1664
        cmpb       $16, %al 
        je         skip_register__hla_1668
        cmpb       $17, %al 
        je         skip_label_value__hla_1669
        cmpb       $128, %al 
        jae        skipExpression__hla_1664
        movzbl     %al, %eax 
        addl       %eax, %esi 
        jmp        skipExpression__hla_1664

skip_label_value__hla_1669:
        addl       $3, %esi 

skip_register__hla_1668:
        incl       %esi 
        jmp        skipExpression__hla_1664

skip_fp_value__hla_1666:
        addl       $12, %esi 
        jmp        skip_done__hla_1667

skip_string__hla_1665:
        lodsl
        addl       %eax, %esi 
        incl       %esi 

skip_done__hla_1667:
        clc
        ret
xskip_expression__hla_1663:

/* procedure _0687__p____hla_1675 */

_0687__p____hla_1675:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "preevaluate_logical_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0687__p____hla_1675:

/* procedure preevaluate_logical_value__hla_1677 */

preevaluate_logical_value__hla_1677:
        movl       %edi, %ebp 

preevaluate_negation__hla_1678:
        cmpb       $126, (%esi) 
        jne        preevaluate_negation_ok__hla_1679
        movsb
        jmp        preevaluate_negation__hla_1678

preevaluate_negation_ok__hla_1679:
        movl       %esi, %ebx 
        xorl       %edx, %edx 
        cmpb       $123, (%esi) 
        jne        find_logical_value_boundaries__hla_1680
        movsb
        pushl      %ebp 
        call       preevaluate_logical_expression
        popl       %ebp 
        cmpb       $255, %al 
        je         invalid_logical_value__hla_1681
        cmpb       $125, (%esi) 
        jne        invalid_logical_value__hla_1681
        orb        %al, %al 
        jnz        preevaluated_expression_value__hla_1682
        movsb
        ret

preevaluated_expression_value__hla_1682:
        incl       %esi 
        lea        -1(%edi), %edx 
        subl       %ebp, %edx 
        testl      $1, %edx 
        jz         expression_negation_ok__hla_1683
        xorb       $1, %al 

expression_negation_ok__hla_1683:
        movl       %ebp, %edi 
        ret

invalid_logical_value__hla_1681:
        movl       %ebp, %edi 
        mov        $255, %al 
        ret

find_logical_value_boundaries__hla_1680:
        mov        (%esi), %al 
        orb        %al, %al 
        jz         logical_value_boundaries_found__hla_1684
        cmpb       $125, %al 
        je         logical_value_boundaries_found__hla_1684
        cmpb       $124, %al 
        je         logical_value_boundaries_found__hla_1684
        cmpb       $38, %al 
        je         logical_value_boundaries_found__hla_1684
        orl        %edx, %edx 
        jnz        next_symbol_in_logical_value__hla_1685
        cmpb       $240, %al 
        je         preevaluable_logical_operator__hla_1686
        cmpb       $247, %al 
        je         preevaluable_logical_operator__hla_1686
        cmpb       $246, %al 
        jne        next_symbol_in_logical_value__hla_1685

preevaluable_logical_operator__hla_1686:
        movl       %esi, %edx 

next_symbol_in_logical_value__hla_1685:
        call       skip_symbol__hla_1654
        jmp        find_logical_value_boundaries__hla_1680

logical_value_boundaries_found__hla_1684:
        orl        %edx, %edx 
        jz         non_preevaluable_logical_value__hla_1687
        mov        (%edx), %al 
        cmpb       $240, %al 
        je         compare_symbols__hla_1688
        cmpb       $247, %al 
        je         compare_symbol_types__hla_1689
        cmpb       $246, %al 
        je         scan_symbols_list__hla_1690

non_preevaluable_logical_value__hla_1687:
        movl       %esi, %ecx 
        movl       %ebx, %esi 
        subl       %esi, %ecx 
        jz         invalid_logical_value__hla_1681
        cmpl       %edi, %esi 
        je         leave_logical_value_intact__hla_1691
        rep movsb
        xorb       %al, %al 
        ret

leave_logical_value_intact__hla_1691:
        addl       %ecx, %edi 
        addl       %ecx, %esi 
        xorb       %al, %al 
        ret

scan_symbols_list__hla_1690:
        pushl      %edi 
        pushl      %esi 
        lea        1(%edx), %esi 
        subl       %ebx, %edx 
        lodsb
        cmpb       $60, %al 
        jne        invalid_symbols_list__hla_1692

get_next_from_list__hla_1693:
        movl       %esi, %edi 

get_from_list__hla_1694:
        cmpb       $44, (%esi) 
        je         compare_in_list__hla_1695
        cmpb       $62, (%esi) 
        je         compare_in_list__hla_1695
        cmpl       (%esp), %esi 
        jae        invalid_symbols_list__hla_1692
        call       skip_symbol__hla_1654
        jmp        get_from_list__hla_1694

compare_in_list__hla_1695:
        movl       %esi, %ecx 
        subl       %edi, %ecx 
        cmpl       %edx, %ecx 
        jne        not_equal_length_in_list__hla_1696
        movl       %ebx, %esi 
        repe cmpsb
        movl       %edi, %esi 
        jne        not_equal_in_list__hla_1697

skip_rest_of_list__hla_1698:
        cmpb       $62, (%esi) 
        je         check_list_end__hla_1699
        cmpl       (%esp), %esi 
        jae        invalid_symbols_list__hla_1692
        call       skip_symbol__hla_1654
        jmp        skip_rest_of_list__hla_1698

check_list_end__hla_1699:
        incl       %esi 
        cmpl       (%esp), %esi 
        jne        invalid_symbols_list__hla_1692
        popl       %esi 
        popl       %edi 
        jmp        preevaluated_true__hla_1700

not_equal_in_list__hla_1697:
        addl       %ecx, %esi 

not_equal_length_in_list__hla_1696:
        lodsb
        cmpb       $44, %al 
        je         get_next_from_list__hla_1693
        cmpl       (%esp), %esi 
        jne        invalid_symbols_list__hla_1692
        popl       %esi 
        popl       %edi 
        jmp        preevaluated_false__hla_1701

invalid_symbols_list__hla_1692:
        popl       %esi 
        popl       %edi 
        jmp        invalid_logical_value__hla_1681

compare_symbols__hla_1688:
        lea        -1(%esi), %ecx 
        subl       %edx, %ecx 
        movl       %edx, %eax 
        subl       %ebx, %eax 
        cmpl       %eax, %ecx 
        jne        preevaluated_false__hla_1701
        pushl      %esi 
        pushl      %edi 
        movl       %ebx, %esi 
        lea        1(%edx), %edi 
        repe cmpsb
        popl       %edi 
        popl       %esi 
        je         preevaluated_true__hla_1700

preevaluated_false__hla_1701:
        movl       %edi, %eax 
        subl       %ebp, %eax 
        testl      $1, %eax 
        jnz        store_true__hla_1702

store_false__hla_1703:
        movl       %ebp, %edi 
        mov        $48, %al 
        ret

preevaluated_true__hla_1700:
        movl       %edi, %eax 
        subl       %ebp, %eax 
        testl      $1, %eax 
        jnz        store_false__hla_1703

store_true__hla_1702:
        movl       %ebp, %edi 
        mov        $49, %al 
        ret

compare_symbol_types__hla_1689:
        pushl      %esi 
        lea        1(%edx), %esi 

type_comparison__hla_1704:
        cmpl       (%esp), %esi 
        je         types_compared__hla_1705
        mov        (%esi), %al 
        cmpb       (%ebx), %al 
        jne        different_type__hla_1706
        cmpb       $40, %al 
        jne        equal_type__hla_1707
        mov        1(%esi), %al 
        mov        1(%ebx), %ah 
        cmpb       %ah, %al 
        je         equal_type__hla_1707
        orb        %al, %al 
        jz         different_type__hla_1706
        orb        %ah, %ah 
        jz         different_type__hla_1706
        cmpb       $46, %al 
        je         different_type__hla_1706
        cmpb       $46, %ah 
        je         different_type__hla_1706

equal_type__hla_1707:
        call       skip_symbol__hla_1654
        xchgl      %ebx, %esi 
        call       skip_symbol__hla_1654
        xchgl      %ebx, %esi 
        jmp        type_comparison__hla_1704

types_compared__hla_1705:
        popl       %esi 
        cmpb       $247, (%ebx) 
        jne        preevaluated_false__hla_1701
        jmp        preevaluated_true__hla_1700

different_type__hla_1706:
        popl       %esi 
        jmp        preevaluated_false__hla_1701
xpreevaluate_logical_value__hla_1677:

/* procedure _06ad__p____hla_1713 */

_06ad__p____hla_1713:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "skip_logical_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_06ad__p____hla_1713:

/* procedure skip_logical_value__hla_1715 */

skip_logical_value__hla_1715:
        cmpb       $126, (%esi) 
        jne        negation_skipped__hla_1716
        incl       %esi 
        jmp        skip_logical_value__hla_1715

negation_skipped__hla_1716:
        cmpb       $123, (%esi) 
        jne        skip_simple_logical_value__hla_1717
        incl       %esi 

skip_logical_expression__hla_1718:
        call       skip_logical_value__hla_1715
        lodsb
        orb        %al, %al 
        jz         wrongly_structured_logical_expression__hla_1719
        cmpb       $15, %al 
        je         wrongly_structured_logical_expression__hla_1719
        cmpb       $124, %al 
        je         skip_logical_expression__hla_1718
        cmpb       $38, %al 
        je         skip_logical_expression__hla_1718
        cmpb       $125, %al 
        je         logical_value_skipped__hla_1720

wrongly_structured_logical_expression__hla_1719:
        stc
        ret

skip_simple_logical_value__hla_1717:
        mov        (%esi), %al 
        orb        %al, %al 
        jz         logical_value_skipped__hla_1720
        cmpb       $15, %al 
        je         logical_value_skipped__hla_1720
        cmpb       $125, %al 
        je         logical_value_skipped__hla_1720
        cmpb       $124, %al 
        je         logical_value_skipped__hla_1720
        cmpb       $38, %al 
        je         logical_value_skipped__hla_1720
        call       skip_symbol__hla_1654
        jmp        skip_simple_logical_value__hla_1717

logical_value_skipped__hla_1720:
        clc
        ret
xskip_logical_value__hla_1715:

/* procedure _06ba__p____hla_1726 */

_06ba__p____hla_1726:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "preevaluate_logical_expression"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_06ba__p____hla_1726:

/* procedure preevaluate_logical_expression */

preevaluate_logical_expression:
        pushl      %edi 
        call       preevaluate_logical_value__hla_1677

preevaluation_loop__hla_1728:
        cmpb       $255, %al 
        je         invalid_logical_expression__hla_1729
        mov        (%esi), %dl 
        incl       %esi 
        cmpb       $124, %dl 
        je         preevaluate_or__hla_1730
        cmpb       $38, %dl 
        je         preevaluate_and__hla_1731
        cmpb       $125, %dl 
        je         preevaluation_done__hla_1732
        orb        %dl, %dl 
        jnz        invalid_logical_expression__hla_1729

preevaluation_done__hla_1732:
        popl       %edx 
        decl       %esi 
        ret

preevaluate_or__hla_1730:
        cmpb       $49, %al 
        je         quick_true__hla_1733
        cmpb       $48, %al 
        je         leave_only_following__hla_1734
        pushl      %edi 
        movb       %dl, %al 
        stosb
        call       preevaluate_logical_value__hla_1677
        popl       %ebx 
        cmpb       $48, %al 
        je         leave_only_preceding__hla_1735
        cmpb       $49, %al 
        jne        preevaluation_loop__hla_1728
        stosb
        xorb       %al, %al 
        jmp        preevaluation_loop__hla_1728

preevaluate_and__hla_1731:
        cmpb       $48, %al 
        je         quick_false__hla_1736
        cmpb       $49, %al 
        je         leave_only_following__hla_1734
        pushl      %edi 
        movb       %dl, %al 
        stosb
        call       preevaluate_logical_value__hla_1677
        popl       %ebx 
        cmpb       $49, %al 
        je         leave_only_preceding__hla_1735
        cmpb       $48, %al 
        jne        preevaluation_loop__hla_1728
        stosb
        xorb       %al, %al 
        jmp        preevaluation_loop__hla_1728

leave_only_following__hla_1734:
        mov        (%esp), %edi 
        call       preevaluate_logical_value__hla_1677
        jmp        preevaluation_loop__hla_1728

leave_only_preceding__hla_1735:
        movl       %ebx, %edi 
        xorb       %al, %al 
        jmp        preevaluation_loop__hla_1728

quick_true__hla_1733:
        call       skip_logical_value__hla_1715
        jc         invalid_logical_expression__hla_1729
        mov        (%esp), %edi 
        mov        $49, %al 
        jmp        preevaluation_loop__hla_1728

quick_false__hla_1736:
        call       skip_logical_value__hla_1715
        jc         invalid_logical_expression__hla_1729
        mov        (%esp), %edi 
        mov        $48, %al 
        jmp        preevaluation_loop__hla_1728

invalid_logical_expression__hla_1729:
        popl       %edi 
        movl       %edi, %esi 
        mov        $255, %al 
        stosb
        ret
xpreevaluate_logical_expression:

/* procedure _06ca__p____hla_1742 */

_06ca__p____hla_1742:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "calculate_logical_expression"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_06ca__p____hla_1742:

/* procedure calculate_logical_expression__hla_1744 */

calculate_logical_expression__hla_1744:
        call       get_logical_value

logical_loop__hla_1745:
        cmpb       $124, (%esi) 
        je         logical_or__hla_1746
        cmpb       $38, (%esi) 
        je         logical_and__hla_1747
        ret

logical_or__hla_1746:
        incl       %esi 
        orb        %al, %al 
        jnz        logical_value_already_determined__hla_1748
        pushl      %eax 
        call       get_logical_value
        popl       %ebx 
        orb        %bl, %al 
        jmp        logical_loop__hla_1745

logical_and__hla_1747:
        incl       %esi 
        orb        %al, %al 
        jz         logical_value_already_determined__hla_1748
        pushl      %eax 
        call       get_logical_value
        popl       %ebx 
        andb       %bl, %al 
        jmp        logical_loop__hla_1745

logical_value_already_determined__hla_1748:
        pushl      %eax 
        call       skip_logical_value__hla_1715
        jc         invalid_expression__hla_579
        popl       %eax 
        jmp        logical_loop__hla_1745
xcalculate_logical_expression__hla_1744:

/* procedure _06d6__p____hla_1754 */

_06d6__p____hla_1754:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_logical_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_06d6__p____hla_1754:

/* procedure get_logical_value */

get_logical_value:
        xorb       %al, %al 

check_for_negation__hla_1756:
        cmpb       $126, (%esi) 
        jne        negation_ok__hla_1757
        incl       %esi 
        xorb       $-1, %al 
        jmp        check_for_negation__hla_1756

negation_ok__hla_1757:
        pushl      %eax 
        mov        (%esi), %al 
        cmpb       $123, %al 
        je         logical_expression__hla_1758
        cmpb       $255, %al 
        je         invalid_expression__hla_579
        cmpb       $136, %al 
        je         check_for_defined__hla_1759
        cmpb       $137, %al 
        je         check_for_used__hla_1760
        cmpb       $48, %al 
        je         given_false__hla_1761
        cmpb       $49, %al 
        je         given_true__hla_1762
        call       get_value__hla_1601
        mov        value_type__hla_130, %bl 
        pushl      %eax 
        pushl      %edx 
        pushl      %ebx 
        mov        (%esi), %al 
        orb        %al, %al 
        jz         logical_number__hla_1763
        cmpb       $15, %al 
        je         logical_number__hla_1763
        cmpb       $125, %al 
        je         logical_number__hla_1763
        cmpb       $38, %al 
        je         logical_number__hla_1763
        cmpb       $124, %al 
        je         logical_number__hla_1763
        incl       %esi 
        mov        %al, compare_type__hla_131 
        call       get_value__hla_1601
        popl       %ebx 
        cmpb       $0, next_pass_needed__hla_115 
        jne        values_ok__hla_1764
        cmpb       value_type__hla_130, %bl 
        jne        invalid_use_of_symbol__hla_585

values_ok__hla_1764:
        popl       %ecx 
        popl       %ebx 
        cmpb       $61, compare_type__hla_131 
        je         check_equal__hla_1765
        cmpb       $62, compare_type__hla_131 
        je         check_greater__hla_1766
        cmpb       $60, compare_type__hla_131 
        je         check_less__hla_1767
        cmpb       $241, compare_type__hla_131 
        je         check_not_equal__hla_1768
        cmpb       $242, compare_type__hla_131 
        je         check_not_less__hla_1769
        cmpb       $243, compare_type__hla_131 
        je         check_not_greater__hla_1770
        jmp        invalid_expression__hla_579

check_equal__hla_1765:
        cmpl       %ebx, %eax 
        jne        return_false__hla_1771
        cmpl       %ecx, %edx 
        jne        return_false__hla_1771
        jmp        return_true__hla_1772

check_greater__hla_1766:
        cmpl       %ecx, %edx 
        jl         return_true__hla_1772
        jg         return_false__hla_1771
        cmpl       %ebx, %eax 
        jb         return_true__hla_1772
        jae        return_false__hla_1771

check_less__hla_1767:
        cmpl       %ecx, %edx 
        jl         return_false__hla_1771
        jg         return_true__hla_1772
        cmpl       %ebx, %eax 
        jbe        return_false__hla_1771
        ja         return_true__hla_1772

check_not_less__hla_1769:
        cmpl       %ecx, %edx 
        jl         return_true__hla_1772
        jg         return_false__hla_1771
        cmpl       %ebx, %eax 
        jbe        return_true__hla_1772
        ja         return_false__hla_1771

check_not_greater__hla_1770:
        cmpl       %ecx, %edx 
        jl         return_false__hla_1771
        jg         return_true__hla_1772
        cmpl       %ebx, %eax 
        jb         return_false__hla_1771
        jae        return_true__hla_1772

check_not_equal__hla_1768:
        cmpl       %ebx, %eax 
        jne        return_true__hla_1772
        cmpl       %ecx, %edx 
        jne        return_true__hla_1772
        jmp        return_false__hla_1771

logical_number__hla_1763:
        popl       %ebx 
        popl       %edx 
        popl       %eax 
        orb        %bl, %bl 
        jnz        invalid_expression__hla_579
        orl        %edx, %eax 
        jnz        return_true__hla_1772
        jmp        return_false__hla_1771

check_for_defined__hla_1759:
        orb        $-1, %bl 
        lodsw
        cmpb       $40, %ah 
        jne        invalid_expression__hla_579

check_expression__hla_1773:
        lodsb
        orb        %al, %al 
        jz         defined_string__hla_1774
        cmpb       $46, %al 
        je         defined_fp_value__hla_1775
        cmpb       $41, %al 
        je         expression_checked__hla_1776
        cmpb       $15, %al 
        je         check_expression__hla_1773
        cmpb       $16, %al 
        je         defined_register__hla_1777
        cmpb       $17, %al 
        je         check_if_symbol_defined__hla_1778
        cmpb       $128, %al 
        jae        check_expression__hla_1773
        movzbl     %al, %eax 
        addl       %eax, %esi 
        jmp        check_expression__hla_1773

defined_register__hla_1777:
        incl       %esi 
        jmp        check_expression__hla_1773

defined_fp_value__hla_1775:
        addl       $12, %esi 
        jmp        expression_checked__hla_1776

defined_string__hla_1774:
        lodsl
        addl       %eax, %esi 
        incl       %esi 
        jmp        expression_checked__hla_1776

check_if_symbol_defined__hla_1778:
        lodsl
        cmpl       $-1, %eax 
        je         invalid_expression__hla_579
        cmpl       $15, %eax 
        jb         check_expression__hla_1773
        je         reserved_word_used_as_symbol__hla_597
        testb      $4, 8(%eax) 
        jnz        no_prediction__hla_1779
        testb      $1, 8(%eax) 
        jz         symbol_predicted_undefined__hla_1780
        mov        current_pass__hla_111, %cx 
        subw       16(%eax), %cx 
        jz         check_expression__hla_1773
        cmpw       $1, %cx 
        ja         symbol_predicted_undefined__hla_1780
        orb        $192, 8(%eax) 
        jmp        check_expression__hla_1773

no_prediction__hla_1779:
        testb      $1, 8(%eax) 
        jz         symbol_undefined__hla_1781
        mov        current_pass__hla_111, %cx 
        subw       16(%eax), %cx 
        jz         check_expression__hla_1773
        jmp        symbol_undefined__hla_1781

symbol_predicted_undefined__hla_1780:
        orb        $64, 8(%eax) 
        andb       $127, 8(%eax) 

symbol_undefined__hla_1781:
        xorb       %bl, %bl 
        jmp        check_expression__hla_1773

expression_checked__hla_1776:
        movb       %bl, %al 
        jmp        logical_value_ok__hla_1782

check_for_used__hla_1760:
        lodsw
        cmpb       $2, %ah 
        jne        invalid_expression__hla_579
        lodsl
        cmpl       $15, %eax 
        jb         invalid_use_of_symbol__hla_585
        je         reserved_word_used_as_symbol__hla_597
        incl       %esi 
        testb      $8, 8(%eax) 
        jz         not_used__hla_1783
        mov        current_pass__hla_111, %cx 
        subw       18(%eax), %cx 
        jz         return_true__hla_1772
        cmpw       $1, %cx 
        ja         not_used__hla_1783
        orb        $48, 8(%eax) 
        jmp        return_true__hla_1772

not_used__hla_1783:
        orb        $16, 8(%eax) 
        andb       $223, 8(%eax) 
        jmp        return_false__hla_1771

given_false__hla_1761:
        incl       %esi 

return_false__hla_1771:
        xorb       %al, %al 
        jmp        logical_value_ok__hla_1782

given_true__hla_1762:
        incl       %esi 

return_true__hla_1772:
        orb        $-1, %al 
        jmp        logical_value_ok__hla_1782

logical_expression__hla_1758:
        incl       %esi 
        call       calculate_logical_expression__hla_1744
        pushl      %eax 
        lodsb
        cmpb       $125, %al 
        jne        invalid_expression__hla_579
        popl       %eax 

logical_value_ok__hla_1782:
        popl       %ebx 
        xorb       %bl, %al 
        ret
xget_logical_value:

/* procedure _06f9__p____hla_1789 */

_06f9__p____hla_1789:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "identify_label"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_06f9__p____hla_1789:

/* procedure identify_label__hla_1791 */

identify_label__hla_1791:
        cmpb       $46, (%esi) 
        je         local_label_name__hla_1792
        call       get_label_id__hla_688
        cmpl       $16, %eax 
        jb         label_identified__hla_1793
        orl        %ebx, %ebx 
        jz         anonymous_label_name__hla_1794
        decl       %ebx 
        mov        %ebx, current_locals_prefix__hla_70 

label_identified__hla_1793:
        ret

anonymous_label_name__hla_1794:
        cmpb       $64, -1(%esi) 
        je         anonymous_label_name_ok__hla_1795
        mov        $15, %eax 

anonymous_label_name_ok__hla_1795:
        ret

local_label_name__hla_1792:
        call       get_label_id__hla_688
        ret
xidentify_label__hla_1791:

/* procedure _0705__p____hla_1801 */

_0705__p____hla_1801:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "parse_address"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0705__p____hla_1801:

/* procedure parse_address__hla_1803 */

parse_address__hla_1803:
        mov        $91, %al 
        stosb
        cmpw       $538, (%esi) 
        jne        convert_address__hla_1804
        pushl      %esi 
        addl       $4, %esi 
        lea        1(%esi), %ebx 
        cmpb       $58, (%esi) 
        popl       %esi 
        jne        convert_address__hla_1804
        addl       $2, %esi 
        mov        $2, %ecx 
        pushl      %ebx 
        pushl      %edi 
        movl       $symbols__hla_166, %edi 
        call       get_symbol__hla_638
        popl       %edi 
        popl       %esi 
        jc         unknown_segment_prefix__hla_1805
        cmpb       $16, %al 
        jne        unknown_segment_prefix__hla_1805
        movb       %ah, %al 
        andb       $240, %ah 
        cmpb       $96, %ah 
        jne        unknown_segment_prefix__hla_1805
        stosb
        jmp        convert_address__hla_1804

unknown_segment_prefix__hla_1805:
        subl       $5, %esi 

convert_address__hla_1804:
        cmpb       $26, (%esi) 
        jne        jmp_convert_expression__hla_1806
        pushl      %esi 
        lodsw
        movzbl     %ah, %ecx 
        pushl      %edi 
        movl       $address_sizes__hla_165, %edi 
        call       get_symbol__hla_638
        popl       %edi 
        jc         no_size_prefix__hla_1807
        movb       %ah, %al 
        addb       $112, %al 
        stosb
        addl       $4, %esp 

jmp_convert_expression__hla_1806:
        jmp        convert_expression

no_size_prefix__hla_1807:
        popl       %esi 
        jmp        convert_expression
xparse_address__hla_1803:

/* procedure _0711__p____hla_1813 */

_0711__p____hla_1813:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "parse_line_contents"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0711__p____hla_1813:

/* procedure parse_line_contents__hla_1815 */

parse_line_contents__hla_1815:
        movl       $0, parenthesis_stack__hla_106 
xparse_line_contents__hla_1815:

/* procedure parse_instruction_arguments__hla_1817 */

parse_instruction_arguments__hla_1817:
        testl      %ebx, %ebx 
        jz         parseArgument__hla_1818
        cmpw       prefix_instruction_assembler__hla_370, %bx 
        je         allow_embedded_instruction__hla_1819
        cmpw       times_directive_assembler__hla_371, %bx 
        je         parse_times_directive__hla_1820
        cmpw       end_directive_assembler__hla_368, %bx 
        je         allow_embedded_instruction__hla_1819
        cmpw       label_directive_assembler__hla_372, %bx 
        je         parse_label_directive__hla_1821
        cmpw       segment_directive_assembler__hla_373, %bx 
        je         parse_label_directive__hla_1821
        cmpw       load_directive_assembler__hla_374, %bx 
        je         parse_load_directive__hla_1822
        cmpw       extrn_directive_assembler__hla_375, %bx 
        je         parse_extrn_directive__hla_1823
        cmpw       public_directive_assembler__hla_376, %bx 
        je         parse_public_directive__hla_1824

parseArgument__hla_1818:
        lea        256(%edi), %eax 
        cmpl       labels_list__hla_73, %eax 
        jae        out_of_memory__hla_593
        lodsb
        cmpb       $58, %al 
        je         instruction_separator__hla_1827
        cmpb       $44, %al 
        je         separator__hla_1828
        cmpb       $61, %al 
        je         separator__hla_1828
        cmpb       $124, %al 
        je         separator__hla_1828
        cmpb       $38, %al 
        je         separator__hla_1828
        cmpb       $126, %al 
        je         separator__hla_1828
        cmpb       $62, %al 
        je         greater__hla_1829
        cmpb       $60, %al 
        je         less__hla_1830
        cmpb       $41, %al 
        je         close_parenthesis__hla_1831
        orb        %al, %al 
        jz         contents_parsed__hla_1832
        cmpb       $91, %al 
        je         address_argument__hla_1833
        cmpb       $93, %al 
        je         separator__hla_1828
        cmpb       $123, %al 
        je         unallowed_character__hla_1834
        cmpb       $125, %al 
        je         unallowed_character__hla_1834
        cmpb       $35, %al 
        je         unallowed_character__hla_1834
        cmpb       $96, %al 
        je         unallowed_character__hla_1834
        decl       %esi 
        cmpb       $26, %al 
        jne        expression_argument__hla_1835
        pushl      %edi 
        movl       $directive_operators__hla_162, %edi 
        call       get_operator__hla_662
        orb        %al, %al 
        jnz        operator_argument__hla_1836
        incl       %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        movl       $symbols__hla_166, %edi 
        call       get_symbol__hla_638
        jnc        symbol_argument__hla_1837
        movl       $formatter_symbols__hla_163, %edi 
        call       get_symbol__hla_638
        jnc        symbol_argument__hla_1837
        cmpl       $1, %ecx 
        jne        check_argument__hla_1838
        cmpb       $63, (%esi) 
        jne        check_argument__hla_1838
        popl       %edi 
        movsb
        jmp        argument_parsed__hla_1839

instruction_separator__hla_1827:
        stosb
        jmp        allow_embedded_instruction__hla_1819

symbol_argument__hla_1837:
        popl       %edi 
        stosw
        jmp        argument_parsed__hla_1839

operator_argument__hla_1836:
        popl       %edi 
        cmpb       $133, %al 
        je         ptr_argument__hla_1840
        stosb
        cmpb       $128, %al 
        je         forced_expression__hla_1841
        cmpb       $129, %al 
        je         forced_parenthesis__hla_1842
        cmpb       $130, %al 
        je         parse_from_operator__hla_1843
        cmpb       $137, %al 
        je         parse_label_operator__hla_1844
        jmp        argument_parsed__hla_1839

allow_embedded_instruction__hla_1819:
        cmpb       $26, (%esi) 
        jne        parseArgument__hla_1818
        pushl      %edi 
        incl       %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        call       get_instruction__hla_650
        jnc        embedded_instruction__hla_1845
        movl       $data_directives__hla_167, %edi 
        call       get_symbol__hla_638
        jnc        embedded_data_instruction__hla_1846
        popl       %edi 
        subl       $2, %esi 
        jmp        parseArgument__hla_1818

embedded_data_instruction__hla_1846:
        movzbl     %ah, %ebx 
        mov        data_handlers__hla_364(,%ebx,4), %ebx 

embedded_instruction__hla_1845:
        popl       %edi 
        movb       %al, %dl 
        mov        $1, %al 
        stosb
        movw       %bx, %ax 
        stosw
        movb       %dl, %al 
        stosb
        jmp        parse_instruction_arguments__hla_1817

parse_times_directive__hla_1820:
        mov        $40, %al 
        stosb
        call       convert_expression
        mov        $41, %al 
        stosb
        cmpb       $58, (%esi) 
        jne        allow_embedded_instruction__hla_1819
        movsb
        jmp        allow_embedded_instruction__hla_1819

parse_label_directive__hla_1821:
        cmpb       $26, (%esi) 
        jne        argument_parsed__hla_1839
        pushl      %esi 
        incl       %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        call       identify_label__hla_1791
        popl       %ebx 
        cmpl       $15, %eax 
        je         non_label_identified__hla_1847
        movb       $2, (%edi) 
        incl       %edi 
        stosl
        xorb       %al, %al 
        stosb
        jmp        argument_parsed__hla_1839

non_label_identified__hla_1847:
        movl       %ebx, %esi 
        jmp        argument_parsed__hla_1839

parse_load_directive__hla_1822:
        cmpb       $26, (%esi) 
        jne        argument_parsed__hla_1839
        pushl      %esi 
        incl       %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        call       get_label_id__hla_688
        popl       %ebx 
        cmpl       $15, %eax 
        je         non_label_identified__hla_1847
        movb       $2, (%edi) 
        incl       %edi 
        stosl
        xorb       %al, %al 
        stosb
        jmp        argument_parsed__hla_1839

parse_public_directive__hla_1824:
        cmpb       $26, (%esi) 
        jne        parseArgument__hla_1818
        incl       %esi 
        pushl      %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        mov        $2, %al 
        stosb
        call       get_label_id__hla_688
        stosl
        mov        $34304, %ax 
        stosw
        popl       %ebx 
        pushl      %ebx 
        pushl      %esi 
        pushl      %edi 
        movl       $directive_operators__hla_162, %edi 
        call       get_operator__hla_662
        popl       %edi 
        popl       %edx 
        popl       %ebx 
        cmpb       $134, %al 
        je         argument_parsed__hla_1839
        movl       %edx, %esi 
        xchgl      %ebx, %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        mov        $40, %ax 
        stosw
        movl       %ecx, %eax 
        stosl
        rep movsb
        xorb       %al, %al 
        stosb
        xchgl      %ebx, %esi 
        jmp        argument_parsed__hla_1839

parse_extrn_directive__hla_1823:
        cmpb       $34, (%esi) 
        je         parse_quoted_extrn__hla_1848
        cmpb       $26, (%esi) 
        jne        parseArgument__hla_1818
        pushl      %esi 
        movzbl     1(%esi), %ecx 
        addl       $2, %esi 
        mov        $40, %ax 
        stosw
        movl       %ecx, %eax 
        stosl
        rep movsb
        mov        $34304, %ax 
        stosw
        popl       %esi 

parse_label_operator__hla_1844:
        cmpb       $26, (%esi) 
        jne        argument_parsed__hla_1839
        incl       %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        mov        $2, %al 
        stosb
        call       get_label_id__hla_688
        stosl
        xorb       %al, %al 
        stosb
        jmp        argument_parsed__hla_1839

parse_from_operator__hla_1843:
        cmpb       $34, (%esi) 
        jne        forced_expression__hla_1841
        jmp        argument_parsed__hla_1839

parse_quoted_extrn__hla_1848:
        incl       %esi 
        mov        $40, %ax 
        stosw
        lodsl
        movl       %eax, %ecx 
        stosl
        rep movsb
        xorb       %al, %al 
        stosb
        pushl      %esi 
        pushl      %edi 
        movl       $directive_operators__hla_162, %edi 
        call       get_operator__hla_662
        movl       %esi, %edx 
        popl       %edi 
        popl       %esi 
        cmpb       $134, %al 
        jne        argument_parsed__hla_1839
        stosb
        movl       %edx, %esi 
        jmp        parse_label_operator__hla_1844

ptr_argument__hla_1840:
        call       parse_address__hla_1803
        jmp        address_parsed__hla_1849

check_argument__hla_1838:
        pushl      %esi 
        pushl      %ecx 
        subl       $2, %esi 
        movl       $single_operand_operators__hla_161, %edi 
        call       get_operator__hla_662
        popl       %ecx 
        popl       %esi 
        orb        %al, %al 
        jnz        not_instruction__hla_1850
        call       get_instruction__hla_650
        jnc        embedded_instruction__hla_1845
        movl       $data_directives__hla_167, %edi 
        call       get_symbol__hla_638
        jnc        embedded_data_instruction__hla_1846

not_instruction__hla_1850:
        popl       %edi 
        subl       $2, %esi 

expression_argument__hla_1835:
        cmpb       $34, (%esi) 
        jne        not_string__hla_1851
        mov        1(%esi), %eax 
        lea        5(%esi,%eax,1), %ebx 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %esi 
        pushl      %edi 
        mov        $40, %al 
        stosb
        call       convert_expression
        mov        $41, %al 
        stosb
        popl       %eax 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        cmpl       %ebx, %esi 
        jne        expression_parsed__hla_1852
        movl       %eax, %edi 
        movl       %edx, %esi 

string_argument__hla_1853:
        incl       %esi 
        mov        $40, %ax 
        stosw
        lodsl
        movl       %eax, %ecx 
        stosl
        shrl       $1, %ecx 
        jnc        string_movsb_ok__hla_1854
        movsb

string_movsb_ok__hla_1854:
        shrl       $1, %ecx 
        jnc        string_movsw_ok__hla_1855
        movsw

string_movsw_ok__hla_1855:
        rep movsl
        xorb       %al, %al 
        stosb
        jmp        expression_parsed__hla_1852

not_string__hla_1851:
        cmpb       $40, (%esi) 
        jne        expression__hla_1856
        movl       %esp, %eax 
        subl       $256, %eax 
        jc         stack_overflow__hla_600
        cmpl       stack_limit__hla_49, %eax 
        jb         stack_overflow__hla_600
        pushl      %esi 
        pushl      %edi 
        incl       %esi 
        mov        $123, %al 
        stosb
        incl       parenthesis_stack__hla_106 
        jmp        parseArgument__hla_1818

expression__hla_1856:
        mov        $40, %al 
        stosb
        call       convert_expression
        mov        $41, %al 
        stosb
        jmp        expression_parsed__hla_1852

forced_expression__hla_1841:
        mov        $40, %al 
        stosb
        call       convert_expression
        mov        $41, %al 
        stosb
        jmp        argument_parsed__hla_1839

address_argument__hla_1833:
        call       parse_address__hla_1803
        lodsb
        cmpb       $93, %al 
        je         address_parsed__hla_1849
        decl       %esi 
        mov        $41, %al 
        stosb
        jmp        argument_parsed__hla_1839

address_parsed__hla_1849:
        mov        $93, %al 
        stosb
        jmp        argument_parsed__hla_1839

forced_parenthesis__hla_1842:
        cmpb       $40, (%esi) 
        jne        argument_parsed__hla_1839
        incl       %esi 
        mov        $123, %al 
        jmp        separator__hla_1828

unallowed_character__hla_1834:
        mov        $255, %al 
        jmp        separator__hla_1828

close_parenthesis__hla_1831:
        mov        $125, %al 

separator__hla_1828:
        stosb
        jmp        argument_parsed__hla_1839

greater__hla_1829:
        cmpb       $61, (%esi) 
        jne        separator__hla_1828
        incl       %esi 
        mov        $242, %al 
        jmp        separator__hla_1828

less__hla_1830:
        cmpb       $246, -1(%edi) 
        je         separator__hla_1828
        cmpb       $62, (%esi) 
        je         not_equal__hla_1857
        cmpb       $61, (%esi) 
        jne        separator__hla_1828
        incl       %esi 
        mov        $243, %al 
        jmp        separator__hla_1828

not_equal__hla_1857:
        incl       %esi 
        mov        $241, %al 
        jmp        separator__hla_1828

argument_parsed__hla_1839:
        cmpl       $0, parenthesis_stack__hla_106 
        je         parseArgument__hla_1818
        decl       parenthesis_stack__hla_106 
        addl       $8, %esp 
        jmp        argument_parsed__hla_1839

expression_parsed__hla_1852:
        cmpl       $0, parenthesis_stack__hla_106 
        je         parseArgument__hla_1818
        cmpb       $41, (%esi) 
        jne        argument_parsed__hla_1839
        decl       parenthesis_stack__hla_106 
        popl       %edi 
        popl       %esi 
        jmp        expression__hla_1856

contents_parsed__hla_1832:
        cmpl       $0, parenthesis_stack__hla_106 
        jne        invalid_expression__hla_579
        ret
xparse_instruction_arguments__hla_1817:

/* procedure _0743__p____hla_1863 */

_0743__p____hla_1863:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "parser"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0743__p____hla_1863:

/* procedure parser__hla_1865 */

parser__hla_1865:
        mov        memory_end__hla_46, %eax 
        mov        %eax, labels_list__hla_73 
        mov        additional_memory__hla_47, %eax 
        mov        %eax, free_additional_memory__hla_53 
        xorl       %eax, %eax 
        mov        %eax, current_locals_prefix__hla_70 
        mov        %eax, anonymous_reverse__hla_71 
        mov        %eax, anonymous_forward__hla_72 
        mov        %eax, hash_tree__hla_76 
        mov        %eax, blocks_stack__hla_107 
        mov        memory_start__hla_45, %esi 
        mov        source_start__hla_54, %edi 

parser_loop__hla_1866:
        mov        %esi, current_line__hla_60 
        lea        256(%edi), %eax 
        cmpl       labels_list__hla_73, %eax 
        jae        out_of_memory__hla_593
        cmpb       $0, 16(%esi) 
        je         empty_line__hla_1869
        mov        $15, %al 
        stosb
        movl       %esi, %eax 
        stosl
        addl       $16, %esi 

parse_line__hla_1870:
        cmpb       $26, (%esi) 
        jne        empty_instruction__hla_1871
        pushl      %edi 
        addl       $2, %esi 
        movzbl     -1(%esi), %ecx 
        cmpb       $58, (%esi,%ecx,1) 
        je         simple_label__hla_1872
        cmpb       $61, (%esi,%ecx,1) 
        je         constant_label__hla_1873
        call       get_instruction__hla_650
        jnc        main_instruction_identified__hla_1874
        cmpb       $26, (%esi,%ecx,1) 
        jne        no_data_label__hla_1875
        pushl      %esi 
        pushl      %ecx 
        lea        2(%esi,%ecx,1), %esi 
        movzbl     -1(%esi), %ecx 
        movl       $data_directives__hla_167, %edi 
        call       get_symbol__hla_638
        jnc        data_label__hla_1876
        popl       %ecx 
        popl       %esi 

no_data_label__hla_1875:
        movl       $data_directives__hla_167, %edi 
        call       get_symbol__hla_638
        jnc        data_instruction__hla_1877
        popl       %edi 
        subl       $2, %esi 
        xorw       %bx, %bx 
        call       parse_line_contents__hla_1815
        jmp        parse_next_line__hla_1878

simple_label__hla_1872:
        popl       %edi 
        call       identify_label__hla_1791
        movb       $2, (%edi) 
        incl       %edi 
        stosl
        incl       %esi 
        xorb       %al, %al 
        stosb
        jmp        parse_line__hla_1870

constant_label__hla_1873:
        popl       %edi 
        call       get_label_id__hla_688
        movb       $3, (%edi) 
        incl       %edi 
        stosl
        xorb       %al, %al 
        stosb
        incl       %esi 
        xorw       %bx, %bx 
        call       parse_line_contents__hla_1815
        jmp        parse_next_line__hla_1878

data_label__hla_1876:
        popl       %ecx 
        popl       %ebx 
        popl       %edi 
        pushl      %eax 
        pushl      %esi 
        movl       %ebx, %esi 
        movzbl     -1(%esi), %ecx 
        call       identify_label__hla_1791
        movb       $2, (%edi) 
        incl       %edi 
        stosl
        popl       %esi 
        popl       %eax 
        stosb
        pushl      %edi 
        jmp        data_instruction__hla_1877
        int        $3 
        int        $3 
        int        $3 

 .ascii "data_instruction"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 

data_instruction__hla_1877:
        movzbl     %ah, %ebx 
        mov        data_handlers__hla_364(,%ebx,4), %ebx 

main_instruction_identified__hla_1874:
        popl       %edi 
        movb       %al, %dl 
        mov        $1, %al 
        stosb
        movw       %bx, %ax 
        stosw
        movb       %dl, %al 
        stosb
        cmpw       if_directive_assembler__hla_365, %bx 
        je         parse_block__hla_1879
        cmpw       repeat_directive_assembler__hla_366, %bx 
        je         parse_block__hla_1879
        cmpw       while_directive_assembler__hla_367, %bx 
        je         parse_block__hla_1879
        cmpw       end_directive_assembler__hla_368, %bx 
        je         parse_end_directive__hla_1880
        cmpw       else_directive_assembler__hla_369, %bx 
        je         parse_else__hla_1881

common_parse__hla_1882:
        call       parse_line_contents__hla_1815
        jmp        parse_next_line__hla_1878

empty_instruction__hla_1871:
        lodsb
        orb        %al, %al 
        jz         parse_next_line__hla_1878
        cmpb       $58, %al 
        je         invalid_name__hla_582
        cmpb       $59, %al 
        je         skip_preprocessed_symbol__hla_1883
        decl       %esi 
        xorl       %ebx, %ebx 
        call       parse_instruction_arguments__hla_1817
        jmp        parse_next_line__hla_1878

skip_preprocessed_symbol__hla_1883:
        lodsb
        movzbl     %al, %eax 
        addl       %eax, %esi 

skip_next__hla_1884:
        lodsb
        orb        %al, %al 
        jz         parse_next_line__hla_1878
        cmpb       $26, %al 
        je         skip_preprocessed_symbol__hla_1883
        cmpb       $59, %al 
        je         skip_preprocessed_symbol__hla_1883
        cmpb       $34, %al 
        je         skip_preprocessed_string__hla_1885
        jmp        skip_next__hla_1884

skip_preprocessed_string__hla_1885:
        lodsl
        addl       %eax, %esi 
        jmp        skip_next__hla_1884

empty_line__hla_1869:
        addl       $17, %esi 

parse_next_line__hla_1878:
        cmpl       source_start__hla_54, %esi 
        jb         parser_loop__hla_1866

source_parsed__hla_1886:
        cmpl       $0, blocks_stack__hla_107 
        je         blocks_stack_ok__hla_1887
        popl       %eax 
        popl       current_line__hla_60 
        jmp        missing_end_directive__hla_588

blocks_stack_ok__hla_1887:
        xorb       %al, %al 
        stosb
        mov        error_line__hla_84, %eax 
        mov        %eax, current_line__hla_60 
        cmpl       $0, anonymous_forward__hla_72 
        jne        invalid_value__hla_586
        addl       $15, %edi 
        andl       $-16, %edi 
        mov        %edi, code_start__hla_55 
        ret

parse_block__hla_1879:
        movl       %esp, %eax 
        subl       $256, %eax 
        jc         stack_overflow__hla_600
        cmpl       stack_limit__hla_49, %eax 
        jb         stack_overflow__hla_600
        pushl      current_line__hla_60 
        movw       %bx, %ax 
        shll       $16, %eax 
        pushl      %eax 
        incl       blocks_stack__hla_107 
        cmpw       if_directive_assembler__hla_365, %bx 
        je         parse_if__hla_1888
        cmpw       while_directive_assembler__hla_367, %bx 
        je         parse_while__hla_1889
        call       parse_line_contents__hla_1815
        jmp        parse_next_line__hla_1878

parse_end_directive__hla_1880:
        cmpb       $26, (%esi) 
        jne        common_parse__hla_1882
        pushl      %edi 
        incl       %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        call       get_instruction__hla_650
        popl       %edi 
        jnc        parse_end_block__hla_1890
        subl       $2, %esi 
        jmp        common_parse__hla_1882

parse_end_block__hla_1890:
        movb       %al, %dl 
        mov        $1, %al 
        stosb
        movw       %bx, %ax 
        stosw
        movb       %dl, %al 
        stosb
        lodsb
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
        cmpw       if_directive_assembler__hla_365, %bx 
        je         close_parsing_block__hla_1891
        cmpw       repeat_directive_assembler__hla_366, %bx 
        je         close_parsing_block__hla_1891
        cmpw       while_directive_assembler__hla_367, %bx 
        je         close_parsing_block__hla_1891
        jmp        parse_next_line__hla_1878

close_parsing_block__hla_1891:
        cmpl       $0, blocks_stack__hla_107 
        je         unexpected_instruction__hla_606
        cmpw       2(%esp), %bx 
        jne        unexpected_instruction__hla_606
        decl       blocks_stack__hla_107 
        popl       %eax 
        popl       %edx 
        cmpw       if_directive_assembler__hla_365, %bx 
        jne        parse_next_line__hla_1878
        testb      $12, %al 
        jz         parse_next_line__hla_1878
        testb      $16, %al 
        jnz        parse_next_line__hla_1878
        subl       $8, %edi 
        jmp        parse_next_line__hla_1878

parse_if__hla_1888:
        pushl      %edi 
        call       parse_line_contents__hla_1815
        xorb       %al, %al 
        stosb
        xchgl      %esi, (%esp) 
        movl       %esi, %edi 
        call       preevaluate_logical_expression
        popl       %esi 
        cmpb       $48, %al 
        je         parse_false_condition_block__hla_1892
        cmpb       $49, %al 
        je         parse_true_condition_block__hla_1893
        orb        $16, (%esp) 
        jmp        parse_next_line__hla_1878

parse_while__hla_1889:
        pushl      %edi 
        call       parse_line_contents__hla_1815
        xorb       %al, %al 
        stosb
        xchgl      %esi, (%esp) 
        movl       %esi, %edi 
        call       preevaluate_logical_expression
        popl       %esi 
        cmpb       $48, %al 
        je         parse_false_condition_block__hla_1892
        cmpb       $49, %al 
        jne        parse_next_line__hla_1878
        stosb
        jmp        parse_next_line__hla_1878

parse_false_condition_block__hla_1892:
        orb        $1, (%esp) 
        subl       $4, %edi 
        jmp        skip_parsing__hla_1894

parse_true_condition_block__hla_1893:
        orb        $4, (%esp) 
        subl       $4, %edi 
        jmp        parse_next_line__hla_1878

parse_else__hla_1881:
        cmpl       $0, blocks_stack__hla_107 
        je         unexpected_instruction__hla_606
        mov        2(%esp), %ax 
        cmpw       if_directive_assembler__hla_365, %ax 
        jne        unexpected_instruction__hla_606
        lodsb
        orb        %al, %al 
        jz         parse_pure_else__hla_1895
        cmpb       $26, %al 
        jne        extra_characters_on_line__hla_571
        pushl      %edi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        call       get_instruction__hla_650
        jc         extra_characters_on_line__hla_571
        popl       %edi 
        cmpw       if_directive_assembler__hla_365, %bx 
        jne        extra_characters_on_line__hla_571
        testb      $4, (%esp) 
        jnz        skip_true_condition_else__hla_1896
        movb       %al, %dl 
        mov        $1, %al 
        stosb
        movw       %bx, %ax 
        stosw
        movb       %dl, %al 
        stosb
        jmp        parse_if__hla_1888

skip_true_condition_else__hla_1896:
        subl       $4, %edi 
        orb        $1, (%esp) 
        jmp        skip_parsing_contents__hla_1897

parse_pure_else__hla_1895:
        bts        $1, (%esp) 
        jc         unexpected_instruction__hla_606
        testb      $4, (%esp) 
        jz         parse_next_line__hla_1878
        subl       $4, %edi 
        orb        $1, (%esp) 
        jmp        skip_parsing__hla_1894

skip_parsing__hla_1894:
        cmpl       source_start__hla_54, %esi 
        jae        source_parsed__hla_1886
        mov        %esi, current_line__hla_60 
        addl       $16, %esi 

skip_parsing_line__hla_1898:
        cmpb       $26, (%esi) 
        jne        skip_parsing_contents__hla_1897
        incl       %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        cmpb       $58, (%esi,%ecx,1) 
        je         skip_parsing_label__hla_1899
        pushl      %edi 
        call       get_instruction__hla_650
        popl       %edi 
        jnc        skip_parsing_instruction__hla_1900
        addl       %ecx, %esi 
        jmp        skip_parsing_contents__hla_1897

skip_parsing_label__hla_1899:
        lea        1(%esi,%ecx,1), %esi 
        jmp        skip_parsing_line__hla_1898

skip_parsing_instruction__hla_1900:
        cmpw       if_directive_assembler__hla_365, %bx 
        je         skip_parsing_block__hla_1901
        cmpw       repeat_directive_assembler__hla_366, %bx 
        je         skip_parsing_block__hla_1901
        cmpw       while_directive_assembler__hla_367, %bx 
        je         skip_parsing_block__hla_1901
        cmpw       end_directive_assembler__hla_368, %bx 
        je         skip_parsing_end_directive__hla_1902
        cmpw       else_directive_assembler__hla_369, %bx 
        je         skip_parsing_else__hla_1903

skip_parsing_contents__hla_1897:
        lodsb
        orb        %al, %al 
        jz         skip_parsing__hla_1894
        cmpb       $26, %al 
        je         skip_parsing_symbol__hla_1904
        cmpb       $59, %al 
        je         skip_parsing_symbol__hla_1904
        cmpb       $34, %al 
        je         skip_parsing_string__hla_1905
        jmp        skip_parsing_contents__hla_1897

skip_parsing_symbol__hla_1904:
        lodsb
        movzbl     %al, %eax 
        addl       %eax, %esi 
        jmp        skip_parsing_contents__hla_1897

skip_parsing_string__hla_1905:
        lodsl
        addl       %eax, %esi 
        jmp        skip_parsing_contents__hla_1897

skip_parsing_block__hla_1901:
        movl       %esp, %eax 
        subl       $256, %eax 
        jc         stack_overflow__hla_600
        cmpl       stack_limit__hla_49, %eax 
        jb         stack_overflow__hla_600
        pushl      current_line__hla_60 
        movw       %bx, %ax 
        shll       $16, %eax 
        pushl      %eax 
        incl       blocks_stack__hla_107 
        jmp        skip_parsing_contents__hla_1897

skip_parsing_end_directive__hla_1902:
        cmpb       $26, (%esi) 
        jne        skip_parsing_contents__hla_1897
        pushl      %edi 
        incl       %esi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        call       get_instruction__hla_650
        popl       %edi 
        jnc        skip_parsing_end_block__hla_1906
        addl       %ecx, %esi 
        jmp        skip_parsing_contents__hla_1897

skip_parsing_end_block__hla_1906:
        lodsb
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
        cmpw       if_directive_assembler__hla_365, %bx 
        je         close_skip_parsing_block__hla_1907
        cmpw       repeat_directive_assembler__hla_366, %bx 
        je         close_skip_parsing_block__hla_1907
        cmpw       while_directive_assembler__hla_367, %bx 
        je         close_skip_parsing_block__hla_1907
        jmp        skip_parsing__hla_1894

close_skip_parsing_block__hla_1907:
        cmpl       $0, blocks_stack__hla_107 
        je         unexpected_instruction__hla_606
        cmpw       2(%esp), %bx 
        jne        unexpected_instruction__hla_606
        decl       blocks_stack__hla_107 
        popl       %eax 
        popl       %edx 
        testb      $1, %al 
        jz         skip_parsing__hla_1894
        cmpw       if_directive_assembler__hla_365, %bx 
        jne        parse_next_line__hla_1878
        testb      $16, %al 
        jz         parse_next_line__hla_1878
        mov        $15, %al 
        stosb
        mov        current_line__hla_60, %eax 
        stosl
        movzwl     end_directive_assembler__hla_368, %eax 
        shll       $8, %eax 
        incl       %eax 
        stosl
        movzwl     if_directive_assembler__hla_365, %eax 
        shll       $8, %eax 
        incl       %eax 
        stosl
        jmp        parse_next_line__hla_1878

skip_parsing_else__hla_1903:
        cmpl       $0, blocks_stack__hla_107 
        je         unexpected_instruction__hla_606
        mov        2(%esp), %ax 
        cmpw       if_directive_assembler__hla_365, %ax 
        jne        unexpected_instruction__hla_606
        lodsb
        orb        %al, %al 
        jz         skip_parsing_pure_else__hla_1908
        cmpb       $26, %al 
        jne        extra_characters_on_line__hla_571
        pushl      %edi 
        movzbl     (%esi), %ecx 
        incl       %esi 
        call       get_instruction__hla_650
        jc         extra_characters_on_line__hla_571
        popl       %edi 
        cmpw       if_directive_assembler__hla_365, %bx 
        jne        extra_characters_on_line__hla_571
        mov        (%esp), %al 
        testb      $1, %al 
        jz         skip_parsing_contents__hla_1897
        testb      $4, %al 
        jnz        skip_parsing_contents__hla_1897
        testb      $16, %al 
        jnz        parse_else_if__hla_1909
        xorb       %al, %al 
        mov        %al, (%esp) 
        mov        $15, %al 
        stosb
        mov        current_line__hla_60, %eax 
        stosl

parse_else_if__hla_1909:
        movzwl     if_directive_assembler__hla_365, %eax 
        shll       $8, %eax 
        incl       %eax 
        stosl
        jmp        parse_if__hla_1888

skip_parsing_pure_else__hla_1908:
        bts        $1, (%esp) 
        jc         unexpected_instruction__hla_606
        mov        (%esp), %al 
        testb      $1, %al 
        jz         skip_parsing__hla_1894
        testb      $4, %al 
        jnz        skip_parsing__hla_1894
        andb       $254, %al 
        orb        $8, %al 
        mov        %al, (%esp) 
        jmp        parse_next_line__hla_1878
xparser__hla_1865:

/* procedure _0777__p____hla_1915 */

_0777__p____hla_1915:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "mark_relocation"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0777__p____hla_1915:

/* procedure mark_relocation */

mark_relocation:
        cmpb       $0, value_type__hla_130 
        je         relocation_ok__hla_1917
        cmpb       $0, virtual_data__hla_121 
        jne        relocation_ok__hla_1917
        cmpb       $2, output_format__hla_117 
        je         mark_mz_relocation__hla_1918
        cmpb       $3, output_format__hla_117 
        je         mark_pe_relocation__hla_1919
        cmpb       $4, output_format__hla_117 
        je         mark_coff_relocation__hla_1920
        cmpb       $5, output_format__hla_117 
        je         mark_elf_relocation__hla_1921

relocation_ok__hla_1917:
        ret

mark_mz_relocation__hla_1918:
        pushl      %eax 
        pushl      %ebx 
        incl       number_of_relocations__hla_96 
        mov        free_additional_memory__hla_53, %ebx 
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        mov        %ax, (%ebx) 
        shrl       $16, %eax 
        shlw       $12, %ax 
        mov        %ax, 2(%ebx) 
        cmpw       $65535, (%ebx) 
        jne        mz_relocation_ok__hla_1922
        incw       2(%ebx) 
        subw       $16, (%ebx) 

mz_relocation_ok__hla_1922:
        addl       $4, %ebx 
        cmpl       structures_buffer__hla_87, %ebx 
        jae        out_of_memory__hla_593
        mov        %ebx, free_additional_memory__hla_53 
        popl       %ebx 
        popl       %eax 
        ret

mark_coff_relocation__hla_1920:
        cmpb       $3, value_type__hla_130 
        je         coff_relocation_relative__hla_1925
        pushl      %ebx 
        pushl      %eax 
        testl      $8, format_flags__hla_94 
        jnz        coff_64bit_relocation__hla_1926
        mov        $6, %al 
        jmp        coff_relocation__hla_1927

coff_64bit_relocation__hla_1926:
        mov        $1, %al 
        jmp        coff_relocation__hla_1927

coff_relocation_relative__hla_1925:
        pushl      %ebx 
        bt         $0, format_flags__hla_94 
        jnc        relative_ok__hla_1928
        mov        current_section__hla_100, %ebx 
        mov        8(%ebx), %ebx 
        subl       %edi, %ebx 
        subl       %ebx, %eax 
        addl       $4, %eax 

relative_ok__hla_1928:
        pushl      %eax 
        mov        $20, %al 
        testl      $8, format_flags__hla_94 
        jnz        relative_coff_64bit_relocation__hla_1929
        cmpb       $2, labels_type__hla_119 
        jne        invalid_use_of_symbol__hla_585
        jmp        coff_relocation__hla_1927

relative_coff_64bit_relocation__hla_1929:
        mov        $4, %al 
        cmpb       $4, labels_type__hla_119 
        jne        invalid_use_of_symbol__hla_585

coff_relocation__hla_1927:
        mov        free_additional_memory__hla_53, %ebx 
        addl       $12, %ebx 
        cmpl       structures_buffer__hla_87, %ebx 
        jae        out_of_memory__hla_593
        mov        %ebx, free_additional_memory__hla_53 
        mov        %al, -12(%ebx) 
        mov        current_section__hla_100, %eax 
        mov        8(%eax), %eax 
        negl       %eax 
        addl       %edi, %eax 
        mov        %eax, -8(%ebx) 
        mov        symbol_identifier__hla_91, %eax 
        mov        %eax, -4(%ebx) 
        popl       %eax 
        popl       %ebx 
        ret

mark_elf_relocation__hla_1921:
        cmpb       $3, value_type__hla_130 
        je         elf_relocation_relative__hla_1932
        pushl      %ebx 
        pushl      %eax 
        cmpb       $3, value_type__hla_130 
        je         elf_gotoff_relocation__hla_1933
        mov        $1, %al 
        jmp        coff_relocation__hla_1927

elf_gotoff_relocation__hla_1933:
        mov        $9, %al 
        jmp        coff_relocation__hla_1927

elf_relocation_relative__hla_1932:
        cmpb       $0, labels_type__hla_119 
        je         invalid_use_of_symbol__hla_585
        pushl      %ebx 
        mov        current_section__hla_100, %ebx 
        mov        8(%ebx), %ebx 
        subl       %edi, %ebx 
        subl       %ebx, %eax 
        pushl      %eax 
        mov        $2, %al 
        jmp        coff_relocation__hla_1927

mark_pe_relocation__hla_1919:
        pushl      %eax 
        pushl      %ebx 
        mov        current_section__hla_100, %ebx 
        movl       %edi, %eax 
        subl       20(%ebx), %eax 
        addl       12(%ebx), %eax 
        mov        free_additional_memory__hla_53, %ebx 
        incl       number_of_relocations__hla_96 
        jz         invalid_use_of_symbol__hla_585
        mov        %eax, (%ebx) 
        addl       $4, %ebx 
        cmpl       structures_buffer__hla_87, %ebx 
        jae        out_of_memory__hla_593
        mov        %ebx, free_additional_memory__hla_53 
        popl       %ebx 
        popl       %eax 
        ret
xmark_relocation:

/* procedure _0791__p____hla_1941 */

_0791__p____hla_1941:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "close_pe_section"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0791__p____hla_1941:

/* procedure close_pe_section__hla_1943 */

close_pe_section__hla_1943:
        mov        current_section__hla_100, %ebx 
        mov        code_start__hla_55, %edx 
        movl       %edi, %eax 
        subl       20(%ebx), %eax 
        jnz        finish_section__hla_1944
        bt         $5, format_flags__hla_94 
        jc         finish_section__hla_1944
        mov        12(%ebx), %eax 
        ret

finish_section__hla_1944:
        mov        %eax, 8(%ebx) 
        cmpl       undefined_data_end__hla_81, %edi 
        jne        align_section__hla_1945
        cmpl       $4096, 56(%edx) 
        jb         align_section__hla_1945
        mov        undefined_data_start__hla_80, %edi 

align_section__hla_1945:
        movl       $0, undefined_data_end__hla_81 
        movl       %edi, %ebp 
        subl       20(%ebx), %ebp 
        mov        60(%edx), %ecx 
        decl       %ecx 
        lea        (%ebp,%ecx,1), %eax 
        notl       %ecx 
        andl       %ecx, %eax 
        mov        %eax, 16(%ebx) 
        subl       %ebp, %eax 
        movl       %eax, %ecx 
        xorb       %al, %al 
        rep stosb
        mov        code_start__hla_55, %eax 
        subl       stub_size__hla_98, %eax 
        subl       %eax, 20(%ebx) 
        mov        8(%ebx), %eax 
        orl        %eax, %eax 
        jz         udata_ok__hla_1946
        cmpl       $0, 16(%ebx) 
        jne        udata_ok__hla_1946
        orb        $128, 36(%ebx) 

udata_ok__hla_1946:
        mov        56(%edx), %ecx 
        decl       %ecx 
        addl       %ecx, %eax 
        notl       %ecx 
        andl       %ecx, %eax 
        addl       12(%ebx), %eax 
        addl       $40, %ebx 
        mov        %ebx, current_section__hla_100 
        incw       number_of_sections__hla_97 
        jz         format_limitations_exceeded__hla_573
        ret
xclose_pe_section__hla_1943:

/* procedure _079c__p____hla_1952 */

_079c__p____hla_1952:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "close_elf_segment"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_079c__p____hla_1952:

/* procedure close_elf_segment__hla_1954 */

close_elf_segment__hla_1954:
        cmpl       $0, number_of_sections__hla_97 
        jne        finish_elf_segment__hla_1955
        cmpl       symbols_stream__hla_95, %edi 
        jne        first_elf_segment_ok__hla_1956
        pushl      %edi 
        mov        code_start__hla_55, %edi 
        addl       $52, %edi 
        mov        $8, %ecx 
        xorl       %eax, %eax 
        rep stosl
        popl       %edi 
        mov        image_base__hla_102, %eax 
        ret

first_elf_segment_ok__hla_1956:
        incl       number_of_sections__hla_97 

finish_elf_segment__hla_1955:
        mov        number_of_sections__hla_97, %ebx 
        decl       %ebx 
        shll       $5, %ebx 
        addl       code_start__hla_55, %ebx 
        addl       $52, %ebx 
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        subl       4(%ebx), %eax 
        movl       %edi, %edx 
        cmpl       undefined_data_end__hla_81, %edi 
        jne        elf_segment_size_ok__hla_1957
        mov        undefined_data_start__hla_80, %edi 

elf_segment_size_ok__hla_1957:
        mov        %eax, 20(%ebx) 
        addl       %edi, %eax 
        subl       %edx, %eax 
        mov        %eax, 16(%ebx) 
        mov        8(%ebx), %eax 
        addl       20(%ebx), %eax 
        addl       $4095, %eax 
        andl       $-4096, %eax 
        ret
xclose_elf_segment__hla_1954:

/* procedure _07a7__p____hla_1963 */

_07a7__p____hla_1963:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "close_elf64_segment"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_07a7__p____hla_1963:

/* procedure close_elf64_segment__hla_1965 */

close_elf64_segment__hla_1965:
        cmpl       $0, number_of_sections__hla_97 
        jne        finish_elf64_segment__hla_1966
        cmpl       symbols_stream__hla_95, %edi 
        jne        first_elf64_segment_ok__hla_1967
        pushl      %edi 
        mov        code_start__hla_55, %edi 
        addl       $64, %edi 
        mov        $14, %ecx 
        xorl       %eax, %eax 
        rep stosl
        popl       %edi 
        mov        image_base__hla_102, %eax 
        mov        image_base_high__hla_103, %edx 
        ret

first_elf64_segment_ok__hla_1967:
        incl       number_of_sections__hla_97 

finish_elf64_segment__hla_1966:
        mov        number_of_sections__hla_97, %ebx 
        decl       %ebx 
        imul       $56, %ebx, %ebx 
        addl       code_start__hla_55, %ebx 
        addl       $64, %ebx 
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        subl       8(%ebx), %eax 
        movl       %edi, %edx 
        cmpl       undefined_data_end__hla_81, %edi 
        jne        elf64_segment_size_ok__hla_1968
        mov        undefined_data_start__hla_80, %edi 

elf64_segment_size_ok__hla_1968:
        mov        %eax, 40(%ebx) 
        addl       %edi, %eax 
        subl       %edx, %eax 
        mov        %eax, 32(%ebx) 
        mov        16(%ebx), %eax 
        mov        20(%ebx), %edx 
        addl       40(%ebx), %eax 
        adcl       $0, %edx 
        subl       $1, %eax 
        sbbl       $0, %edx 
        shrd       $12, %edx, %eax 
        shrl       $12, %edx 
        addl       $1, %eax 
        adcl       $0, %edx 
        shld       $12, %eax, %edx 
        shll       $12, %eax 
        ret
xclose_elf64_segment__hla_1965:

/* procedure _07b2__p____hla_1974 */

_07b2__p____hla_1974:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "close_coff_section"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_07b2__p____hla_1974:

/* procedure close_coff_section__hla_1976 */

close_coff_section__hla_1976:
        mov        current_section__hla_100, %ebx 
        movl       %edi, %eax 
        mov        8(%ebx), %edx 
        subl       %edx, %eax 
        mov        %eax, 12(%ebx) 
        xorl       %eax, %eax 
        xchgl      %eax, undefined_data_end__hla_81 
        cmpl       %edi, %eax 
        jne        coff_section_ok__hla_1977
        cmpl       undefined_data_start__hla_80, %edx 
        jne        coff_section_ok__hla_1977
        movl       %edx, %edi 
        orb        $128, 20(%ebx) 
        andb       $191, 20(%ebx) 

coff_section_ok__hla_1977:
        ret
xclose_coff_section__hla_1976:

/* procedure _07bb__p____hla_1983 */

_07bb__p____hla_1983:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "close_pass"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_07bb__p____hla_1983:

/* procedure close_pass__hla_1985 */

close_pass__hla_1985:
        mov        output_format__hla_117, %al 
        cmpb       $3, %al 
        je         close_pe__hla_1986
        cmpb       $4, %al 
        je         close_coff__hla_1987
        cmpb       $5, %al 
        je         close_elf__hla_1988
        ret

close_coff__hla_1987:
        call       close_coff_section__hla_1976
        cmpb       $0, next_pass_needed__hla_115 
        je         coff_closed__hla_1989
        mov        symbols_stream__hla_95, %eax 
        mov        %eax, free_additional_memory__hla_53 

coff_closed__hla_1989:
        ret

close_elf__hla_1988:
        bt         $0, format_flags__hla_94 
        jc         close_elf_exe__hla_1990
        call       close_coff_section__hla_1976
        cmpb       $0, next_pass_needed__hla_115 
        je         elf_closed__hla_1991
        mov        symbols_stream__hla_95, %eax 
        mov        %eax, free_additional_memory__hla_53 

elf_closed__hla_1991:
        ret

close_elf_exe__hla_1990:
        testl      $8, format_flags__hla_94 
        jnz        close_elf64_exe__hla_1992
        call       close_elf_segment__hla_1954
        mov        code_start__hla_55, %edx 
        mov        number_of_sections__hla_97, %eax 
        movb       $52, 28(%edx) 
        mov        %ax, 44(%edx) 
        shll       $5, %eax 
        addl       %edx, %eax 
        addl       $52, %eax 
        cmpl       symbols_stream__hla_95, %eax 
        je         elf_exe_ok__hla_1993
        orb        $-1, next_pass_needed__hla_115 

elf_exe_ok__hla_1993:
        ret

close_elf64_exe__hla_1992:
        call       close_elf64_segment__hla_1965
        mov        code_start__hla_55, %edx 
        mov        number_of_sections__hla_97, %eax 
        movb       $64, 32(%edx) 
        mov        %ax, 56(%edx) 
        imul       $56, %eax, %eax 
        addl       %edx, %eax 
        addl       $64, %eax 
        cmpl       symbols_stream__hla_95, %eax 
        je         elf64_exe_ok__hla_1994
        orb        $-1, next_pass_needed__hla_115 

elf64_exe_ok__hla_1994:
        ret

close_pe__hla_1986:
        call       close_pe_section__hla_1943
        mov        code_start__hla_55, %edx 
        mov        %eax, 80(%edx) 
        call       make_timestamp__hla_546
        mov        code_start__hla_55, %edx 
        mov        %eax, 8(%edx) 
        mov        number_of_relocations__hla_96, %eax 
        cmpl       $0, %eax 
        jle        pe_flags_ok__hla_1995
        orw        $1, 22(%edx) 
        shll       $2, %eax 
        subl       %eax, free_additional_memory__hla_53 

pe_flags_ok__hla_1995:
        mov        number_of_sections__hla_97, %eax 
        mov        %ax, 6(%edx) 
        imul       $40, %eax, %eax 
        movzwl     20(%edx), %ecx 
        lea        24(%eax,%ecx,1), %eax 
        addl       stub_size__hla_98, %eax 
        mov        60(%edx), %ecx 
        decl       %ecx 
        addl       %ecx, %eax 
        notl       %ecx 
        andl       %ecx, %eax 
        cmpl       84(%edx), %eax 
        je         pe_sections_ok__hla_1996
        orb        $-1, next_pass_needed__hla_115 

pe_sections_ok__hla_1996:
        xorl       %ecx, %ecx 
        addl       $120, %edx 
        testl      $8, format_flags__hla_94 
        jz         process_directories__hla_1997
        addl       $16, %edx 

process_directories__hla_1997:
        mov        (%edx,%ecx,8), %eax 
        orl        %eax, %eax 
        jz         directory_ok__hla_1998
        cmpl       $-1, 4(%edx,%ecx,8) 
        jne        directory_ok__hla_1998

section_data__hla_1999:
        mov        (%edx,%ecx,8), %ebx 
        mov        12(%ebx), %eax 
        mov        %eax, (%edx,%ecx,8) 
        mov        8(%ebx), %eax 
        mov        %eax, 4(%edx,%ecx,8) 

directory_ok__hla_1998:
        incb       %cl 
        cmpb       $16, %cl 
        jb         process_directories__hla_1997
        mov        code_start__hla_55, %ebx 
        subl       stub_size__hla_98, %ebx 
        movl       %edi, %ecx 
        subl       %ebx, %ecx 
        movl       %ecx, %ebp 
        shrl       $1, %ecx 
        xorl       %eax, %eax 
        cdq

calculate_checksum__hla_2000:
        mov        (%ebx), %dx 
        addl       %edx, %eax 
        movw       %ax, %dx 
        shrl       $16, %eax 
        addl       %edx, %eax 
        addl       $2, %ebx 
        loop       calculate_checksum__hla_2000
        addl       %ebp, %eax 
        mov        code_start__hla_55, %ebx 
        mov        %eax, 88(%ebx) 
        ret
xclose_pass__hla_1985:

/* procedure _07d2__p____hla_2006 */

_07d2__p____hla_2006:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "allocate_structure_data"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_07d2__p____hla_2006:

/* procedure allocate_structure_data__hla_2008 */

allocate_structure_data__hla_2008:
        mov        structures_buffer__hla_87, %ebx 
        subl       $32, %ebx 
        cmpl       free_additional_memory__hla_53, %ebx 
        jb         out_of_memory__hla_593
        mov        %ebx, structures_buffer__hla_87 
        ret
xallocate_structure_data__hla_2008:

/* procedure _07dc__p____hla_2016 */

_07dc__p____hla_2016:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "open_binary_file"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_07dc__p____hla_2016:

/* procedure open_binary_file__hla_2018 */

open_binary_file__hla_2018:
        pushl      %esi 
        pushl      %edi 
        mov        current_line__hla_60, %esi 
        mov        (%esi), %esi 

get_current_path__hla_2019:
        lodsb
        stosb
        orb        %al, %al 
        jnz        get_current_path__hla_2019

cut_current_path__hla_2020:
        cmpl       (%esp), %edi 
        je         current_path_ok__hla_2021
        cmpb       $92, -1(%edi) 
        je         current_path_ok__hla_2021
        cmpb       $47, -1(%edi) 
        je         current_path_ok__hla_2021
        decl       %edi 
        jmp        cut_current_path__hla_2020

current_path_ok__hla_2021:
        mov        4(%esp), %esi 
        call       preprocess_path__hla_1158
        popl       %edx 
        movl       %edx, %esi 
        call       open__hla_416
        jnc        file_opened__hla_2022
        movl       %esi, %edi 
        mov        (%esp), %esi 
        pushl      %edi 
        call       preprocess_path__hla_1158
        popl       %edx 
        movl       %edx, %esi 
        call       open__hla_416
        jc         file_not_found__hla_572

file_opened__hla_2022:
        movl       %esi, %edi 
        popl       %esi 
        ret
xopen_binary_file__hla_2018:

/* procedure _07e8__p____hla_2028 */

_07e8__p____hla_2028:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "undefined_data"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_07e8__p____hla_2028:

/* procedure undefined_data__hla_2030 */

undefined_data__hla_2030:
        cmpb       $0, virtual_data__hla_121 
        jne        false__hla_2031
        cmpl       undefined_data_end__hla_81, %eax 
        je         false__hla_2032
        mov        %eax, undefined_data_start__hla_80 
false__hla_2032:
        mov        %edi, undefined_data_end__hla_81 
false__hla_2031:
        ret
xundefined_data__hla_2030:

/* procedure _07f2__p____hla_2038 */

_07f2__p____hla_2038:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "generate_pe_data"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_07f2__p____hla_2038:

/* procedure generate_pe_data__hla_2040 */

generate_pe_data__hla_2040:
        cmpb       $2, %al 
        je         make_pe_resource__hla_2041
        cmpb       $5, %al 
        je         make_pe_fixups__hla_2042
        ret

make_pe_resource__hla_2041:
        cmpb       $130, (%esi) 
        jne        resource_done__hla_2043
        incl       %esi 
        lodsw
        cmpw       $40, %ax 
        jne        invalid_argument__hla_578
        lodsl
        movl       %esi, %edx 
        lea        1(%esi,%eax,1), %esi 
        cmpb       $0, next_pass_needed__hla_115 
        je         resource_from_file__hla_2044
        cmpw       $0, current_pass__hla_111 
        jne        reserve_space_for_resource__hla_2045
        movl       $0, resource_size__hla_105 

reserve_space_for_resource__hla_2045:
        addl       resource_size__hla_105, %edi 
        cmpl       display_buffer__hla_86, %edi 
        ja         out_of_memory__hla_593
        jmp        resource_done__hla_2043

resource_from_file__hla_2044:
        pushl      %esi 
        movl       %edx, %esi 
        call       open_binary_file__hla_2018
        pushl      %ebx 
        mov        free_additional_memory__hla_53, %esi 
        lea        32(%esi), %eax 
        cmpl       structures_buffer__hla_87, %eax 
        ja         out_of_memory__hla_593
        movl       %esi, %edx 
        mov        $32, %ecx 
        call       read__hla_446
        jc         invalid_file_format__hla_580
        xorl       %eax, %eax 
        cmpl       %eax, (%esi) 
        jne        invalid_file_format__hla_580
        mov        $65535, %ax 
        cmpl       %eax, 8(%esi) 
        jne        invalid_file_format__hla_580
        cmpl       %eax, 12(%esi) 
        jne        invalid_file_format__hla_580
        mov        $32, %eax 
        cmpl       %eax, 4(%esi) 
        jne        invalid_file_format__hla_580

read_resource_headers__hla_2050:
        testl      $3, %eax 
        jz         resource_file_alignment_ok__hla_2051
        mov        $4, %edx 
        andl       $3, %eax 
        subl       %eax, %edx 
        call       mseek__hla_474

resource_file_alignment_ok__hla_2051:
        mov        %eax, (%esi) 
        lea        12(%esi), %edx 
        mov        $8, %ecx 
        call       read__hla_446
        jc         resource_headers_ok__hla_2052
        mov        16(%esi), %ecx 
        addl       %ecx, (%esi) 
        lea        20(%esi), %edx 
        subl       $8, %ecx 
        mov        %ecx, 16(%esi) 
        lea        (%edx,%ecx,1), %eax 
        cmpl       structures_buffer__hla_87, %eax 
        ja         out_of_memory__hla_593
        call       read__hla_446
        jc         invalid_file_format__hla_580
        mov        (%esi), %edx 
        addl       12(%esi), %edx 
        mov        16(%esi), %eax 
        lea        20(%esi), %ecx 
        lea        (%ecx,%eax,1), %esi 
        addl       $2, %ecx 
        cmpw       $65535, -2(%ecx) 
        je         resource_header_type_ok__hla_2055

check_resource_header_type__hla_2056:
        cmpl       %esi, %ecx 
        jae        invalid_file_format__hla_580
        cmpw       $0, (%ecx) 
        je         resource_header_type_ok__hla_2055
        addl       $2, %ecx 
        jmp        check_resource_header_type__hla_2056

resource_header_type_ok__hla_2055:
        addl       $2, %ecx 
        cmpw       $65535, (%ecx) 
        je         resource_header_name_ok__hla_2057

check_resource_header_name__hla_2058:
        cmpl       %esi, %ecx 
        jae        invalid_file_format__hla_580
        cmpw       $0, (%ecx) 
        je         resource_header_name_ok__hla_2057
        addl       $2, %ecx 
        jmp        check_resource_header_name__hla_2058

resource_header_name_ok__hla_2057:
        call       seek__hla_465
        jmp        read_resource_headers__hla_2050

resource_headers_ok__hla_2052:
        xorl       %eax, %eax 
        mov        %eax, (%esi) 
        mov        %edi, resource_data__hla_104 
        lea        16(%edi), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        xorl       %eax, %eax 
        stosl
        call       make_timestamp__hla_546
        stosl
        xorl       %eax, %eax 
        stosl
        stosl
        xorl       %ebx, %ebx 

make_type_name_directory__hla_2061:
        mov        free_additional_memory__hla_53, %esi 
        xorl       %edx, %edx 

find_type_name__hla_2062:
        cmpl       $0, (%esi) 
        je         type_name_ok__hla_2063
        addl       $20, %esi 
        cmpw       $65535, (%esi) 
        je         check_next_type_name__hla_2064
        orl        %ebx, %ebx 
        jz         check_this_type_name__hla_2065
        xorl       %ecx, %ecx 

compare_with_previous_type_name__hla_2066:
        mov        (%esi,%ecx,1), %ax 
        cmpw       (%ebx,%ecx,1), %ax 
        ja         check_this_type_name__hla_2065
        jb         check_next_type_name__hla_2064
        addl       $2, %ecx 
        mov        (%esi,%ecx,1), %ax 
        orw        (%ebx,%ecx,1), %ax 
        jnz        compare_with_previous_type_name__hla_2066
        jmp        check_next_type_name__hla_2064

check_this_type_name__hla_2065:
        orl        %edx, %edx 
        jz         type_name_found__hla_2067
        xorl       %ecx, %ecx 

compare_with_current_type_name__hla_2068:
        mov        (%esi,%ecx,1), %ax 
        cmpw       (%edx,%ecx,1), %ax 
        ja         check_next_type_name__hla_2064
        jb         type_name_found__hla_2067
        addl       $2, %ecx 
        mov        (%esi,%ecx,1), %ax 
        orw        (%edx,%ecx,1), %ax 
        jnz        compare_with_current_type_name__hla_2068
        jmp        same_type_name__hla_2069

type_name_found__hla_2067:
        movl       %esi, %edx 

same_type_name__hla_2069:
        mov        %edi, -16(%esi) 

check_next_type_name__hla_2064:
        mov        -4(%esi), %eax 
        addl       %eax, %esi 
        jmp        find_type_name__hla_2062

type_name_ok__hla_2063:
        orl        %edx, %edx 
        jz         type_name_directory_done__hla_2070
        movl       %edx, %ebx 

make_type_name_entry__hla_2071:
        mov        resource_data__hla_104, %eax 
        incw       12(%eax) 
        lea        8(%edi), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        movl       %ebx, %eax 
        stosl
        xorl       %eax, %eax 
        stosl
        jmp        make_type_name_directory__hla_2061

type_name_directory_done__hla_2070:
        mov        $-1, %ebx 

make_type_id_directory__hla_2074:
        mov        free_additional_memory__hla_53, %esi 
        mov        $65536, %edx 

find_type_id__hla_2075:
        cmpl       $0, (%esi) 
        je         type_id_ok__hla_2076
        addl       $20, %esi 
        cmpw       $65535, (%esi) 
        jne        check_next_type_id__hla_2077
        movzwl     2(%esi), %eax 
        cmpl       %ebx, %eax 
        jle        check_next_type_id__hla_2077
        cmpl       %edx, %eax 
        jg         check_next_type_id__hla_2077
        movl       %eax, %edx 
        mov        %edi, -16(%esi) 

check_next_type_id__hla_2077:
        mov        -4(%esi), %eax 
        addl       %eax, %esi 
        jmp        find_type_id__hla_2075

type_id_ok__hla_2076:
        cmpl       $65536, %edx 
        je         type_id_directory_done__hla_2078
        movl       %edx, %ebx 

make_type_id_entry__hla_2079:
        mov        resource_data__hla_104, %eax 
        incw       14(%eax) 
        lea        8(%edi), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        movl       %ebx, %eax 
        stosl
        xorl       %eax, %eax 
        stosl
        jmp        make_type_id_directory__hla_2074

type_id_directory_done__hla_2078:
        mov        resource_data__hla_104, %esi 
        addl       $16, %esi 
        mov        -4(%esi), %ecx 
        orw        %cx, %cx 
        jz         resource_directories_ok__hla_2082

make_resource_directories__hla_2083:
        pushl      %ecx 
        pushl      %edi 
        movl       %edi, %edx 
        subl       resource_data__hla_104, %edx 
        bts        $31, %edx 
        mov        %edx, 4(%esi) 
        lea        16(%edi), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        xorl       %eax, %eax 
        stosl
        call       make_timestamp__hla_546
        stosl
        xorl       %eax, %eax 
        stosl
        stosl
        movl       %esi, %ebp 
        xorl       %ebx, %ebx 

make_resource_name_directory__hla_2086:
        mov        free_additional_memory__hla_53, %esi 
        xorl       %edx, %edx 

find_resource_name__hla_2087:
        cmpl       $0, (%esi) 
        je         resource_name_ok__hla_2088
        pushl      %esi 
        cmpl       %ebp, 4(%esi) 
        jne        check_next_resource_name__hla_2089
        addl       $20, %esi 
        call       skip_resource_name__hla_2090
        cmpw       $65535, (%esi) 
        je         check_next_resource_name__hla_2089
        orl        %ebx, %ebx 
        jz         check_this_resource_name__hla_2091
        xorl       %ecx, %ecx 

compare_with_previous_resource_name__hla_2092:
        mov        (%esi,%ecx,1), %ax 
        cmpw       (%ebx,%ecx,1), %ax 
        ja         check_this_resource_name__hla_2091
        jb         check_next_resource_name__hla_2089
        addl       $2, %ecx 
        mov        (%esi,%ecx,1), %ax 
        orw        (%ebx,%ecx,1), %ax 
        jnz        compare_with_previous_resource_name__hla_2092
        jmp        check_next_resource_name__hla_2089

skip_resource_name__hla_2090:
        cmpw       $65535, (%esi) 
        jne        skip_unicode_string__hla_2093
        addl       $4, %esi 
        ret

skip_unicode_string__hla_2093:
        addl       $2, %esi 
        cmpw       $0, -2(%esi) 
        jne        skip_unicode_string__hla_2093
        ret

check_this_resource_name__hla_2091:
        orl        %edx, %edx 
        jz         resource_name_found__hla_2094
        xorl       %ecx, %ecx 

compare_with_current_resource_name__hla_2095:
        mov        (%esi,%ecx,1), %ax 
        cmpw       (%edx,%ecx,1), %ax 
        ja         check_next_resource_name__hla_2089
        jb         resource_name_found__hla_2094
        addl       $2, %ecx 
        mov        (%esi,%ecx,1), %ax 
        orw        (%edx,%ecx,1), %ax 
        jnz        compare_with_current_resource_name__hla_2095
        jmp        same_resource_name__hla_2096

resource_name_found__hla_2094:
        movl       %esi, %edx 

same_resource_name__hla_2096:
        mov        (%esp), %eax 
        mov        %edi, 8(%eax) 

check_next_resource_name__hla_2089:
        popl       %esi 
        mov        16(%esi), %eax 
        lea        20(%esi,%eax,1), %esi 
        jmp        find_resource_name__hla_2087

resource_name_ok__hla_2088:
        orl        %edx, %edx 
        jz         resource_name_directory_done__hla_2097
        movl       %edx, %ebx 

make_resource_name_entry__hla_2098:
        mov        (%esp), %eax 
        incw       12(%eax) 
        lea        8(%edi), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        movl       %ebx, %eax 
        stosl
        xorl       %eax, %eax 
        stosl
        jmp        make_resource_name_directory__hla_2086

resource_name_directory_done__hla_2097:
        mov        $-1, %ebx 

make_resource_id_directory__hla_2101:
        mov        free_additional_memory__hla_53, %esi 
        mov        $65536, %edx 

find_resource_id__hla_2102:
        cmpl       $0, (%esi) 
        je         resource_id_ok__hla_2103
        pushl      %esi 
        cmpl       %ebp, 4(%esi) 
        jne        check_next_resource_id__hla_2104
        addl       $20, %esi 
        call       skip_resource_name__hla_2090
        cmpw       $65535, (%esi) 
        jne        check_next_resource_id__hla_2104
        movzwl     2(%esi), %eax 
        cmpl       %ebx, %eax 
        jle        check_next_resource_id__hla_2104
        cmpl       %edx, %eax 
        jg         check_next_resource_id__hla_2104
        movl       %eax, %edx 
        mov        (%esp), %eax 
        mov        %edi, 8(%eax) 

check_next_resource_id__hla_2104:
        popl       %esi 
        mov        16(%esi), %eax 
        lea        20(%esi,%eax,1), %esi 
        jmp        find_resource_id__hla_2102

resource_id_ok__hla_2103:
        cmpl       $65536, %edx 
        je         resource_id_directory_done__hla_2105
        movl       %edx, %ebx 

make_resource_id_entry__hla_2106:
        mov        (%esp), %eax 
        incw       14(%eax) 
        lea        8(%edi), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        movl       %ebx, %eax 
        stosl
        xorl       %eax, %eax 
        stosl
        jmp        make_resource_id_directory__hla_2101

resource_id_directory_done__hla_2105:
        popl       %eax 
        movl       %ebp, %esi 
        popl       %ecx 
        addl       $8, %esi 
        decw       %cx 
        jnz        make_resource_directories__hla_2083

resource_directories_ok__hla_2082:
        shrl       $16, %ecx 
        jnz        make_resource_directories__hla_2083
        mov        resource_data__hla_104, %esi 
        addl       $16, %esi 
        movzwl     -4(%esi), %eax 
        movzwl     -2(%esi), %edx 
        addl       %edx, %eax 
        lea        (%esi,%eax,8), %esi 
        pushl      %edi 

update_resource_directories__hla_2109:
        cmpl       (%esp), %esi 
        je         resource_directories_updated__hla_2110
        addl       $16, %esi 
        mov        -4(%esi), %ecx 
        orw        %cx, %cx 
        jz         language_directories_ok__hla_2111

make_language_directories__hla_2112:
        pushl      %ecx 
        pushl      %edi 
        movl       %edi, %edx 
        subl       resource_data__hla_104, %edx 
        bts        $31, %edx 
        mov        %edx, 4(%esi) 
        lea        16(%edi), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        xorl       %eax, %eax 
        stosl
        call       make_timestamp__hla_546
        stosl
        xorl       %eax, %eax 
        stosl
        stosl
        movl       %esi, %ebp 
        mov        $-1, %ebx 

make_language_id_directory__hla_2115:
        mov        free_additional_memory__hla_53, %esi 
        mov        $65536, %edx 

find_language_id__hla_2116:
        cmpl       $0, (%esi) 
        je         language_id_ok__hla_2117
        pushl      %esi 
        cmpl       %ebp, 8(%esi) 
        jne        check_next_language_id__hla_2118
        addl       $20, %esi 
        movl       %esi, %eax 
        call       skip_resource_name__hla_2090
        call       skip_resource_name__hla_2090
        negl       %eax 
        addl       %esi, %eax 
        andl       $3, %eax 
        addl       %eax, %esi 

get_language_id__hla_2119:
        movzwl     6(%esi), %eax 
        cmpl       %ebx, %eax 
        jle        check_next_language_id__hla_2118
        cmpl       %edx, %eax 
        jge        check_next_language_id__hla_2118
        movl       %eax, %edx 
        mov        (%esp), %eax 
        mov        %eax, current_offset__hla_89 

check_next_language_id__hla_2118:
        popl       %esi 
        mov        16(%esi), %eax 
        lea        20(%esi,%eax,1), %esi 
        jmp        find_language_id__hla_2116

language_id_ok__hla_2117:
        cmpl       $65536, %edx 
        je         language_id_directory_done__hla_2120
        movl       %edx, %ebx 

make_language_id_entry__hla_2121:
        mov        (%esp), %eax 
        incw       14(%eax) 
        lea        8(%edi), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        movl       %ebx, %eax 
        stosl
        mov        current_offset__hla_89, %eax 
        stosl
        jmp        make_language_id_directory__hla_2115

language_id_directory_done__hla_2120:
        popl       %eax 
        movl       %ebp, %esi 
        popl       %ecx 
        addl       $8, %esi 
        decw       %cx 
        jnz        make_language_directories__hla_2112

language_directories_ok__hla_2111:
        shrl       $16, %ecx 
        jnz        make_language_directories__hla_2112
        jmp        update_resource_directories__hla_2109

resource_directories_updated__hla_2110:
        mov        resource_data__hla_104, %esi 
        pushl      %edi 

make_name_strings__hla_2124:
        addl       $16, %esi 
        movzwl     -2(%esi), %eax 
        movzwl     -4(%esi), %ecx 
        addl       %ecx, %eax 
        lea        (%esi,%eax,8), %eax 
        pushl      %eax 
        orl        %ecx, %ecx 
        jz         string_entries_processed__hla_2125

process_string_entries__hla_2126:
        pushl      %ecx 
        movl       %edi, %edx 
        subl       resource_data__hla_104, %edx 
        bts        $31, %edx 
        xchgl      %edx, (%esi) 
        movl       %edi, %ebx 
        xorw       %ax, %ax 
        stosw

copy_string_data__hla_2127:
        lea        2(%edi), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        mov        (%edx), %ax 
        orw        %ax, %ax 
        jz         string_data_copied__hla_2130
        stosw
        incw       (%ebx) 
        addl       $2, %edx 
        jmp        copy_string_data__hla_2127

string_data_copied__hla_2130:
        addl       $8, %esi 
        popl       %ecx 
        decl       %ecx 
        jnz        process_string_entries__hla_2126

string_entries_processed__hla_2125:
        popl       %esi 
        cmpl       (%esp), %esi 
        jb         make_name_strings__hla_2124
        movl       %edi, %eax 
        subl       resource_data__hla_104, %eax 
        testb      $3, %al 
        jz         resource_strings_alignment_ok__hla_2131
        xorw       %ax, %ax 
        stosw

resource_strings_alignment_ok__hla_2131:
        popl       %edx 
        popl       %ebx 
        movl       %edi, %ebp 

update_language_directories__hla_2132:
        addl       $16, %ebx 
        movzwl     -2(%ebx), %eax 
        movzwl     -4(%ebx), %ecx 
        addl       %eax, %ecx 

make_data_records__hla_2133:
        pushl      %ecx 
        movl       %edi, %esi 
        subl       resource_data__hla_104, %esi 
        xchgl      %esi, 4(%ebx) 
        lea        16(%edi), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        movl       %esi, %eax 
        stosl
        mov        12(%esi), %eax 
        stosl
        xorl       %eax, %eax 
        stosl
        stosl
        popl       %ecx 
        addl       $8, %ebx 
        loop       make_data_records__hla_2133
        cmpl       %edx, %ebx 
        jb         update_language_directories__hla_2132
        popl       %ebx 
        movl       %ebp, %esi 
        movl       %edi, %ebp 

update_data_records__hla_2136:
        pushl      %ebp 
        movl       %edi, %ecx 
        mov        current_section__hla_100, %eax 
        subl       20(%eax), %ecx 
        addl       12(%eax), %ecx 
        xchgl      %ecx, (%esi) 
        mov        (%ecx), %edx 
        call       seek__hla_465
        movl       %edi, %edx 
        mov        4(%esi), %ecx 
        addl       %ecx, %edi 
        cmpl       display_buffer__hla_86, %edi 
        ja         out_of_memory__hla_593
        call       read__hla_446
        movl       %edi, %eax 
        subl       resource_data__hla_104, %eax 
        andl       $3, %eax 
        jz         resource_data_alignment_ok__hla_2139
        mov        $4, %ecx 
        subl       %eax, %ecx 
        xorb       %al, %al 
        rep stosb

resource_data_alignment_ok__hla_2139:
        popl       %ebp 
        addl       $16, %esi 
        cmpl       %ebp, %esi 
        jb         update_data_records__hla_2136
        popl       %esi 
        call       close__hla_456
        movl       %edi, %eax 
        subl       resource_data__hla_104, %eax 
        mov        %eax, resource_size__hla_105 

resource_done__hla_2043:
        ret

make_pe_fixups__hla_2042:
        pushl      %esi 
        mov        number_of_relocations__hla_96, %ecx 
        mov        free_additional_memory__hla_53, %esi 
        movl       %ecx, %eax 
        shll       $2, %eax 
        subl       %eax, %esi 
        mov        %esi, free_additional_memory__hla_53 
        orl        $-1, number_of_relocations__hla_96 
        xorl       %edx, %edx 
        movl       %edi, %ebp 

make_fixups__hla_2140:
        cmpl       %edx, (%esi) 
        jb         store_fixup__hla_2141
        movl       %edi, %eax 
        subl       %ebp, %eax 
        testl      $3, %eax 
        jz         fixups_block__hla_2142
        xorw       %ax, %ax 
        stosw
        addl       $2, (%ebx) 

fixups_block__hla_2142:
        movl       %edx, %eax 
        addl       $4096, %edx 
        cmpl       %edx, (%esi) 
        jae        fixups_block__hla_2142
        stosl
        movl       %edi, %ebx 
        mov        $8, %eax 
        stosl

store_fixup__hla_2141:
        jecxz      fixups_done__hla_2143
        addl       $2, (%ebx) 
        mov        (%esi), %eax 
        andw       $4095, %ax 
        testl      $8, format_flags__hla_94 
        jnz        fixup_64bit__hla_2144
        orw        $12288, %ax 
        jmp        fixup_ok__hla_2145

fixup_64bit__hla_2144:
        orw        $40960, %ax 

fixup_ok__hla_2145:
        stosw
        addl       $4, %esi 
        decl       %ecx 
        jnz        make_fixups__hla_2140

fixups_done__hla_2143:
        popl       %esi 
        ret
xgenerate_pe_data__hla_2040:

/* procedure _0863__p____hla_2151 */

_0863__p____hla_2151:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "write_mz_header"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0863__p____hla_2151:

/* procedure write_mz_header__hla_2153 */

write_mz_header__hla_2153:
        mov        additional_memory__hla_47, %edx 
        bt         $4, format_flags__hla_94 
        jc         mz_stack_ok__hla_2154
        mov        real_code_size__hla_57, %eax 
        decl       %eax 
        shrl       $4, %eax 
        incl       %eax 
        mov        %ax, 14(%edx) 
        shll       $4, %eax 
        movzwl     16(%edx), %ecx 
        addl       %ecx, %eax 
        mov        %eax, real_code_size__hla_57 

mz_stack_ok__hla_2154:
        mov        free_additional_memory__hla_53, %edi 
        mov        number_of_relocations__hla_96, %eax 
        shll       $2, %eax 
        addl       $28, %eax 
        subl       %eax, %edi 
        xchgl      %edi, free_additional_memory__hla_53 
        mov        $15, %ecx 
        addl       $15, %eax 
        andl       $15, %eax 
        subl       %eax, %ecx 
        xorb       %al, %al 
        rep stosb
        subl       free_additional_memory__hla_53, %edi 
        movl       %edi, %ecx 
        shrl       $4, %edi 
        movw       $23117, (%edx) 
        mov        %di, 8(%edx) 
        mov        number_of_relocations__hla_96, %eax 
        mov        %ax, 6(%edx) 
        mov        code_size__hla_56, %eax 
        addl       %ecx, %eax 
        movl       %eax, %esi 
        shrl       $9, %esi 
        andl       $511, %eax 
        incw       %si 
        orw        %ax, %ax 
        jnz        mz_size_ok__hla_2157
        mov        $512, %ax 
        decw       %si 

mz_size_ok__hla_2157:
        mov        %ax, 2(%edx) 
        mov        %si, 4(%edx) 
        mov        real_code_size__hla_57, %eax 
        decl       %eax 
        shrl       $4, %eax 
        incl       %eax 
        mov        code_size__hla_56, %esi 
        decl       %esi 
        shrl       $4, %esi 
        incl       %esi 
        subl       %esi, %eax 
        mov        %ax, 10(%edx) 
        addw       %ax, 12(%edx) 
        jnc        false__hla_2158
        mov        $255, %al 
        jmp        endif__hla_2158
false__hla_2158:
        mov        $0, %al 
endif__hla_2158:
        movb       %al, %ah 
        orw        %ax, 12(%edx) 
        movw       $28, 24(%edx) 
        addl       %ecx, written_size__hla_58 
        call       write__hla_436
        ret
xwrite_mz_header__hla_2153:

/* procedure _0870__p____hla_2164 */

_0870__p____hla_2164:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "find_structure_data"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0870__p____hla_2164:

/* procedure find_structure_data__hla_2166 */

find_structure_data__hla_2166:
        mov        structures_buffer__hla_87, %ebx 

scan_structures__hla_2167:
        cmpl       additional_memory_end__hla_48, %ebx 
        je         no_such_structure__hla_2168
        cmpw       (%ebx), %ax 
        je         structure_data_found__hla_2169
        addl       $32, %ebx 
        jmp        scan_structures__hla_2167

structure_data_found__hla_2169:
        ret

no_such_structure__hla_2168:
        stc
        ret
xfind_structure_data__hla_2166:

/* procedure _087b__p____hla_2175 */

_087b__p____hla_2175:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "remove_structure_data"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_087b__p____hla_2175:

/* procedure remove_structure_data__hla_2177 */

remove_structure_data__hla_2177:
        pushl      %esi 
        pushl      %edi 
        mov        structures_buffer__hla_87, %esi 
        movl       %ebx, %ecx 
        subl       %esi, %ecx 
        lea        32(%esi), %edi 
        mov        %edi, structures_buffer__hla_87 
        shrl       $2, %ecx 
        rep movsl
        popl       %edi 
        popl       %esi 
        ret
xremove_structure_data__hla_2177:

/* procedure _0883__p____hla_2183 */

_0883__p____hla_2183:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "find_end_repeat"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0883__p____hla_2183:

/* procedure find_end_repeat__hla_2185 */

find_end_repeat__hla_2185:
        call       find_structure_end
        cmpw       repeat_directive_assembler__hla_366, %ax 
        jne        unexpected_instruction__hla_606
        ret
xfind_end_repeat__hla_2185:

/* procedure _088b__p____hla_2191 */

_088b__p____hla_2191:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "find_end_while"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_088b__p____hla_2191:

/* procedure find_end_while__hla_2193 */

find_end_while__hla_2193:
        call       find_structure_end
        cmpw       while_directive_assembler__hla_367, %ax 
        jne        unexpected_instruction__hla_606
        ret
xfind_end_while__hla_2193:

/* procedure _0893__p____hla_2199 */

_0893__p____hla_2199:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "find_else"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0893__p____hla_2199:

/* procedure find_else__hla_2201 */

find_else__hla_2201:
        call       find_structure_end
        cmpw       else_directive_assembler__hla_369, %ax 
        je         else_found__hla_2202
        cmpw       if_directive_assembler__hla_365, %ax 
        jne        unexpected_instruction__hla_606
        stc
        ret

else_found__hla_2202:
        clc
        ret
xfind_else__hla_2201:

/* procedure _089c__p____hla_2208 */

_089c__p____hla_2208:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "find_end_if"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_089c__p____hla_2208:

/* procedure find_end_if__hla_2210 */

find_end_if__hla_2210:
        call       find_structure_end
        cmpw       if_directive_assembler__hla_365, %ax 
        jne        unexpected_instruction__hla_606
        ret
xfind_end_if__hla_2210:

/* procedure _08a4__p____hla_2216 */

_08a4__p____hla_2216:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "skip_line"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_08a4__p____hla_2216:

/* procedure skip_line__hla_2218 */

skip_line__hla_2218:

skipLine__hla_2219:
        call       skip_symbol__hla_1654
        jnc        skipLine__hla_2219
        ret
xskip_line__hla_2218:

/* procedure _08ad__p____hla_2225 */

_08ad__p____hla_2225:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "skip_if_block"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_08ad__p____hla_2225:

/* procedure skip_if_block__hla_2227 */

skip_if_block__hla_2227:
        call       find_else__hla_2201
        jc         if_block_skipped__hla_2228
        cmpb       $1, (%esi) 
        jne        skip_after_else__hla_2229
        mov        1(%esi), %ax 
        cmpw       if_directive_assembler__hla_365, %ax 
        jne        skip_after_else__hla_2229
        addl       $4, %esi 
        jmp        skip_if_block__hla_2227

skip_after_else__hla_2229:
        call       find_end_if__hla_2210

if_block_skipped__hla_2228:
        ret
xskip_if_block__hla_2227:

/* procedure _08b7__p____hla_2235 */

_08b7__p____hla_2235:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "find_structure_end"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_08b7__p____hla_2235:

/* procedure find_structure_end */

find_structure_end:
        pushl      error_line__hla_84 
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 

find_end_directive__hla_2237:
        call       skip_line__hla_2218
        lodsb
        cmpb       $15, %al 
        jne        no_end_directive__hla_2238
        lodsl
        mov        %eax, current_line__hla_60 

skip_labels__hla_2239:
        cmpb       $2, (%esi) 
        jne        labels_ok__hla_2240
        addl       $6, %esi 
        jmp        skip_labels__hla_2239

labels_ok__hla_2240:
        cmpb       $1, (%esi) 
        jne        find_end_directive__hla_2237
        mov        1(%esi), %ax 
        cmpw       prefix_instruction_assembler__hla_370, %ax 
        je         find_end_directive__hla_2237
        addl       $4, %esi 
        cmpw       repeat_directive_assembler__hla_366, %ax 
        je         skip_repeat__hla_2241
        cmpw       while_directive_assembler__hla_367, %ax 
        je         skip_while__hla_2242
        cmpw       if_directive_assembler__hla_365, %ax 
        je         skip_if__hla_2243
        cmpw       else_directive_assembler__hla_369, %ax 
        je         structure_end__hla_2244
        cmpw       end_directive_assembler__hla_368, %ax 
        jne        find_end_directive__hla_2237
        cmpb       $1, (%esi) 
        jne        find_end_directive__hla_2237
        mov        1(%esi), %ax 
        addl       $4, %esi 
        cmpw       repeat_directive_assembler__hla_366, %ax 
        je         structure_end__hla_2244
        cmpw       while_directive_assembler__hla_367, %ax 
        je         structure_end__hla_2244
        cmpw       if_directive_assembler__hla_365, %ax 
        jne        find_end_directive__hla_2237

structure_end__hla_2244:
        popl       error_line__hla_84 
        ret

no_end_directive__hla_2238:
        mov        error_line__hla_84, %eax 
        mov        %eax, current_line__hla_60 
        jmp        missing_end_directive__hla_588

skip_repeat__hla_2241:
        call       find_end_repeat__hla_2185
        jmp        find_end_directive__hla_2237

skip_while__hla_2242:
        call       find_end_while__hla_2193
        jmp        find_end_directive__hla_2237

skip_if__hla_2243:
        call       skip_if_block__hla_2227
        jmp        find_end_directive__hla_2237
xfind_structure_end:

/* procedure define_data__hla_2246 */

define_data__hla_2246:
        pushl      %ebp 
        movl       %esp, %ebp 

defineData__hla_2247:
        cmpl       display_buffer__hla_86, %edi 
        jae        out_of_memory__hla_593
        cmpb       $40, (%esi) 
        jne        simple_data_value__hla_2250
        movl       %esi, %ebx 
        incl       %esi 
        call       skip_expression__hla_1663
        xchgl      %ebx, %esi 
        cmpb       $129, (%ebx) 
        jne        simple_data_value__hla_2250
        incl       %esi 
        call       get_dword_value__hla_1547
        cmpb       $0, next_pass_needed__hla_115 
        jne        dup_value_ok__hla_2251
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

dup_value_ok__hla_2251:
        incl       %esi 
        cmpl       $0, %eax 
        jg         dup_positive__hla_2252
        cmpl       $0, error_line__hla_84 
        jne        dup_invalid__hla_2253
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_value__hla_586, error__hla_85 

dup_invalid__hla_2253:
        mov        $1, %eax 

dup_positive__hla_2252:
        cmpb       $123, (%esi) 
        jne        duplicate_single_data_value__hla_2254
        incl       %esi 

duplicate_data__hla_2255:
        pushl      %eax 
        pushl      %esi 

duplicated_values__hla_2256:
        cmpl       display_buffer__hla_86, %edi 
        jae        out_of_memory__hla_593
        pushl      (%ebp) 
        call *     4(%ebp) 
        lodsb
        cmpb       $44, %al 
        je         duplicated_values__hla_2256
        cmpb       $125, %al 
        jne        invalid_argument__hla_578
        popl       %ebx 
        popl       %eax 
        decl       %eax 
        jz         data_defined__hla_2259
        movl       %ebx, %esi 
        jmp        duplicate_data__hla_2255

duplicate_single_data_value__hla_2254:
        cmpl       display_buffer__hla_86, %edi 
        jae        out_of_memory__hla_593
        pushl      %eax 
        pushl      %esi 
        pushl      (%ebp) 
        call *     4(%ebp) 
        popl       %ebx 
        popl       %eax 
        decl       %eax 
        jz         data_defined__hla_2259
        movl       %ebx, %esi 
        jmp        duplicate_single_data_value__hla_2254

simple_data_value__hla_2250:
        cmpl       display_buffer__hla_86, %edi 
        jae        out_of_memory__hla_593
        pushl      (%ebp) 
        call *     4(%ebp) 

data_defined__hla_2259:
        lodsb
        cmpb       $44, %al 
        je         defineData__hla_2247
        decl       %esi 
xdefine_data__hla_2246:
        movl       %ebp, %esp 
        popl       %ebp 
;/* add esp, 4 ;Remove succeed address*/
        addl       $4, %esp 
        ret

/* procedure get_data_bytes__hla_2265 */

get_data_bytes__hla_2265:
        pushl      $exitfor__hla_2266 
        call       define_data__hla_2246
        pushl      %ebp 
        mov        8(%esp), %ebp 
        lodsb
        cmpb       $40, %al 
        je         false__hla_2267
        cmpb       $63, %al 
        jne        invalid_argument__hla_578
        movl       %edi, %eax 
        movb       $0, (%edi) 
        incl       %edi 
        call       undefined_data__hla_2030
        jmp        endif__hla_2267
false__hla_2267:
        cmpb       $0, (%esi) 
        je         false__hla_2268
        call       get_byte_value__hla_1523
        stosb
        jmp        endif__hla_2267
false__hla_2268:
        incl       %esi 
        lodsl
        movl       %eax, %ecx 
        lea        (%edi,%ecx,1), %eax 
        cmpl       display_buffer__hla_86, %eax 
        ja         out_of_memory__hla_593
        rep movsb
        incl       %esi 
endif__hla_2267:
continue__hla_2266:
        popl       %ebp 
        ret        $4
exitfor__hla_2266:

        ret
xget_data_bytes__hla_2265:

/* procedure _08e0__p____hla_2276 */

_08e0__p____hla_2276:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_data_words"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_08e0__p____hla_2276:

/* procedure get_data_words__hla_2278 */

get_data_words__hla_2278:
        pushl      $exitfor__hla_2279 
        call       define_data__hla_2246
        pushl      %ebp 
        mov        8(%esp), %ebp 
        lodsb
        cmpb       $40, %al 
        je         false__hla_2280
        cmpb       $63, %al 
        jne        invalid_argument__hla_578
        movl       %edi, %eax 
        movw       $0, (%edi) 
        addl       $2, %edi 
        call       undefined_data__hla_2030
        jmp        endif__hla_2280
false__hla_2280:
        cmpb       $0, base_code__hla_132 
        je         L2282__hla_
        cmpb       $0, (%esi) 
        je         false__hla_2281
L2282__hla_:
        call       get_word_value__hla_1535
        call       mark_relocation
        stosw
        jmp        endif__hla_2280
false__hla_2281:
        incl       %esi 
        lodsl
        movl       %eax, %ecx 
        jecxz      word_string_ok__hla_2283
        lea        (%edi,%ecx,2), %eax 
        cmpl       display_buffer__hla_86, %eax 
        ja         out_of_memory__hla_593
        xorb       %ah, %ah 

copy_word_string__hla_2286:
        lodsb
        stosw
        loop       copy_word_string__hla_2286

word_string_ok__hla_2283:
        incl       %esi 
endif__hla_2280:
continue__hla_2279:
        popl       %ebp 
        ret        $4
exitfor__hla_2279:

        ret
xget_data_words__hla_2278:

/* procedure _08f0__p____hla_2292 */

_08f0__p____hla_2292:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_data_dwords"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_08f0__p____hla_2292:

/* procedure get_data_dwords__hla_2294 */

get_data_dwords__hla_2294:
        pushl      $exitfor__hla_2295 
        call       define_data__hla_2246
        pushl      %ebp 
        mov        8(%esp), %ebp 
        lodsb
        cmpb       $40, %al 
        je         false__hla_2296
        cmpb       $63, %al 
        jne        invalid_argument__hla_578
        movl       %edi, %eax 
        movl       $0, (%edi) 
        addl       $4, %edi 
        call       undefined_data__hla_2030
        jmp        endif__hla_2296
false__hla_2296:
        pushl      %esi 
        call       get_dword_value__hla_1547
        popl       %ebx 
        cmpb       $58, (%esi) 
        je         false__hla_2297
        call       mark_relocation
        stosl
        jmp        endif__hla_2297
false__hla_2297:
        movl       %ebx, %esi 
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_word_value__hla_1535
        pushl      %eax 
        incl       %esi 
        lodsb
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        mov        value_type__hla_130, %al 
        pushl      %eax 
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_word_value__hla_1535
        call       mark_relocation
        stosw
        popl       %eax 
        mov        %al, value_type__hla_130 
        popl       %eax 
        call       mark_relocation
        stosw
endif__hla_2297:
endif__hla_2296:
continue__hla_2295:
        popl       %ebp 
        ret        $4
exitfor__hla_2295:

        ret
xget_data_dwords__hla_2294:

/* procedure _08fb__p____hla_2303 */

_08fb__p____hla_2303:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_data_pwords"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_08fb__p____hla_2303:

/* procedure get_data_pwords__hla_2305 */

get_data_pwords__hla_2305:
        pushl      $exitfor__hla_2306 
        call       define_data__hla_2246
        pushl      %ebp 
        mov        8(%esp), %ebp 
        lodsb
        cmpb       $40, %al 
        je         false__hla_2307
        cmpb       $63, %al 
        jne        invalid_argument__hla_578
        movl       %edi, %eax 
        movl       $0, (%edi) 
        movw       $0, 4(%edi) 
        addl       $6, %edi 
        call       undefined_data__hla_2030
        jmp        endif__hla_2307
false__hla_2307:
        pushl      %esi 
        call       get_pword_value__hla_1559
        popl       %ebx 
        cmpb       $58, (%esi) 
        je         false__hla_2308
        call       mark_relocation
        stosl
        movw       %dx, %ax 
        stosw
        jmp        endif__hla_2308
false__hla_2308:
        movl       %ebx, %esi 
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_word_value__hla_1535
        pushl      %eax 
        incl       %esi 
        lodsb
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        mov        value_type__hla_130, %al 
        pushl      %eax 
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        call       mark_relocation
        stosl
        popl       %eax 
        mov        %al, value_type__hla_130 
        popl       %eax 
        call       mark_relocation
        stosw
endif__hla_2308:
endif__hla_2307:
continue__hla_2306:
        popl       %ebp 
        ret        $4
exitfor__hla_2306:

        ret
xget_data_pwords__hla_2305:

/* procedure _0906__p____hla_2314 */

_0906__p____hla_2314:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_data_qwords"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0906__p____hla_2314:

/* procedure get_data_qwords__hla_2316 */

get_data_qwords__hla_2316:
        pushl      $exitfor__hla_2317 
        call       define_data__hla_2246
        pushl      %ebp 
        mov        8(%esp), %ebp 
        lodsb
        cmpb       $40, %al 
        je         false__hla_2318
        cmpb       $63, %al 
        jne        invalid_argument__hla_578
        movl       %edi, %eax 
        movl       $0, (%edi) 
        movl       $0, 4(%edi) 
        addl       $8, %edi 
        call       undefined_data__hla_2030
        jmp        endif__hla_2318
false__hla_2318:
        call       get_qword_value__hla_1570
        call       mark_relocation
        stosl
        movl       %edx, %eax 
        stosl
endif__hla_2318:
continue__hla_2317:
        popl       %ebp 
        ret        $4
exitfor__hla_2317:

        ret
xget_data_qwords__hla_2316:

/* procedure _0910__p____hla_2324 */

_0910__p____hla_2324:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_data_twords"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0910__p____hla_2324:

/* procedure get_data_twords__hla_2326 */

get_data_twords__hla_2326:
        pushl      $exitfor__hla_2327 
        call       define_data__hla_2246
        pushl      %ebp 
        mov        8(%esp), %ebp 
        lodsb
        cmpb       $40, %al 
        je         false__hla_2328
        cmpb       $63, %al 
        jne        invalid_argument__hla_578
        movl       %edi, %eax 
        movl       $0, (%edi) 
        movl       $0, 4(%edi) 
        movw       $0, 8(%edi) 
        addl       $10, %edi 
        call       undefined_data__hla_2030
        jmp        endif__hla_2328
false__hla_2328:
        cmpb       $46, (%esi) 
        jne        false__hla_2329
        incl       %esi 
        cmpw       $32768, 8(%esi) 
        je         false__hla_2330
        mov        (%esi), %eax 
        stosl
        mov        4(%esi), %eax 
        stosl
        mov        8(%esi), %ax 
        addw       $16383, %ax 
        cmpw       $32768, %ax 
        jae        value_out_of_range__hla_607
        mov        11(%esi), %bl 
        shlw       $15, %bx 
        orw        %bx, %ax 
        stosw
        addl       $13, %esi 
        jmp        endif__hla_2330
false__hla_2330:
        xorl       %eax, %eax 
        stosl
        stosl
        mov        11(%esi), %al 
        shlw       $15, %ax 
        stosw
        addl       $13, %esi 
endif__hla_2330:
        jmp        endif__hla_2328
false__hla_2329:
        call       get_word_value__hla_1535
        pushl      %eax 
        incl       %esi 
        lodsb
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        mov        value_type__hla_130, %al 
        pushl      %eax 
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_qword_value__hla_1570
        call       mark_relocation
        stosl
        movl       %edx, %eax 
        stosl
        popl       %eax 
        mov        %al, value_type__hla_130 
        popl       %eax 
        call       mark_relocation
        stosw
endif__hla_2328:
continue__hla_2327:
        popl       %ebp 
        ret        $4
exitfor__hla_2327:

        ret
xget_data_twords__hla_2326:

/* procedure _091c__p____hla_2336 */

_091c__p____hla_2336:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_segment_prefix_if_necessary"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_091c__p____hla_2336:

/* procedure store_segment_prefix_if_necessary__hla_2338 */

store_segment_prefix_if_necessary__hla_2338:
        mov        segment_register__hla_135, %al 
        orb        %al, %al 
        jz         segment_prefix_ok__hla_2339
        cmpb       $3, %al 
        je         ss_prefix__hla_2340
        cmpb       $4, %al 
        ja         segment_prefix_386__hla_2341
        jb         segment_prefix_86__hla_2342
        cmpb       $37, %bl 
        je         segment_prefix_86__hla_2342
        cmpb       $37, %bh 
        je         segment_prefix_86__hla_2342
        cmpb       $69, %bh 
        je         segment_prefix_86__hla_2342
        cmpb       $68, %bh 
        je         segment_prefix_86__hla_2342
        ret

ss_prefix__hla_2340:
        cmpb       $37, %bl 
        je         segment_prefix_ok__hla_2339
        cmpb       $37, %bh 
        je         segment_prefix_ok__hla_2339
        cmpb       $69, %bh 
        je         segment_prefix_ok__hla_2339
        cmpb       $68, %bh 
        je         segment_prefix_ok__hla_2339

segment_prefix_86__hla_2342:
        decb       %al 
        shlb       $3, %al 
        addb       $38, %al 
        stosb
        jmp        segment_prefix_ok__hla_2339

segment_prefix_386__hla_2341:
        addb       $95, %al 
        stosb

segment_prefix_ok__hla_2339:
        ret
xstore_segment_prefix_if_necessary__hla_2338:

/* procedure _0928__p____hla_2348 */

_0928__p____hla_2348:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_segment_prefix"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0928__p____hla_2348:

/* procedure store_segment_prefix__hla_2350 */

store_segment_prefix__hla_2350:
        mov        segment_register__hla_135, %al 
        orb        %al, %al 
        jz         segment_prefix_ok__hla_2351
        cmpb       $5, %al 
        jae        segment_prefix_386__hla_2352

segment_prefix_86__hla_2353:
        decb       %al 
        shlb       $3, %al 
        addb       $38, %al 
        stosb
        jmp        segment_prefix_ok__hla_2351

segment_prefix_386__hla_2352:
        addb       $95, %al 
        stosb

segment_prefix_ok__hla_2351:
        ret
xstore_segment_prefix__hla_2350:

/* procedure _0933__p____hla_2359 */

_0933__p____hla_2359:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "operand_16bit"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0933__p____hla_2359:

/* procedure operand_16bit__hla_2361 */

operand_16bit__hla_2361:
        cmpb       $16, code_type__hla_118 
        je         size_prefix_ok__hla_2362
        movb       $102, operand_prefix__hla_139 

size_prefix_ok__hla_2362:
        ret
xoperand_16bit__hla_2361:

/* procedure _093c__p____hla_2368 */

_093c__p____hla_2368:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "operand_32bit"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_093c__p____hla_2368:

/* procedure operand_32bit__hla_2370 */

operand_32bit__hla_2370:
        cmpb       $16, code_type__hla_118 
        jne        size_prefix_ok__hla_2371
        movb       $102, operand_prefix__hla_139 

size_prefix_ok__hla_2371:
        ret
xoperand_32bit__hla_2370:

/* procedure _0945__p____hla_2377 */

_0945__p____hla_2377:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "operand_64bit"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0945__p____hla_2377:

/* procedure operand_64bit__hla_2379 */

operand_64bit__hla_2379:
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        orb        $72, rex_prefix__hla_140 
        ret
xoperand_64bit__hla_2379:

/* procedure _094d__p____hla_2385 */

_094d__p____hla_2385:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "operand_autodetect"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_094d__p____hla_2385:

/* procedure operand_autodetect__hla_2387 */

operand_autodetect__hla_2387:
        cmpb       $2, %al 
        je         operand16bit__hla_2388
        cmpb       $4, %al 
        je         operand32bit__hla_2389
        cmpb       $8, %al 
        je         operand64bit__hla_2390
        mov        $16389, %eax 
        jmp        Raise__hla_

operand16bit__hla_2388:
        jmp        operand_16bit__hla_2361

operand32bit__hla_2389:
        jmp        operand_32bit__hla_2370

operand64bit__hla_2390:
        jmp        operand_64bit__hla_2379
xoperand_autodetect__hla_2387:

/* procedure _0958__p____hla_2396 */

_0958__p____hla_2396:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "address_16bit_prefix"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0958__p____hla_2396:

/* procedure address_16bit_prefix__hla_2398 */

address_16bit_prefix__hla_2398:
        cmpb       $16, code_type__hla_118 
        je         instruction_prefix_ok__hla_2399
        mov        $103, %al 
        stosb

instruction_prefix_ok__hla_2399:
        ret
xaddress_16bit_prefix__hla_2398:

/* procedure _0961__p____hla_2405 */

_0961__p____hla_2405:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "address_32bit_prefix"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0961__p____hla_2405:

/* procedure address_32bit_prefix__hla_2407 */

address_32bit_prefix__hla_2407:
        cmpb       $32, code_type__hla_118 
        je         instruction_prefix_ok__hla_2408
        mov        $103, %al 
        stosb

instruction_prefix_ok__hla_2408:
        ret
xaddress_32bit_prefix__hla_2407:

/* procedure _096a__p____hla_2414 */

_096a__p____hla_2414:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_instruction_code"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_096a__p____hla_2414:

/* procedure store_instruction_code__hla_2416 */

store_instruction_code__hla_2416:
        mov        operand_prefix__hla_139, %al 
        orb        %al, %al 
        jz         operand_prefix_ok__hla_2417
        stosb

operand_prefix_ok__hla_2417:
        mov        rex_prefix__hla_140, %al 
        testb      $64, %al 
        jz         rex_prefix_ok__hla_2418
        cmpb       $64, code_type__hla_118 
        jne        invalid_operand__hla_583
        testb      $176, %al 
        jnz        prefix_conflict__hla_595
        stosb

rex_prefix_ok__hla_2418:
        mov        base_code__hla_132, %al 
        stosb
        cmpb       $15, %al 
        jne        instruction_code_ok__hla_2419

store_extended_code__hla_2420:
        mov        extended_code__hla_133, %al 
        stosb

instruction_code_ok__hla_2419:
        ret
xstore_instruction_code__hla_2416:

/* procedure _0976__p____hla_2426 */

_0976__p____hla_2426:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_address_32bit_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0976__p____hla_2426:

/* procedure store_address_32bit_value__hla_2428 */

store_address_32bit_value__hla_2428:
        testb      $240, %ch 
        jz         address_32bit_relocation_ok__hla_2429
        mov        $2, %al 
        xchgb      %al, value_type__hla_130 
        mov        address_symbol__hla_92, %ebx 
        xchgl      %ebx, symbol_identifier__hla_91 
        call       mark_relocation
        mov        %al, value_type__hla_130 
        mov        %ebx, symbol_identifier__hla_91 

address_32bit_relocation_ok__hla_2429:
        movl       %edx, %eax 
        stosl
        ret
xstore_address_32bit_value__hla_2428:

/* procedure _097f__p____hla_2435 */

_097f__p____hla_2435:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_address_64bit_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_097f__p____hla_2435:

/* procedure store_address_64bit_value__hla_2437 */

store_address_64bit_value__hla_2437:
        testb      $240, %ch 
        jz         address_64bit_relocation_ok__hla_2438
        mov        $4, %al 
        xchgb      %al, value_type__hla_130 
        mov        address_symbol__hla_92, %ebx 
        xchgl      %ebx, symbol_identifier__hla_91 
        call       mark_relocation
        mov        %al, value_type__hla_130 
        mov        %ebx, symbol_identifier__hla_91 

address_64bit_relocation_ok__hla_2438:
        movl       %edx, %eax 
        stosl
        mov        address_high__hla_93, %eax 
        stosl
        ret
xstore_address_64bit_value__hla_2437:

/* procedure _0988__p____hla_2444 */

_0988__p____hla_2444:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_instruction"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0988__p____hla_2444:

/* procedure store_instruction__hla_2446 */

store_instruction__hla_2446:
        mov        %edi, current_offset__hla_89 
        testb      $8, postbyte_register__hla_134 
        jz         reg_code_ok__hla_2447
        orb        $68, rex_prefix__hla_140 
        andb       $7, postbyte_register__hla_134 

reg_code_ok__hla_2447:
        call       store_segment_prefix_if_necessary__hla_2338
        orw        %bx, %bx 
        jz         address_immediate__hla_2448
        cmpw       $61440, %bx 
        je         address_rip_based__hla_2449
        cmpw       $65280, %bx 
        je         address_relative__hla_2450
        movb       %bl, %al 
        orb        %bh, %al 
        andb       $240, %al 
        cmpb       $128, %al 
        je         postbyte_64bit__hla_2451
        cmpb       $64, %al 
        je         postbyte_32bit__hla_2452
        cmpb       $32, %al 
        jne        invalid_address__hla_576
        cmpb       $64, code_type__hla_118 
        je         invalid_address_size__hla_577
        call       address_16bit_prefix__hla_2398
        call       store_instruction_code__hla_2416
        cmpw       $8998, %bx 
        je         address_bx_si__hla_2453
        cmpw       $9763, %bx 
        je         address_bx_si__hla_2453
        cmpw       $8999, %bx 
        je         address_bx_di__hla_2454
        cmpw       $10019, %bx 
        je         address_bx_di__hla_2454
        cmpw       $9510, %bx 
        je         address_bp_si__hla_2455
        cmpw       $9765, %bx 
        je         address_bp_si__hla_2455
        cmpw       $9511, %bx 
        je         address_bp_di__hla_2456
        cmpw       $10021, %bx 
        je         address_bp_di__hla_2456
        cmpw       $9728, %bx 
        je         address_si__hla_2457
        cmpw       $9984, %bx 
        je         address_di__hla_2458
        cmpw       $8960, %bx 
        je         address_bx__hla_2459
        cmpw       $9472, %bx 
        je         address_bp__hla_2460
        jmp        invalid_address__hla_576

address_bx_si__hla_2453:
        xorb       %al, %al 
        jmp        postbyte_16bit__hla_2461

address_bx_di__hla_2454:
        mov        $1, %al 
        jmp        postbyte_16bit__hla_2461

address_bp_si__hla_2455:
        mov        $2, %al 
        jmp        postbyte_16bit__hla_2461

address_bp_di__hla_2456:
        mov        $3, %al 
        jmp        postbyte_16bit__hla_2461

address_si__hla_2457:
        mov        $4, %al 
        jmp        postbyte_16bit__hla_2461

address_di__hla_2458:
        mov        $5, %al 
        jmp        postbyte_16bit__hla_2461

address_bx__hla_2459:
        mov        $7, %al 
        jmp        postbyte_16bit__hla_2461

address_bp__hla_2460:
        mov        $6, %al 

postbyte_16bit__hla_2461:
        testb      $34, %ch 
        jnz        address_16bit_value__hla_2462
        orb        %ch, %ch 
        jnz        address_sizes_do_not_agree__hla_567
        cmpl       $65536, %edx 
        jge        value_out_of_range__hla_607
        cmpl       $-32768, %edx 
        jl         value_out_of_range__hla_607
        orw        %dx, %dx 
        jz         address__hla_2463
        cmpw       $128, %dx 
        jb         address_8bit_value__hla_2464
        cmpw       $65408, %dx 
        jae        address_8bit_value__hla_2464

address_16bit_value__hla_2462:
        orb        $128, %al 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosb
        movl       %edx, %eax 
        stosw
        ret

address_8bit_value__hla_2464:
        orb        $64, %al 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosb
        movb       %dl, %al 
        stosb
        cmpw       $128, %dx 
        jge        value_out_of_range__hla_607
        cmpw       $65408, %dx 
        jl         value_out_of_range__hla_607
        ret

address__hla_2463:
        cmpb       $6, %al 
        je         address_8bit_value__hla_2464
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosb
        ret

postbyte_32bit__hla_2452:
        call       address_32bit_prefix__hla_2407
        jmp        address_prefix_ok__hla_2465

postbyte_64bit__hla_2451:
        cmpb       $64, code_type__hla_118 
        jne        invalid_address_size__hla_577

address_prefix_ok__hla_2465:
        testb      $8, %bh 
        jz         base_code_ok__hla_2466
        orb        $65, rex_prefix__hla_140 

base_code_ok__hla_2466:
        testb      $8, %bl 
        jz         index_code_ok__hla_2467
        orb        $66, rex_prefix__hla_140 

index_code_ok__hla_2467:
        call       store_instruction_code__hla_2416
        cmpb       $68, %bl 
        je         invalid_address__hla_576
        cmpb       $132, %bl 
        je         invalid_address__hla_576
        orb        %cl, %cl 
        jz         only_base_register__hla_2468

base_and_index__hla_2469:
        mov        $4, %al 
        xorb       %ah, %ah 
        cmpb       $1, %cl 
        je         scale_ok__hla_2470
        cmpb       $2, %cl 
        je         scale_1__hla_2471
        cmpb       $4, %cl 
        je         scale_2__hla_2472
        orb        $192, %ah 
        jmp        scale_ok__hla_2470

scale_2__hla_2472:
        orb        $128, %ah 
        jmp        scale_ok__hla_2470

scale_1__hla_2471:
        orb        $64, %ah 

scale_ok__hla_2470:
        orb        %bh, %bh 
        jz         only_index_register__hla_2473
        andb       $7, %bl 
        shlb       $3, %bl 
        orb        %bl, %ah 
        andb       $7, %bh 
        orb        %bh, %ah 
        testb      $68, %ch 
        jnz        sib_address_32bit_value__hla_2474
        orb        %ch, %ch 
        jnz        address_sizes_do_not_agree__hla_567
        cmpb       $5, %bh 
        je         address_value__hla_2475
        orl        %edx, %edx 
        jz         sib_address__hla_2476

address_value__hla_2475:
        cmpl       $128, %edx 
        jb         sib_address_8bit_value__hla_2477
        cmpl       $-128, %edx 
        jae        sib_address_8bit_value__hla_2477

sib_address_32bit_value__hla_2474:
        orb        $128, %al 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosw
        jmp        store_address_32bit_value__hla_2428

sib_address_8bit_value__hla_2477:
        orb        $64, %al 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosw
        movb       %dl, %al 
        stosb
        cmpl       $128, %edx 
        jge        value_out_of_range__hla_607
        cmpl       $-128, %edx 
        jl         value_out_of_range__hla_607
        ret

sib_address__hla_2476:
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosw
        ret

only_index_register__hla_2473:
        orb        $5, %ah 
        andb       $7, %bl 
        shlb       $3, %bl 
        orb        %bl, %ah 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosw
        testb      $68, %ch 
        jnz        store_address_32bit_value__hla_2478
        orb        %ch, %ch 
        jnz        invalid_address_size__hla_577
        jmp        store_address_32bit_value__hla_2428

zero_index_register__hla_2479:
        mov        $4, %bl 
        mov        $1, %cl 
        jmp        base_and_index__hla_2469

only_base_register__hla_2468:
        movb       %bh, %al 
        andb       $7, %al 
        cmpb       $4, %al 
        je         zero_index_register__hla_2479
        testb      $68, %ch 
        jnz        simple_address_32bit_value__hla_2480
        orb        %ch, %ch 
        jnz        address_sizes_do_not_agree__hla_567
        orl        %edx, %edx 
        jz         simple_address__hla_2481
        cmpl       $128, %edx 
        jb         simple_address_8bit_value__hla_2482
        cmpl       $-128, %edx 
        jae        simple_address_8bit_value__hla_2482

simple_address_32bit_value__hla_2480:
        orb        $128, %al 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosb
        jmp        store_address_32bit_value__hla_2428

simple_address_8bit_value__hla_2482:
        orb        $64, %al 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosb
        movb       %dl, %al 
        stosb
        cmpl       $128, %edx 
        jge        value_out_of_range__hla_607
        cmpl       $-128, %edx 
        jl         value_out_of_range__hla_607
        ret

simple_address__hla_2481:
        cmpb       $5, %al 
        je         simple_address_8bit_value__hla_2482
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosb
        ret

address_immediate__hla_2448:
        cmpb       $64, code_type__hla_118 
        je         address_immediate_sib__hla_2483
        testb      $68, %ch 
        jnz        address_immediate_32bit__hla_2484
        testb      $34, %ch 
        jnz        address_immediate_16bit__hla_2485
        orb        %ch, %ch 
        jnz        invalid_address_size__hla_577
        cmpb       $16, code_type__hla_118 
        je         addressing_16bit__hla_2486

address_immediate_32bit__hla_2484:
        call       address_32bit_prefix__hla_2407
        call       store_instruction_code__hla_2416

store_immediate_address__hla_2487:
        mov        $5, %al 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosb
        jmp        store_address_32bit_value__hla_2428

address_immediate_sib__hla_2483:
        testb      $187, %ch 
        jnz        invalid_address_size__hla_577
        call       address_32bit_prefix__hla_2407
        call       store_instruction_code__hla_2416
        mov        $4, %al 
        mov        $37, %ah 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosw
        jmp        store_address_32bit_value__hla_2428

address_rip_based__hla_2449:
        cmpb       $64, code_type__hla_118 
        jne        invalid_address__hla_576
        call       store_instruction_code__hla_2416
        jmp        store_immediate_address__hla_2487

address_relative__hla_2450:
        call       store_instruction_code__hla_2416
        movzbl     immediate_size__hla_141, %eax 
        addl       %edi, %eax 
        subl       current_offset__hla_89, %eax 
        addl       $5, %eax 
        subl       %eax, %edx 
        jo         value_out_of_range__hla_607
        mov        $5, %al 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosb
        xchgb      %ch, value_type__hla_130 
        mov        address_symbol__hla_92, %ebx 
        xchgl      %ebx, symbol_identifier__hla_91 
        movl       %edx, %eax 
        call       mark_relocation
        mov        %ch, value_type__hla_130 
        mov        %ebx, symbol_identifier__hla_91 
        stosl
        ret

addressing_16bit__hla_2486:
        cmpl       $65536, %edx 
        jge        address_immediate_32bit__hla_2484
        cmpl       $-32768, %edx 
        jl         address_immediate_32bit__hla_2484
        movzwl     %dx, %edx 

address_immediate_16bit__hla_2485:
        call       address_16bit_prefix__hla_2398
        call       store_instruction_code__hla_2416
        mov        $6, %al 
        mov        postbyte_register__hla_134, %cl 
        shlb       $3, %cl 
        orb        %cl, %al 
        stosb
        movl       %edx, %eax 
        stosw
        cmpl       $65536, %edx 
        jge        value_out_of_range__hla_607
        cmpl       $-32768, %edx 
        jl         value_out_of_range__hla_607
        ret
xstore_instruction__hla_2446:

/* procedure _09b9__p____hla_2493 */

_09b9__p____hla_2493:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_instruction_with_imm8"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_09b9__p____hla_2493:

/* procedure store_instruction_with_imm8__hla_2495 */

store_instruction_with_imm8__hla_2495:
        movb       $1, immediate_size__hla_141 
        call       store_instruction__hla_2446
        mov        value__hla_41, %al 
        stosb
        ret
xstore_instruction_with_imm8__hla_2495:

/* procedure _09c1__p____hla_2501 */

_09c1__p____hla_2501:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_instruction_with_imm16"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_09c1__p____hla_2501:

/* procedure store_instruction_with_imm16__hla_2503 */

store_instruction_with_imm16__hla_2503:
        movb       $2, immediate_size__hla_141 
        call       store_instruction__hla_2446
        mov        value__hla_41, %ax 
        call       mark_relocation
        stosw
        ret
xstore_instruction_with_imm16__hla_2503:

/* procedure _09c9__p____hla_2509 */

_09c9__p____hla_2509:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_instruction_with_imm32"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_09c9__p____hla_2509:

/* procedure store_instruction_with_imm32__hla_2511 */

store_instruction_with_imm32__hla_2511:
        movb       $4, immediate_size__hla_141 
        call       store_instruction__hla_2446
        mov        value__hla_41, %eax 
        call       mark_relocation
        stosl
        ret
xstore_instruction_with_imm32__hla_2511:

/* procedure _09d1__p____hla_2517 */

_09d1__p____hla_2517:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_simm32"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_09d1__p____hla_2517:

/* procedure get_simm32__hla_2519 */

get_simm32__hla_2519:
        call       get_qword_value__hla_1570
        movl       %edx, %ecx 
        cdq
        cmpl       %edx, %ecx 
        jne        value_out_of_range__hla_607
        ret
xget_simm32__hla_2519:

/* procedure _09d9__p____hla_2525 */

_09d9__p____hla_2525:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_nomem_instruction"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_09d9__p____hla_2525:

/* procedure store_nomem_instruction__hla_2527 */

store_nomem_instruction__hla_2527:
        testb      $8, postbyte_register__hla_134 
        jz         nomem_reg_code_ok__hla_2528
        orb        $68, rex_prefix__hla_140 
        andb       $7, postbyte_register__hla_134 

nomem_reg_code_ok__hla_2528:
        testb      $8, %bl 
        jz         nomem_rm_code_ok__hla_2529
        orb        $65, rex_prefix__hla_140 
        andb       $7, %bl 

nomem_rm_code_ok__hla_2529:
        call       store_instruction_code__hla_2416
        mov        postbyte_register__hla_134, %al 
        shlb       $3, %al 
        orb        %bl, %al 
        orb        $192, %al 
        stosb
        ret
xstore_nomem_instruction__hla_2527:

/* procedure _09e3__p____hla_2535 */

_09e3__p____hla_2535:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "calculate_relative_address"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_09e3__p____hla_2535:

/* procedure calculate_relative_address__hla_2537 */

calculate_relative_address__hla_2537:
        call       calculate_relative_offset__hla_1641
        cmpb       $93, -1(%esi) 
        jne        invalid_address__hla_576
        mov        %edx, address_high__hla_93 
        mov        symbol_identifier__hla_91, %edx 
        mov        %edx, address_symbol__hla_92 
        movl       %eax, %edx 
        mov        value_type__hla_130, %ch 
        mov        $65280, %bx 
        xorb       %cl, %cl 

address_ok__hla_2538:
        ret
xcalculate_relative_address__hla_2537:

/* procedure _09ec__p____hla_2544 */

_09ec__p____hla_2544:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_address"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_09ec__p____hla_2544:

/* procedure get_address__hla_2546 */

get_address__hla_2546:
        movb       $0, segment_register__hla_135 
        movb       $0, address_size__hla_126 
        mov        code_type__hla_118, %al 
        shrb       $3, %al 
        mov        %al, value_size__hla_124 
        mov        (%esi), %al 
        andb       $240, %al 
        cmpb       $96, %al 
        jne        get_size_prefix__hla_2547
        lodsb
        subb       $96, %al 
        mov        %al, segment_register__hla_135 
        mov        (%esi), %al 
        andb       $240, %al 

get_size_prefix__hla_2547:
        cmpb       $112, %al 
        jne        address_size_prefix_ok__hla_2548
        lodsb
        subb       $112, %al 
        cmpb       $2, %al 
        jb         invalid_address_size__hla_577
        cmpb       $8, %al 
        ja         invalid_address_size__hla_577
        mov        %al, address_size__hla_126 
        mov        %al, value_size__hla_124 

address_size_prefix_ok__hla_2548:
        call       calculate_address__hla_1616
        cmpb       $93, -1(%esi) 
        jne        invalid_address__hla_576
        mov        %edx, address_high__hla_93 
        movl       %eax, %edx 
        cmpb       $64, code_type__hla_118 
        jne        address_ok__hla_2549
        orw        %bx, %bx 
        jnz        address_ok__hla_2549
        testb      $15, %ch 
        jnz        address_ok__hla_2549
        call       calculate_relative_address__hla_2537

address_ok__hla_2549:
        ret
xget_address__hla_2546:

/* procedure _09f7__p____hla_2555 */

_09f7__p____hla_2555:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_mov_reg_imm_code"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_09f7__p____hla_2555:

/* procedure store_mov_reg_imm_code__hla_2557 */

store_mov_reg_imm_code__hla_2557:
        mov        postbyte_register__hla_134, %ah 
        testb      $8, %ah 
        jz         mov_reg_imm_prefix_ok__hla_2558
        orb        $65, rex_prefix__hla_140 

mov_reg_imm_prefix_ok__hla_2558:
        andb       $7, %ah 
        addb       %ah, %al 
        mov        %al, base_code__hla_132 
        call       store_instruction_code__hla_2416
        ret
xstore_mov_reg_imm_code__hla_2557:

/* procedure _0a00__p____hla_2564 */

_0a00__p____hla_2564:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "calculate_jump_offset"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a00__p____hla_2564:

/* procedure calculate_jump_offset__hla_2566 */

calculate_jump_offset__hla_2566:
        cmpb       $0, value_undefined__hla_129 
        jne        jump_offset_ok__hla_2567
        addl       org_origin__hla_40, %eax 
        adcl       org_origin__hla_40+4, %edx 
        lea        2(%edi), %ebx 
        subl       %ebx, %eax 
        sbbl       $0, %edx 
        mov        value_type__hla_130, %bl 
        orb        %bl, %bl 
        je         jump_offset_ok__hla_2567
        testb      $1, %bl 
        jnz        invalid_use_of_symbol__hla_585
        cmpb       labels_type__hla_119, %bl 
        jne        invalid_use_of_symbol__hla_585
        movb       $0, value_type__hla_130 
        mov        symbol_identifier__hla_91, %ecx 
        cmpl       org_symbol__hla_79, %ecx 
        je         jump_offset_ok__hla_2567
        movb       $3, value_type__hla_130 

jump_offset_ok__hla_2567:
        ret
xcalculate_jump_offset__hla_2566:

/* procedure _0a09__p____hla_2573 */

_0a09__p____hla_2573:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "check_for_short_jump"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a09__p____hla_2573:

/* procedure check_for_short_jump__hla_2575 */

check_for_short_jump__hla_2575:
        cmpb       $1, jump_type__hla_137 
        je         forced_short__hla_2576
        ja         no_short_jump__hla_2577
        cmpb       $232, base_code__hla_132 
        je         no_short_jump__hla_2577
        cmpb       $0, value_type__hla_130 
        jne        no_short_jump__hla_2577
        cmpl       $128, %eax 
        jb         short_jump__hla_2578
        cmpl       $-128, %eax 
        jae        short_jump__hla_2578

no_short_jump__hla_2577:
        clc
        ret

forced_short__hla_2576:
        cmpb       $232, base_code__hla_132 
        je         illegal_instruction__hla_574
        cmpb       $0, next_pass_needed__hla_115 
        jne        jmp_short_value_type_ok__hla_2579
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

jmp_short_value_type_ok__hla_2579:
        cmpl       $-128, %eax 
        jae        short_jump__hla_2578
        cmpl       $128, %eax 
        jae        jump_out_of_range__hla_2580

short_jump__hla_2578:
        stc
        ret

jump_out_of_range__hla_2580:
        cmpl       $0, error_line__hla_84 
        jne        instruction_assembled__hla_2581
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $relative_jump_out_of_range__hla_596, error__hla_85 

instruction_assembled__hla_2581:
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2582
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2582:
        clc
        ret
xcheck_for_short_jump__hla_2575:

/* procedure _0a18__p____hla_2588 */

_0a18__p____hla_2588:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "make_mmx_prefix"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a18__p____hla_2588:

/* procedure make_mmx_prefix__hla_2590 */

make_mmx_prefix__hla_2590:
        cmpb       $16, operand_size__hla_127 
        jne        no_mmx_prefix__hla_2591
        movb       $102, operand_prefix__hla_139 

no_mmx_prefix__hla_2591:
        ret
xmake_mmx_prefix__hla_2590:

/* procedure _0a21__p____hla_2597 */

_0a21__p____hla_2597:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_nextbyte"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a21__p____hla_2597:

/* procedure get_nextbyte__hla_2599 */

get_nextbyte__hla_2599:
        cmpb       $-1, value__hla_41 
        jne        nextbyte_ok__hla_2600
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        testb      $254, operand_size__hla_127 
        jnz        invalid_value__hla_586
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        call       get_byte_value__hla_1523
        cmpb       $7, %al 
        ja         invalid_value__hla_586
        mov        %al, value__hla_41 

nextbyte_ok__hla_2600:
        ret
xget_nextbyte__hla_2599:

/* procedure _0a2a__p____hla_2606 */

_0a2a__p____hla_2606:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "match_register_size"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a2a__p____hla_2606:

/* procedure match_register_size__hla_2608 */

match_register_size__hla_2608:
        cmpb       operand_size__hla_127, %ah 
        je         register_size_ok__hla_2609
        cmpb       $0, operand_size__hla_127 
        jne        operand_sizes_do_not_match__hla_591
        mov        %ah, operand_size__hla_127 

register_size_ok__hla_2609:
        ret
xmatch_register_size__hla_2608:

/* procedure _0a33__p____hla_2615 */

_0a33__p____hla_2615:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "convert_register"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a33__p____hla_2615:

/* procedure convert_register__hla_2617 */

convert_register__hla_2617:
        movb       %al, %ah 
        shrb       $4, %ah 
        andb       $15, %al 
        cmpb       $8, %ah 
        je         match_register_size__hla_2618
        cmpb       $4, %ah 
        ja         invalid_operand__hla_583
        cmpb       $1, %ah 
        ja         match_register_size__hla_2618
        cmpb       $4, %al 
        jb         match_register_size__hla_2618
        orb        %ah, %ah 
        jz         high_byte_register__hla_2619
        orb        $64, rex_prefix__hla_140 
        jmp        match_register_size__hla_2608

high_byte_register__hla_2619:
        mov        $1, %ah 
        orb        $128, rex_prefix__hla_140 
        jmp        match_register_size__hla_2608
xconvert_register__hla_2617:

/* procedure _0a3d__p____hla_2625 */

_0a3d__p____hla_2625:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "convert_fpu_register"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a3d__p____hla_2625:

/* procedure convert_fpu_register__hla_2627 */

convert_fpu_register__hla_2627:
        movb       %al, %ah 
        shrb       $4, %ah 
        andb       $7, %al 
        cmpb       $10, %ah 
        jne        invalid_operand__hla_583
        jmp        match_register_size__hla_2608
xconvert_fpu_register__hla_2627:

/* procedure _0a45__p____hla_2633 */

_0a45__p____hla_2633:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "convert_mmx_register"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a45__p____hla_2633:

/* procedure convert_mmx_register__hla_2635 */

convert_mmx_register__hla_2635:
        movb       %al, %ah 
        shrb       $4, %ah 
        cmpb       $12, %ah 
        je         xmm_register__hla_2636
        ja         invalid_operand__hla_583
        andb       $7, %al 
        cmpb       $11, %ah 
        jne        invalid_operand__hla_583
        mov        $8, %ah 
        jmp        match_register_size__hla_2608

xmm_register__hla_2636:
        andb       $15, %al 
        mov        $16, %ah 
        cmpb       $8, %al 
        jb         match_register_size__hla_2637
        cmpb       $64, code_type__hla_118 
        jne        invalid_operand__hla_583
        jmp        match_register_size__hla_2608
xconvert_mmx_register__hla_2635:

/* procedure _0a4f__p____hla_2643 */

_0a4f__p____hla_2643:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_jump_operator"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a4f__p____hla_2643:

/* procedure get_jump_operator__hla_2645 */

get_jump_operator__hla_2645:
        movb       $0, jump_type__hla_137 
        cmpb       $18, %al 
        jne        jump_operator_ok__hla_2646
        lodsw
        mov        %al, jump_type__hla_137 
        movb       %ah, %al 

jump_operator_ok__hla_2646:
        ret
xget_jump_operator__hla_2645:

/* procedure _0a58__p____hla_2652 */

_0a58__p____hla_2652:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "make_stub"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a58__p____hla_2652:

/* procedure make_stub__hla_2654 */

make_stub__hla_2654:
        mov        %edx, stub_file__hla_99 
        orl        %edx, %edx 
        jnz        stub_from_file__hla_2655
        pushl      %esi 
        movl       %edi, %edx 
        xorl       %eax, %eax 
        mov        $32, %ecx 
        rep stosl
        movl       $default_stub_end__hla_2656, %eax 
        subl       $default_stub__hla_2657, %eax 
        addl       $64, %eax 
        lea        192(%eax), %ecx 
        movw       $23117, (%edx) 
        movw       $1, 4(%edx) 
        mov        %ax, 2(%edx) 
        movw       $4, 8(%edx) 
        movw       $16, 10(%edx) 
        movw       $65535, 12(%edx) 
        mov        %cx, 16(%edx) 
        mov        %ax, 60(%edx) 
        movw       $64, 24(%edx) 
        lea        64(%edx), %edi 
        movl       $default_stub__hla_2657, %esi 
        movl       $default_stub_end__hla_2656, %ecx 
        subl       $default_stub__hla_2657, %ecx 
        rep movsb
        popl       %esi 
        jmp        stub_ok__hla_2660

default_stub__hla_2657:
        .byte      0xe
        .byte      0x1f
        .byte      0xba
        .byte      0xe
        .byte      0x0
        .byte      0xb4
        .byte      0x9
        .byte      0xcd
        .byte      0x21
        .byte      0xb8
        .byte      0x1
        .byte      0x4c
        .byte      0xcd
        .byte      0x21

stub_message__hla_2661:

 .ascii "This program cannot be run in DOS mode."
        .byte      0xd
        .byte      0xa
        .byte      0x24
        .long      0x0, 0x0

default_stub_end__hla_2656:

stub_from_file__hla_2655:
        pushl      %esi 
        movl       %edx, %esi 
        call       open_binary_file__hla_2018
        movl       %edi, %edx 
        mov        $28, %ecx 
        movl       %edx, %esi 
        call       read__hla_446
        jc         binary_stub__hla_2662
        cmpw       $23117, (%esi) 
        jne        binary_stub__hla_2662
        addl       $28, %edi 
        movzwl     6(%esi), %ecx 
        addl       $3, %ecx 
        andl       $-4, %ecx 
        addl       $9, %ecx 
        lea        (%edi,%ecx,4), %eax 
        cmpl       display_buffer__hla_86, %edi 
        jae        out_of_memory__hla_593
        xorl       %eax, %eax 
        rep stosl
        mov        $64, %edx 
        xchgw      %dx, 24(%esi) 
        call       seek__hla_465
        movzwl     6(%esi), %ecx 
        shll       $2, %ecx 
        lea        64(%esi), %edx 
        call       read__hla_446
        movl       %edi, %edx 
        subl       %esi, %edx 
        shrl       $4, %edx 
        xchgw      %dx, 8(%esi) 
        shll       $4, %edx 
        call       seek__hla_465
        movzwl     4(%esi), %ecx 
        decl       %ecx 
        shll       $9, %ecx 
        movzwl     2(%esi), %edx 
        addl       %edx, %ecx 
        movl       %edi, %edx 
        subl       %eax, %ecx 
        je         read_stub_code__hla_2667
        jb         stub_code_ok__hla_2668
        pushl      %ecx 
        decl       %ecx 
        shrl       $3, %ecx 
        incl       %ecx 
        shll       $1, %ecx 
        lea        (%edi,%ecx,4), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        xorl       %eax, %eax 
        rep stosl
        popl       %ecx 

read_stub_code__hla_2667:
        call       read__hla_446

stub_code_ok__hla_2668:
        call       close__hla_456
        movl       %edi, %edx 
        subl       %esi, %edx 
        movw       %dx, %ax 
        andw       $511, %ax 
        mov        %ax, 2(%esi) 
        decl       %edx 
        shrl       $9, %edx 
        incl       %edx 
        mov        %dx, 4(%esi) 
        movl       %edi, %eax 
        subl       %esi, %eax 
        mov        %eax, 60(%esi) 
        popl       %esi 

stub_ok__hla_2660:
        ret

binary_stub__hla_2662:
        movl       %edi, %esi 
        mov        $16, %ecx 
        xorl       %eax, %eax 
        rep stosl
        xorl       %edx, %edx 
        call       rseek__hla_483
        pushl      %eax 
        xorl       %edx, %edx 
        call       seek__hla_465
        mov        (%esp), %ecx 
        addl       $71, %ecx 
        andl       $-8, %ecx 
        movw       %cx, %ax 
        andw       $511, %ax 
        mov        %ax, 2(%esi) 
        lea        511(%ecx), %eax 
        andl       $-512, %eax 
        mov        %ax, 4(%esi) 
        mov        %ecx, 60(%esi) 
        subl       $64, %ecx 
        mov        $65536, %eax 
        subl       %ecx, %eax 
        jbe        binary_heap_ok__hla_2671
        shrl       $4, %eax 
        mov        %ax, 10(%esi) 

binary_heap_ok__hla_2671:
        movw       $23117, (%esi) 
        movw       $4, 8(%esi) 
        mov        $65535, %ax 
        mov        %ax, 12(%esi) 
        decw       %ax 
        mov        %ax, 16(%esi) 
        subw       $14, %ax 
        mov        %ax, 14(%esi) 
        mov        %ax, 22(%esi) 
        movw       $256, 20(%esi) 
        movw       $64, 24(%esi) 
        mov        display_buffer__hla_86, %eax 
        subl       %ecx, %eax 
        cmpl       %eax, %edi 
        jae        out_of_memory__hla_593
        movl       %edi, %edx 
        shrl       $2, %ecx 
        xorl       %eax, %eax 
        rep stosl
        popl       %ecx 
        call       read__hla_446
        call       close__hla_456
        popl       %esi 
        ret
xmake_stub__hla_2654:

/* procedure fasmAssembler */

fasmAssembler:
        xorl       %eax, %eax 
        mov        %eax, stub_size__hla_98 
        mov        %eax, number_of_sections__hla_97 
        mov        %ax, current_pass__hla_111 

assembler_loop__hla_2677:
        mov        labels_list__hla_73, %eax 
        mov        %eax, display_buffer__hla_86 
        mov        additional_memory__hla_47, %eax 
        mov        %eax, free_additional_memory__hla_53 
        mov        additional_memory_end__hla_48, %eax 
        mov        %eax, structures_buffer__hla_87 
        mov        source_start__hla_54, %esi 
        mov        code_start__hla_55, %edi 
        xorl       %eax, %eax 
        mov        %eax, adjustment__hla_42 
        mov        %eax, adjustment__hla_42+4 
        mov        %edi, org_origin__hla_40 
        mov        %eax, org_origin__hla_40+4 
        mov        %edi, org_start__hla_78 
        mov        %eax, org_registers__hla_77 
        mov        %eax, org_symbol__hla_79 
        mov        %eax, error_line__hla_84 
        mov        %eax, counter__hla_82 
        mov        %eax, format_flags__hla_94 
        mov        %eax, number_of_relocations__hla_96 
        mov        %eax, undefined_data_end__hla_81 
        mov        %al, next_pass_needed__hla_115 
        mov        %al, output_format__hla_117 
        mov        %al, labels_type__hla_119 
        mov        %al, virtual_data__hla_121 
        movb       $16, code_type__hla_118 

pass_loop__hla_2678:
        call       assemble_line
        jnc        pass_loop__hla_2678
        mov        additional_memory_end__hla_48, %eax 
        cmpl       structures_buffer__hla_87, %eax 
        je         pass_done__hla_2679
        subl       $32, %eax 
        mov        4(%eax), %eax 
        mov        %eax, current_line__hla_60 
        jmp        missing_end_directive__hla_588

pass_done__hla_2679:
        call       close_pass__hla_1985
        mov        labels_list__hla_73, %eax 

check_symbols__hla_2680:
        cmpl       memory_end__hla_46, %eax 
        jae        symbols_checked__hla_2681
        testb      $8, 8(%eax) 
        jz         symbol_defined_ok__hla_2682
        mov        current_pass__hla_111, %cx 
        cmpw       18(%eax), %cx 
        jne        symbol_defined_ok__hla_2682
        testb      $1, 8(%eax) 
        jz         symbol_defined_ok__hla_2682
        subw       16(%eax), %cx 
        cmpw       $1, %cx 
        jne        symbol_defined_ok__hla_2682
        andb       $254, 8(%eax) 
        orb        $-1, next_pass_needed__hla_115 

symbol_defined_ok__hla_2682:
        testb      $16, 8(%eax) 
        jz         use_prediction_ok__hla_2683
        mov        current_pass__hla_111, %cx 
        andb       $239, 8(%eax) 
        testb      $32, 8(%eax) 
        jnz        check_use_prediction__hla_2684
        cmpw       18(%eax), %cx 
        jne        use_prediction_ok__hla_2683
        testb      $8, 8(%eax) 
        jz         use_prediction_ok__hla_2683
        jmp        use_misprediction__hla_2685

check_use_prediction__hla_2684:
        testb      $8, 8(%eax) 
        jz         use_misprediction__hla_2685
        cmpw       18(%eax), %cx 
        je         use_prediction_ok__hla_2683

use_misprediction__hla_2685:
        orb        $-1, next_pass_needed__hla_115 

use_prediction_ok__hla_2683:
        testb      $64, 8(%eax) 
        jz         check_next_symbol__hla_2686
        andb       $191, 8(%eax) 
        testb      $4, 8(%eax) 
        jnz        define_misprediction__hla_2687
        mov        current_pass__hla_111, %cx 
        testb      $128, 8(%eax) 
        jnz        check_define_prediction__hla_2688
        cmpw       16(%eax), %cx 
        jne        check_next_symbol__hla_2686
        testb      $1, 8(%eax) 
        jz         check_next_symbol__hla_2686
        jmp        define_misprediction__hla_2687

check_define_prediction__hla_2688:
        testb      $1, 8(%eax) 
        jz         define_misprediction__hla_2687
        cmpw       16(%eax), %cx 
        je         check_next_symbol__hla_2686

define_misprediction__hla_2687:
        orb        $-1, next_pass_needed__hla_115 

check_next_symbol__hla_2686:
        addl       $32, %eax 
        jmp        check_symbols__hla_2680

symbols_checked__hla_2681:
        cmpb       $0, next_pass_needed__hla_115 
        jne        next_pass__hla_2689
        mov        error_line__hla_84, %eax 
        orl        %eax, %eax 
        jz         assemble_ok__hla_2690
        mov        %eax, current_line__hla_60 
        jmp *      error__hla_85 

next_pass__hla_2689:
        incw       current_pass__hla_111 
        mov        current_pass__hla_111, %ax 
        cmpw       passes_limit__hla_110, %ax 
        je         code_cannot_be_generated__hla_568
        jmp        assembler_loop__hla_2677

assemble_ok__hla_2690:
        ret
xfasmAssembler:

/* procedure _0a84__p____hla_2696 */

_0a84__p____hla_2696:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "reserve_negative"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a84__p____hla_2696:

/* procedure reserve_negative__hla_2698 */

reserve_negative__hla_2698:
        cmpl       $0, error_line__hla_84 
        jne        false__hla_2699
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_value__hla_586, error__hla_85 
false__hla_2699:
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2700
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2700:
        clc
        ret
xreserve_negative__hla_2698:

/* procedure _0a8e__p____hla_2706 */

_0a8e__p____hla_2706:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "reserve_bytes"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0a8e__p____hla_2706:

/* procedure reserve_bytes__hla_2708 */

reserve_bytes__hla_2708:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, next_pass_needed__hla_115 
        jne        rb_value_ok__hla_2709
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

rb_value_ok__hla_2709:
        cmpl       $0, %eax 
        jl         reserve_negative__hla_2710
        movl       %eax, %ecx 
        movl       %ecx, %edx 
        addl       %edi, %edx 
        jc         out_of_memory__hla_593
        cmpl       display_buffer__hla_86, %edx 
        ja         out_of_memory__hla_593
        pushl      %edi 
        cmpb       $0, next_pass_needed__hla_115 
        je         zero_bytes__hla_2715
        addl       %ecx, %edi 
        jmp        reserved_data__hla_2716

zero_bytes__hla_2715:
        xorl       %eax, %eax 
        shrl       $1, %ecx 
        jnc        bytes_stosb_ok__hla_2717
        stosb

bytes_stosb_ok__hla_2717:
        shrl       $1, %ecx 
        jnc        bytes_stosw_ok__hla_2718
        stosw

bytes_stosw_ok__hla_2718:
        rep stosl

reserved_data__hla_2716:
        popl       %eax 
        call       undefined_data__hla_2030
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2719
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2719:
        clc
        ret
xreserve_bytes__hla_2708:

/* procedure _0aa1__p____hla_2725 */

_0aa1__p____hla_2725:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "reserve_words"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0aa1__p____hla_2725:

/* procedure reserve_words__hla_2727 */

reserve_words__hla_2727:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, next_pass_needed__hla_115 
        jne        rw_value_ok__hla_2728
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

rw_value_ok__hla_2728:
        cmpl       $0, %eax 
        jl         reserve_negative__hla_2729
        movl       %eax, %ecx 
        movl       %ecx, %edx 
        shll       $1, %edx 
        jc         out_of_memory__hla_593
        addl       %edi, %edx 
        jc         out_of_memory__hla_593
        cmpl       display_buffer__hla_86, %edx 
        ja         out_of_memory__hla_593
        pushl      %edi 
        cmpb       $0, next_pass_needed__hla_115 
        je         zero_words__hla_2736
        lea        (%edi,%ecx,2), %edi 

reserved_data__hla_2737:
        popl       %eax 
        call       undefined_data__hla_2030
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2738
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2738:
        clc
        ret

zero_words__hla_2736:
        xorl       %eax, %eax 
        shrl       $1, %ecx 
        jnc        words_stosw_ok__hla_2739
        stosw

words_stosw_ok__hla_2739:
        rep stosl
        jmp        reserved_data__hla_2737
xreserve_words__hla_2727:

/* procedure _0ab5__p____hla_2745 */

_0ab5__p____hla_2745:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "reserve_dwords"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0ab5__p____hla_2745:

/* procedure reserve_dwords__hla_2747 */

reserve_dwords__hla_2747:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, next_pass_needed__hla_115 
        jne        rd_value_ok__hla_2748
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

rd_value_ok__hla_2748:
        cmpl       $0, %eax 
        jl         reserve_negative__hla_2749
        movl       %eax, %ecx 
        movl       %ecx, %edx 
        shll       $1, %edx 
        jc         out_of_memory__hla_593
        shll       $1, %edx 
        jc         out_of_memory__hla_593
        addl       %edi, %edx 
        jc         out_of_memory__hla_593
        cmpl       display_buffer__hla_86, %edx 
        ja         out_of_memory__hla_593
        pushl      %edi 
        cmpb       $0, next_pass_needed__hla_115 
        je         zero_dwords__hla_2758
        lea        (%edi,%ecx,4), %edi 

reserved_data__hla_2759:
        popl       %eax 
        call       undefined_data__hla_2030
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2760
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2760:
        clc
        ret

zero_dwords__hla_2758:
        xorl       %eax, %eax 
        rep stosl
        jmp        reserved_data__hla_2759
xreserve_dwords__hla_2747:

/* procedure _0aca__p____hla_2766 */

_0aca__p____hla_2766:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "reserve_pwords"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0aca__p____hla_2766:

/* procedure reserve_pwords__hla_2768 */

reserve_pwords__hla_2768:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, next_pass_needed__hla_115 
        jne        rp_value_ok__hla_2769
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

rp_value_ok__hla_2769:
        cmpl       $0, %eax 
        jl         reserve_negative__hla_2770
        movl       %eax, %ecx 
        shll       $1, %ecx 
        jc         out_of_memory__hla_593
        addl       %eax, %ecx 
        movl       %ecx, %edx 
        shll       $1, %edx 
        jc         out_of_memory__hla_593
        addl       %edi, %edx 
        jc         out_of_memory__hla_593
        cmpl       display_buffer__hla_86, %edx 
        ja         out_of_memory__hla_593
        pushl      %edi 
        cmpb       $0, next_pass_needed__hla_115 
        je         zero_words__hla_2779
        lea        (%edi,%ecx,2), %edi 

reserved_data__hla_2780:
        popl       %eax 
        call       undefined_data__hla_2030
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2781
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2781:
        clc
        ret

zero_words__hla_2779:
        xorl       %eax, %eax 
        shrl       $1, %ecx 
        jnc        words_stosw_ok__hla_2782
        stosw

words_stosw_ok__hla_2782:
        rep stosl
        jmp        reserved_data__hla_2780
xreserve_pwords__hla_2768:

/* procedure _0ae0__p____hla_2788 */

_0ae0__p____hla_2788:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "reserve_qwords"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0ae0__p____hla_2788:

/* procedure reserve_qwords__hla_2790 */

reserve_qwords__hla_2790:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, next_pass_needed__hla_115 
        jne        rq_value_ok__hla_2791
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

rq_value_ok__hla_2791:
        cmpl       $0, %eax 
        jl         reserve_negative__hla_2792
        movl       %eax, %ecx 
        shll       $1, %ecx 
        jc         out_of_memory__hla_593
        movl       %ecx, %edx 
        shll       $1, %edx 
        jc         out_of_memory__hla_593
        shll       $1, %edx 
        jc         out_of_memory__hla_593
        addl       %edi, %edx 
        jc         out_of_memory__hla_593
        cmpl       display_buffer__hla_86, %edx 
        ja         out_of_memory__hla_593
        pushl      %edi 
        cmpb       $0, next_pass_needed__hla_115 
        je         zero_dwords__hla_2803
        lea        (%edi,%ecx,4), %edi 

reserved_data__hla_2804:
        popl       %eax 
        call       undefined_data__hla_2030
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2805
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2805:
        clc
        ret

zero_dwords__hla_2803:
        xorl       %eax, %eax 
        rep stosl
        jmp        reserved_data__hla_2804
xreserve_qwords__hla_2790:

/* procedure _0af7__p____hla_2811 */

_0af7__p____hla_2811:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "reserve_twords"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0af7__p____hla_2811:

/* procedure reserve_twords__hla_2813 */

reserve_twords__hla_2813:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, next_pass_needed__hla_115 
        jne        rt_value_ok__hla_2814
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

rt_value_ok__hla_2814:
        cmpl       $0, %eax 
        jl         reserve_negative__hla_2815
        movl       %eax, %ecx 
        shll       $2, %ecx 
        jc         out_of_memory__hla_593
        addl       %eax, %ecx 
        movl       %ecx, %edx 
        shll       $1, %edx 
        jc         out_of_memory__hla_593
        addl       %edi, %edx 
        jc         out_of_memory__hla_593
        cmpl       display_buffer__hla_86, %edx 
        ja         out_of_memory__hla_593
        pushl      %edi 
        cmpb       $0, next_pass_needed__hla_115 
        je         zero_words__hla_2824
        lea        (%edi,%ecx,2), %edi 

reserved_data__hla_2825:
        popl       %eax 
        call       undefined_data__hla_2030
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2826
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2826:
        clc
        ret

zero_words__hla_2824:
        xorl       %eax, %eax 
        shrl       $1, %ecx 
        jnc        words_stosw_ok__hla_2827
        stosw

words_stosw_ok__hla_2827:
        rep stosl
        jmp        reserved_data__hla_2825
xreserve_twords__hla_2813:

/* procedure _0b0d__p____hla_2833 */

_0b0d__p____hla_2833:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "data_file"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0b0d__p____hla_2833:

/* procedure data_file__hla_2835 */

data_file__hla_2835:

data_file_entry__hla_2836:
        lodsw
        cmpw       $40, %ax 
        jne        invalid_argument__hla_578
        addl       $4, %esi 
        call       open_binary_file__hla_2018
        mov        -4(%esi), %eax 
        lea        1(%esi,%eax,1), %esi 
        xorl       %edx, %edx 
        call       rseek__hla_483
        pushl      %eax 
        xorl       %edx, %edx 
        cmpb       $58, (%esi) 
        jne        position_ok__hla_2837
        incl       %esi 
        cmpb       $40, (%esi) 
        jne        invalid_argument__hla_578
        incl       %esi 
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        pushl      %ebx 
        call       get_dword_value__hla_1547
        popl       %ebx 
        movl       %eax, %edx 
        subl       %edx, (%esp) 

position_ok__hla_2837:
        cmpb       $44, (%esi) 
        jne        size_ok__hla_2838
        incl       %esi 
        cmpb       $40, (%esi) 
        jne        invalid_argument__hla_578
        incl       %esi 
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        pushl      %ebx 
        pushl      %edx 
        call       get_dword_value__hla_1547
        popl       %edx 
        popl       %ebx 
        mov        %eax, (%esp) 

size_ok__hla_2838:
        call       seek__hla_465
        popl       %ecx 
        movl       %edi, %edx 
        addl       %ecx, %edi 
        jc         out_of_memory__hla_593
        cmpl       display_buffer__hla_86, %edi 
        ja         out_of_memory__hla_593
        call       read__hla_446
        jc         error_reading_file__hla_570
        call       close__hla_456
        lodsb
        cmpb       $44, %al 
        je         data_file_entry__hla_2836
        decl       %esi 
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2843
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2843:
        clc
        ret
xdata_file__hla_2835:

/* procedure _0b1d__p____hla_2849 */

_0b1d__p____hla_2849:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "align_directive"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0b1d__p____hla_2849:

/* procedure align_directive__hla_2851 */

align_directive__hla_2851:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        movl       %eax, %edx 
        decl       %edx 
        testl      %edx, %eax 
        jnz        invalid_value__hla_586
        orl        %eax, %eax 
        jz         invalid_value__hla_586
        cmpl       $1, %eax 
        je         instruction_assembled__hla_2852
        movl       %edi, %ecx 
        subl       org_origin__hla_40, %ecx 
        cmpl       $0, org_registers__hla_77 
        jne        section_not_aligned_enough__hla_598
        cmpb       $0, labels_type__hla_119 
        je         make_alignment__hla_2853
        cmpb       $3, output_format__hla_117 
        je         pe_alignment__hla_2854
        mov        org_symbol__hla_79, %ebx 
        cmpb       $0, (%ebx) 
        jne        section_not_aligned_enough__hla_598
        cmpl       16(%ebx), %eax 
        jbe        make_alignment__hla_2853
        jmp        section_not_aligned_enough__hla_598

pe_alignment__hla_2854:
        cmpl       $4096, %eax 
        ja         section_not_aligned_enough__hla_598

make_alignment__hla_2853:
        decl       %eax 
        andl       %eax, %ecx 
        jz         instruction_assembled__hla_2852
        negl       %ecx 
        addl       %eax, %ecx 
        incl       %ecx 
        movl       %ecx, %edx 
        addl       %edi, %edx 
        jc         out_of_memory__hla_593
        cmpl       display_buffer__hla_86, %edx 
        ja         out_of_memory__hla_593
        pushl      %edi 
        cmpb       $0, next_pass_needed__hla_115 
        je         nops__hla_2859
        addl       %ecx, %edi 
        popl       %eax 
        call       undefined_data__hla_2030
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2860
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2860:
        clc
        ret

nops__hla_2859:
        mov        $-1869574000, %eax 
        shrl       $1, %ecx 
        jnc        nops_stosb_ok__hla_2861
        stosb

nops_stosb_ok__hla_2861:
        shrl       $1, %ecx 
        jnc        nops_stosw_ok__hla_2862
        stosw

nops_stosw_ok__hla_2862:
        rep stosl
        popl       %eax 
        call       undefined_data__hla_2030

instruction_assembled__hla_2852:
        mov        (%esi), %al 
        cmpb       $15, %al 
        jz         false__hla_2863
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571
false__hla_2863:
        clc
        ret
xalign_directive__hla_2851:

/* procedure _0b31__p____hla_2869 */

_0b31__p____hla_2869:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "assemble_line"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0b31__p____hla_2869:

/* procedure assemble_line */

assemble_line:
        mov        display_buffer__hla_86, %eax 
        subl       $256, %eax 
        cmpl       %eax, %edi 
        ja         out_of_memory__hla_593
        lodsb
        cmpb       $1, %al 
        je         assemble_instruction__hla_2873
        jb         source_end__hla_2874
        cmpb       $3, %al 
        jb         define_label__hla_2875
        je         define_constant__hla_2876
        cmpb       $15, %al 
        je         new_line__hla_2877
        cmpb       $19, %al 
        je         code_type_setting__hla_2878
        cmpb       $16, %al 
        jne        illegal_instruction__hla_574
        lodsb
        jmp        segment_prefix__hla_2879

code_type_setting__hla_2878:
        lodsb
        mov        %al, code_type__hla_118 
        jmp        line_assembled__hla_2880

new_line__hla_2877:
        lodsl
        mov        %eax, current_line__hla_60 
        movb       $0, prefixed_instruction__hla_120 

continue_line__hla_2881:
        cmpb       $15, (%esi) 
        je         line_assembled__hla_2880
        jmp        assemble_line

define_label__hla_2875:
        lodsl
        cmpl       $15, %eax 
        jb         invalid_use_of_symbol__hla_585
        je         reserved_word_used_as_symbol__hla_597
        movl       %eax, %ebx 
        lodsb
        movb       %al, %cl 
        movl       %edi, %eax 
        xorl       %edx, %edx 
        subl       org_origin__hla_40, %eax 
        sbbl       org_origin__hla_40+4, %edx 
        mov        labels_type__hla_119, %ch 
        cmpb       $0, virtual_data__hla_121 
        jne        make_virtual_label__hla_2882
        orb        $1, 9(%ebx) 
        xchgl      %eax, (%ebx) 
        xchgl      %edx, 4(%ebx) 
        subl       (%ebx), %eax 
        sbbl       4(%ebx), %edx 
        mov        %eax, adjustment__hla_42 
        mov        %edx, adjustment__hla_42+4 
        orl        %edx, %eax 
        setnz      %ah 
        jmp        finish_label_symbol__hla_2883

make_virtual_label__hla_2882:
        andb       $254, 9(%ebx) 
        cmpl       (%ebx), %eax 
        mov        %eax, (%ebx) 
        setnz      %ah 
        cmpl       4(%ebx), %edx 
        mov        %edx, 4(%ebx) 
        setnz      %al 
        orb        %al, %ah 

finish_label_symbol__hla_2883:
        cmpb       10(%ebx), %cl 
        mov        %cl, 10(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        cmpb       11(%ebx), %ch 
        mov        %ch, 11(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        mov        org_registers__hla_77, %edx 
        cmpl       12(%ebx), %edx 
        mov        %edx, 12(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        orb        %ch, %ch 
        jz         label_symbol_ok__hla_2884
        mov        org_symbol__hla_79, %edx 
        cmpl       20(%ebx), %edx 
        mov        %edx, 20(%ebx) 
        setnz      %al 
        orb        %al, %ah 

label_symbol_ok__hla_2884:
        mov        current_pass__hla_111, %cx 
        xchgw      %cx, 16(%ebx) 
        mov        current_line__hla_60, %edx 
        mov        %edx, 28(%ebx) 
        andb       $253, 8(%ebx) 
        testb      $1, 8(%ebx) 
        jz         new_label__hla_2885
        cmpw       16(%ebx), %cx 
        je         symbol_already_defined__hla_601
        incw       %cx 
        subw       16(%ebx), %cx 
        setnz      %al 
        orb        %al, %ah 
        jz         continue_line__hla_2881
        testb      $8, 8(%ebx) 
        jz         continue_line__hla_2881
        mov        current_pass__hla_111, %cx 
        cmpw       18(%ebx), %cx 
        jne        continue_line__hla_2881
        orb        $-1, next_pass_needed__hla_115 
        jmp        continue_line__hla_2881

new_label__hla_2885:
        orb        $1, 8(%ebx) 
        jmp        continue_line__hla_2881

define_constant__hla_2876:
        lodsl
        incl       %esi 
        cmpl       $15, %eax 
        jb         invalid_use_of_symbol__hla_585
        je         reserved_word_used_as_symbol__hla_597
        mov        8(%eax), %edx 
        pushl      %edx 
        cmpw       $0, current_pass__hla_111 
        je         get_constant_value__hla_2886
        testb      $4, %dl 
        jnz        get_constant_value__hla_2886
        mov        current_pass__hla_111, %cx 
        cmpw       16(%eax), %cx 
        je         get_constant_value__hla_2886
        andb       $254, %dl 
        mov        %dl, 8(%eax) 

get_constant_value__hla_2886:
        pushl      %eax 
        mov        -1(%esi), %al 
        pushl      %eax 
        call       get_value__hla_1601
        popl       %ebx 
        movb       %bl, %ch 
        popl       %ebx 
        popl       8(%ebx) 
        cmpl       $15, %ebx 
        jb         invalid_use_of_symbol__hla_585
        je         reserved_word_used_as_symbol__hla_597
        xorb       %cl, %cl 
        mov        value_type__hla_130, %ch 
        cmpb       $3, %ch 
        je         invalid_use_of_symbol__hla_585

make_constant__hla_2887:
        andb       $254, 9(%ebx) 
        cmpl       (%ebx), %eax 
        mov        %eax, (%ebx) 
        setnz      %ah 
        cmpl       4(%ebx), %edx 
        mov        %edx, 4(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        cmpb       10(%ebx), %cl 
        mov        %cl, 10(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        cmpb       11(%ebx), %ch 
        mov        %ch, 11(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        xorl       %edx, %edx 
        cmpl       12(%ebx), %edx 
        mov        %edx, 12(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        orb        %ch, %ch 
        jz         constant_symbol_ok__hla_2888
        mov        symbol_identifier__hla_91, %edx 
        cmpl       20(%ebx), %edx 
        mov        %edx, 20(%ebx) 
        setnz      %al 
        orb        %al, %ah 

constant_symbol_ok__hla_2888:
        mov        current_pass__hla_111, %cx 
        xchgw      %cx, 16(%ebx) 
        mov        current_line__hla_60, %edx 
        mov        %edx, 28(%ebx) 
        testb      $1, 8(%ebx) 
        jz         new_constant__hla_2889
        cmpw       16(%ebx), %cx 
        jne        redeclare_constant__hla_2890
        testb      $2, 8(%ebx) 
        jz         symbol_already_defined__hla_601
        orb        $4, 8(%ebx) 
        jmp        instruction_assembled__hla_2891

redeclare_constant__hla_2890:
        incw       %cx 
        subw       16(%ebx), %cx 
        setnz      %al 
        orb        %al, %ah 
        jz         instruction_assembled__hla_2891
        testb      $4, 8(%ebx) 
        jnz        instruction_assembled__hla_2891
        testb      $8, 8(%ebx) 
        jz         instruction_assembled__hla_2891
        mov        current_pass__hla_111, %cx 
        cmpw       18(%ebx), %cx 
        jne        instruction_assembled__hla_2891
        orb        $-1, next_pass_needed__hla_115 
        jmp        instruction_assembled__hla_2891

new_constant__hla_2889:
        orb        $3, 8(%ebx) 
        jmp        instruction_assembled__hla_2891

assemble_instruction__hla_2873:
        movb       $0, operand_size__hla_127 
        movb       $0, size_override__hla_125 
        movb       $0, operand_prefix__hla_139 
        movb       $0, rex_prefix__hla_140 
        movb       $0, immediate_size__hla_141 
        movzwl     (%esi), %ebx 
        mov        2(%esi), %al 
        mov        instrHandlerPtrs__hla_168(,%ebx,4), %ebx 
        addl       $3, %esi 
        jmp *      %ebx 

instruction_assembled__hla_2891:
        mov        (%esi), %al 
        cmpb       $15, %al 
        je         line_assembled__hla_2880
        orb        %al, %al 
        jnz        extra_characters_on_line__hla_571

line_assembled__hla_2880:
        clc
        ret

source_end__hla_2874:
        decl       %esi 
        stc
        ret

org_directive__hla_298:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_qword_value__hla_1570
        mov        value_type__hla_130, %cl 
        testb      $1, %cl 
        jnz        invalid_use_of_symbol__hla_585
        mov        %cl, labels_type__hla_119 
        movl       %edi, %ecx 
        subl       %eax, %ecx 
        adcl       $0, %edx 
        negl       %edx 
        mov        %ecx, org_origin__hla_40 
        mov        %edx, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        mov        symbol_identifier__hla_91, %edx 
        mov        %edx, org_symbol__hla_79 
        cmpb       $1, output_format__hla_117 
        ja         instruction_assembled__hla_2891
        cmpl       code_start__hla_55, %edi 
        jne        instruction_assembled__hla_2891
        cmpl       $256, %eax 
        jne        instruction_assembled__hla_2891
        bts        $0, format_flags__hla_94 
        jmp        instruction_assembled__hla_2891

label_directive__hla_259:
        lodsb
        cmpb       $2, %al 
        jne        invalid_argument__hla_578
        lodsl
        cmpl       $15, %eax 
        jb         invalid_use_of_symbol__hla_585
        je         reserved_word_used_as_symbol__hla_597
        incl       %esi 
        movl       %eax, %ebx 
        xorb       %cl, %cl 
        lodsb
        cmpb       $58, %al 
        je         get_label_size__hla_2892
        decl       %esi 
        cmpb       $17, %al 
        jne        label_size_ok__hla_2893

get_label_size__hla_2892:
        lodsw
        cmpb       $17, %al 
        jne        invalid_argument__hla_578
        movb       %ah, %cl 

label_size_ok__hla_2893:
        movl       %edi, %eax 
        xorl       %edx, %edx 
        subl       org_origin__hla_40, %eax 
        sbbl       org_origin__hla_40+4, %edx 
        mov        org_registers__hla_77, %ebp 
        cmpb       $128, (%esi) 
        je         get_free_label_value__hla_2894
        mov        labels_type__hla_119, %ch 
        pushl      org_symbol__hla_79 
        popl       address_symbol__hla_92 
        cmpb       $0, virtual_data__hla_121 
        jne        make_free_label__hla_2895
        orb        $1, 9(%ebx) 
        xchgl      %eax, (%ebx) 
        xchgl      %edx, 4(%ebx) 
        subl       (%ebx), %eax 
        sbbl       4(%ebx), %edx 
        mov        %eax, adjustment__hla_42 
        mov        %edx, adjustment__hla_42+4 
        orl        %edx, %eax 
        setnz      %ah 
        jmp        finish_label__hla_2896

get_free_label_value__hla_2894:
        incl       %esi 
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        pushl      8(%ebx) 
        pushl      %ebx 
        pushl      %ecx 
        andb       $254, 8(%ebx) 
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_address_value__hla_1614
        orb        %bh, %bh 
        setnz      %ch 
        xchgb      %cl, %ch 
        movw       %cx, %bp 
        shll       $16, %ebp 
        xchgb      %bh, %bl 
        movw       %bx, %bp 
        popl       %ecx 
        popl       %ebx 
        popl       8(%ebx) 
        mov        value_type__hla_130, %ch 
        orb        %ch, %ch 
        jz         make_free_label__hla_2895
        cmpb       $2, %ch 
        jne        invalid_use_of_symbol__hla_585

make_free_label__hla_2895:
        andb       $254, 9(%ebx) 
        cmpl       (%ebx), %eax 
        mov        %eax, (%ebx) 
        setnz      %ah 
        cmpl       4(%ebx), %edx 
        mov        %edx, 4(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        jmp        finish_label__hla_2896

finish_label__hla_2896:
        cmpb       10(%ebx), %cl 
        mov        %cl, 10(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        cmpb       11(%ebx), %ch 
        mov        %ch, 11(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        cmpl       12(%ebx), %ebp 
        mov        %ebp, 12(%ebx) 
        setnz      %al 
        orb        %al, %ah 
        orb        %ch, %ch 
        jz         free_label_symbol_ok__hla_2897
        mov        address_symbol__hla_92, %edx 
        cmpl       20(%ebx), %edx 
        mov        %edx, 20(%ebx) 
        setnz      %al 
        orb        %al, %ah 

free_label_symbol_ok__hla_2897:
        mov        current_pass__hla_111, %cx 
        xchgw      %cx, 16(%ebx) 
        mov        current_line__hla_60, %edx 
        mov        %edx, 28(%ebx) 
        andb       $253, 8(%ebx) 
        testb      $1, 8(%ebx) 
        jz         new_free_label__hla_2898
        cmpw       16(%ebx), %cx 
        je         symbol_already_defined__hla_601
        incw       %cx 
        subw       16(%ebx), %cx 
        setnz      %al 
        orb        %al, %ah 
        jz         instruction_assembled__hla_2891
        testb      $8, 8(%ebx) 
        jz         instruction_assembled__hla_2891
        mov        current_pass__hla_111, %cx 
        cmpw       18(%ebx), %cx 
        jne        instruction_assembled__hla_2891
        orb        $-1, next_pass_needed__hla_115 
        jmp        instruction_assembled__hla_2891

new_free_label__hla_2898:
        orb        $1, 8(%ebx) 
        jmp        instruction_assembled__hla_2891

load_directive__hla_264:
        lodsb
        cmpb       $2, %al 
        jne        invalid_argument__hla_578
        lodsl
        cmpl       $15, %eax 
        jb         invalid_use_of_symbol__hla_585
        je         reserved_word_used_as_symbol__hla_597
        incl       %esi 
        pushl      %eax 
        mov        $1, %al 
        cmpb       $17, (%esi) 
        jne        load_size_ok__hla_2899
        lodsb
        lodsb

load_size_ok__hla_2899:
        cmpb       $8, %al 
        ja         invalid_value__hla_586
        mov        %al, operand_size__hla_127 
        movl       $0, value__hla_41 
        movl       $0, value__hla_41+4 
        lodsw
        cmpw       $40, %ax 
        jne        invalid_argument__hla_578

load_from_code__hla_2900:
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_relative_offset__hla_1639
        negl       %eax 
        cmpb       $0, next_pass_needed__hla_115 
        jne        load_address_ok__hla_2901
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

load_address_ok__hla_2901:
        pushl      %esi 
        pushl      %edi 
        movl       %edi, %esi 
        subl       %eax, %esi 
        jc         bad_load_address__hla_2902
        cmpl       org_start__hla_78, %esi 
        jb         bad_load_address__hla_2902
        movl       $value__hla_41, %edi 
        movzbl     operand_size__hla_127, %ecx 
        cmpl       %eax, %ecx 
        ja         bad_load_address__hla_2902
        rep movsb
        jmp        value_loaded__hla_2903

bad_load_address__hla_2902:
        cmpl       $0, error_line__hla_84 
        jne        value_loaded__hla_2903
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $value_out_of_range__hla_607, error__hla_85 

value_loaded__hla_2903:
        popl       %edi 
        popl       %esi 
        mov        value__hla_41, %eax 
        mov        value__hla_41+4, %edx 
        popl       %ebx 
        xorw       %cx, %cx 
        jmp        make_constant__hla_2887

store_directive__hla_350:
        cmpb       $17, (%esi) 
        je         sized_store__hla_2904
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        call       get_byte_value__hla_1523
        xorl       %edx, %edx 
        movzbl     %al, %eax 
        movb       $1, operand_size__hla_127 
        jmp        store_value_ok__hla_2905

sized_store__hla_2904:
        call       get_value__hla_1601

store_value_ok__hla_2905:
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        %eax, value__hla_41 
        mov        %edx, value__hla_41+4 
        lodsw
        cmpw       $40, %ax 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_relative_offset__hla_1639
        negl       %eax 
        cmpb       $0, next_pass_needed__hla_115 
        jne        store_address_ok__hla_2906
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

store_address_ok__hla_2906:
        pushl      %esi 
        pushl      %edi 
        subl       %eax, %edi 
        jc         bad_store_address__hla_2907
        cmpl       org_start__hla_78, %edi 
        jb         bad_store_address__hla_2907
        movl       $value__hla_41, %esi 
        movzbl     operand_size__hla_127, %ecx 
        cmpl       %eax, %ecx 
        ja         bad_store_address__hla_2907
        rep movsb
        movl       %edi, %eax 
        popl       %edi 
        popl       %esi 
        cmpl       undefined_data_end__hla_81, %edi 
        jne        instruction_assembled__hla_2891
        cmpl       undefined_data_start__hla_80, %eax 
        jbe        instruction_assembled__hla_2891
        mov        %eax, undefined_data_start__hla_80 
        jmp        instruction_assembled__hla_2891

bad_store_address__hla_2907:
        popl       %edi 
        popl       %esi 
        cmpl       $0, error_line__hla_84 
        jne        instruction_assembled__hla_2891
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $value_out_of_range__hla_607, error__hla_85 
        jmp        instruction_assembled__hla_2891

display_directive__hla_217:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $0, (%esi) 
        jne        display_byte__hla_2908
        incl       %esi 
        lodsl
        movl       %eax, %ecx 
        pushl      %edi 
        mov        display_buffer__hla_86, %edi 
        subl       $4, %edi 
        subl       %eax, %edi 
        mov        %edi, display_buffer__hla_86 
        rep movsb
        stosl
        popl       %edi 
        incl       %esi 
        jmp        display_next__hla_2909

display_byte__hla_2908:
        call       get_byte_value__hla_1523
        pushl      %edi 
        mov        display_buffer__hla_86, %edi 
        subl       $5, %edi 
        mov        %edi, display_buffer__hla_86 
        stosb
        mov        $1, %eax 
        stosl
        popl       %edi 

display_next__hla_2909:
        cmpl       display_buffer__hla_86, %edi 
        ja         out_of_memory__hla_593
        lodsb
        cmpb       $44, %al 
        je         display_directive__hla_217
        decl       %esi 
        jmp        instruction_assembled__hla_2891

times_directive__hla_354:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, next_pass_needed__hla_115 
        jne        times_value_ok__hla_2912
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

times_value_ok__hla_2912:
        cmpl       $0, %eax 
        je         zero_times__hla_2913
        jl         negative_times__hla_2914
        cmpb       $58, (%esi) 
        jne        times_argument_ok__hla_2915
        incl       %esi 

times_argument_ok__hla_2915:
        pushl      counter__hla_82 
        pushl      counter_limit__hla_83 
        mov        %eax, counter_limit__hla_83 
        movl       $1, counter__hla_82 

times_loop__hla_2916:
        movl       %esp, %eax 
        subl       $256, %eax 
        jc         stack_overflow__hla_600
        cmpl       stack_limit__hla_49, %eax 
        jb         stack_overflow__hla_600
        pushl      %esi 
        orb        $-1, prefixed_instruction__hla_120 
        cmpb       $15, (%esi) 
        je         false__hla_2917
        call       assemble_line
false__hla_2917:
        mov        counter_limit__hla_83, %eax 
        cmpl       %eax, counter__hla_82 
        je         times_done__hla_2918
        incl       counter__hla_82 
        popl       %esi 
        jmp        times_loop__hla_2916

times_done__hla_2918:
        popl       %eax 
        popl       counter_limit__hla_83 
        popl       counter__hla_82 
        jmp        instruction_assembled__hla_2891

negative_times__hla_2914:
        cmpl       $0, error_line__hla_84 
        jne        zero_times__hla_2913
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_value__hla_586, error__hla_85 

zero_times__hla_2913:
        call       skip_line__hla_2218
        jmp        instruction_assembled__hla_2891

virtual_directive__hla_355:
        lodsb
        cmpb       $128, %al 
        jne        virtual_at_current__hla_2919
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_address_value__hla_1614
        mov        address_symbol__hla_92, %ebp 
        xorb       %ch, %ch 
        orb        %bh, %bh 
        jz         set_virtual__hla_2920
        mov        $1, %ch 
        jmp        set_virtual__hla_2920

virtual_at_current__hla_2919:
        decl       %esi 
        mov        labels_type__hla_119, %al 
        mov        %al, value_type__hla_130 
        mov        org_symbol__hla_79, %ebp 
        movl       %edi, %eax 
        xorl       %edx, %edx 
        subl       org_origin__hla_40, %eax 
        sbbl       org_origin__hla_40+4, %edx 
        mov        org_registers__hla_77, %bx 
        mov        org_registers__hla_77+2, %cx 
        xchgb      %bl, %bh 
        xchgb      %cl, %ch 

set_virtual__hla_2920:
        pushl      org_registers__hla_77 
        mov        %bh, org_registers__hla_77 
        mov        %bl, org_registers__hla_77+1 
        mov        %ch, org_registers__hla_77+2 
        mov        %cl, org_registers__hla_77+3 
        call       allocate_structure_data__hla_2008
        pushw      virtual_directive_assembler__hla_377 
        popw       (%ebx) 
        notl       %eax 
        notl       %edx 
        addl       $1, %eax 
        adcl       $0, %edx 
        addl       %edi, %eax 
        adcl       $0, %edx 
        xchgl      %eax, org_origin__hla_40 
        xchgl      %edx, org_origin__hla_40+4 
        mov        %eax, 16(%ebx) 
        mov        %edx, 20(%ebx) 
        popl       %eax 
        mov        %eax, 24(%ebx) 
        mov        virtual_data__hla_121, %al 
        mov        %al, 2(%ebx) 
        mov        labels_type__hla_119, %al 
        mov        %al, 3(%ebx) 
        movl       %edi, %eax 
        xchgl      %eax, org_start__hla_78 
        mov        %eax, 12(%ebx) 
        xchgl      %ebp, org_symbol__hla_79 
        mov        %ebp, 28(%ebx) 
        mov        %edi, 8(%ebx) 
        mov        current_line__hla_60, %eax 
        mov        %eax, 4(%ebx) 
        orb        $-1, virtual_data__hla_121 
        mov        value_type__hla_130, %al 
        testb      $1, %al 
        jnz        invalid_use_of_symbol__hla_585
        mov        %al, labels_type__hla_119 
        jmp        instruction_assembled__hla_2891

end_virtual__hla_2921:
        call       find_structure_data__hla_2166
        jc         unexpected_instruction__hla_606
        mov        2(%ebx), %al 
        mov        %al, virtual_data__hla_121 
        mov        3(%ebx), %al 
        mov        %al, labels_type__hla_119 
        mov        16(%ebx), %eax 
        mov        %eax, org_origin__hla_40 
        mov        20(%ebx), %eax 
        mov        %eax, org_origin__hla_40+4 
        mov        24(%ebx), %eax 
        mov        %eax, org_registers__hla_77 
        mov        12(%ebx), %eax 
        mov        %eax, org_start__hla_78 
        mov        28(%ebx), %eax 
        mov        %eax, org_symbol__hla_79 
        mov        8(%ebx), %edi 
        jmp        remove_structure_data__hla_2177

repeat_directive__hla_314:
        cmpb       $0, prefixed_instruction__hla_120 
        jne        unexpected_instruction__hla_606
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, next_pass_needed__hla_115 
        jne        repeat_value_ok__hla_2922
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

repeat_value_ok__hla_2922:
        cmpl       $0, %eax 
        je         zero_repeat__hla_2923
        jl         negative_repeat__hla_2924
        call       allocate_structure_data__hla_2008
        pushw      repeat_directive_assembler__hla_366 
        popw       (%ebx) 
        xchgl      %eax, counter_limit__hla_83 
        mov        %eax, 16(%ebx) 
        mov        $1, %eax 
        xchgl      %eax, counter__hla_82 
        mov        %eax, 20(%ebx) 
        mov        %esi, 8(%ebx) 
        mov        current_line__hla_60, %eax 
        mov        %eax, 4(%ebx) 
        jmp        instruction_assembled__hla_2891

end_repeat__hla_2925:
        cmpb       $0, prefixed_instruction__hla_120 
        jne        unexpected_instruction__hla_606
        call       find_structure_data__hla_2166
        jc         unexpected_instruction__hla_606
        mov        counter_limit__hla_83, %eax 
        incl       counter__hla_82 
        cmpl       %eax, counter__hla_82 
        jbe        continue_repeating__hla_2926

stop_repeat__hla_2927:
        mov        16(%ebx), %eax 
        mov        %eax, counter_limit__hla_83 
        mov        20(%ebx), %eax 
        mov        %eax, counter__hla_82 
        call       remove_structure_data__hla_2177
        jmp        instruction_assembled__hla_2891

continue_repeating__hla_2926:
        mov        8(%ebx), %esi 
        jmp        instruction_assembled__hla_2891

negative_repeat__hla_2924:
        cmpl       $0, error_line__hla_84 
        jne        zero_repeat__hla_2923
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_value__hla_586, error__hla_85 

zero_repeat__hla_2923:
        mov        (%esi), %al 
        orb        %al, %al 
        jz         missing_end_directive__hla_588
        cmpb       $15, %al 
        jne        extra_characters_on_line__hla_571
        call       find_end_repeat__hla_2185
        jmp        instruction_assembled__hla_2891

while_directive__hla_361:
        cmpb       $0, prefixed_instruction__hla_120 
        jne        unexpected_instruction__hla_606
        call       allocate_structure_data__hla_2008
        pushw      while_directive_assembler__hla_367 
        popw       (%ebx) 
        mov        $1, %eax 
        xchgl      %eax, counter__hla_82 
        mov        %eax, 16(%ebx) 
        mov        %esi, 8(%ebx) 
        mov        current_line__hla_60, %eax 
        mov        %eax, 4(%ebx) 

do_while__hla_2928:
        pushl      %ebx 
        call       calculate_logical_expression__hla_1744
        orb        %al, %al 
        jnz        while_true__hla_2929
        mov        (%esi), %al 
        orb        %al, %al 
        jz         missing_end_directive__hla_588
        cmpb       $15, %al 
        jne        extra_characters_on_line__hla_571

stop_while__hla_2930:
        call       find_end_while__hla_2193
        popl       %ebx 
        mov        16(%ebx), %eax 
        mov        %eax, counter__hla_82 
        call       remove_structure_data__hla_2177
        jmp        instruction_assembled__hla_2891

while_true__hla_2929:
        popl       %ebx 
        jmp        instruction_assembled__hla_2891

end_while__hla_2931:
        cmpb       $0, prefixed_instruction__hla_120 
        jne        unexpected_instruction__hla_606
        call       find_structure_data__hla_2166
        jc         unexpected_instruction__hla_606
        mov        4(%ebx), %eax 
        mov        %eax, current_line__hla_60 
        incl       counter__hla_82 
        jz         too_many_repeats__hla_602
        mov        8(%ebx), %esi 
        jmp        do_while__hla_2928

if_directive__hla_250:
        cmpb       $0, prefixed_instruction__hla_120 
        jne        unexpected_instruction__hla_606
        call       calculate_logical_expression__hla_1744
        movb       %al, %dl 
        mov        (%esi), %al 
        orb        %al, %al 
        jz         missing_end_directive__hla_588
        cmpb       $15, %al 
        jne        extra_characters_on_line__hla_571
        orb        %dl, %dl 
        jnz        if_true__hla_2932
        call       find_else__hla_2201
        jc         instruction_assembled__hla_2891
        mov        (%esi), %al 
        cmpb       $1, %al 
        jne        else_true__hla_2933
        mov        1(%esi), %ax 
        cmpw       if_directive_assembler__hla_365, %ax 
        jne        else_true__hla_2933
        addl       $4, %esi 
        jmp        if_directive__hla_250

if_true__hla_2932:
        xorb       %al, %al 

make_if_structure__hla_2934:
        call       allocate_structure_data__hla_2008
        pushw      if_directive_assembler__hla_365 
        popw       (%ebx) 
        mov        %al, 2(%ebx) 
        mov        current_line__hla_60, %eax 
        mov        %eax, 4(%ebx) 
        jmp        instruction_assembled__hla_2891

else_true__hla_2933:
        orb        %al, %al 
        jz         missing_end_directive__hla_588
        cmpb       $15, %al 
        jne        extra_characters_on_line__hla_571
        orb        $-1, %al 
        jmp        make_if_structure__hla_2934

else_directive__hla_218:
        cmpb       $0, prefixed_instruction__hla_120 
        jne        unexpected_instruction__hla_606
        mov        if_directive_assembler__hla_365, %ax 
        call       find_structure_data__hla_2166
        jc         unexpected_instruction__hla_606
        cmpb       $0, 2(%ebx) 
        jne        unexpected_instruction__hla_606

found_else__hla_2935:
        mov        (%esi), %al 
        cmpb       $1, %al 
        jne        skip_else__hla_2936
        mov        1(%esi), %ax 
        cmpw       if_directive_assembler__hla_365, %ax 
        jne        skip_else__hla_2936
        addl       $4, %esi 
        call       find_else__hla_2201
        jnc        found_else__hla_2935
        call       remove_structure_data__hla_2177
        jmp        instruction_assembled__hla_2891

skip_else__hla_2936:
        orb        %al, %al 
        jz         missing_end_directive__hla_588
        cmpb       $15, %al 
        jne        extra_characters_on_line__hla_571
        call       find_end_if__hla_2210
        call       remove_structure_data__hla_2177
        jmp        instruction_assembled__hla_2891

end_if__hla_2937:
        cmpb       $0, prefixed_instruction__hla_120 
        jne        unexpected_instruction__hla_606
        call       find_structure_data__hla_2166
        jc         unexpected_instruction__hla_606
        call       remove_structure_data__hla_2177
        jmp        instruction_assembled__hla_2891

end_directive__hla_219:
        lodsb
        cmpb       $1, %al 
        jne        invalid_argument__hla_578
        lodsw
        incl       %esi 
        cmpw       virtual_directive_assembler__hla_377, %ax 
        je         end_virtual__hla_2921
        cmpw       repeat_directive_assembler__hla_366, %ax 
        je         end_repeat__hla_2925
        cmpw       while_directive_assembler__hla_367, %ax 
        je         end_while__hla_2931
        cmpw       if_directive_assembler__hla_365, %ax 
        je         end_if__hla_2937
        cmpw       data_directive_assembler__hla_378, %ax 
        je         end_data__hla_2938
        jmp        invalid_argument__hla_578

end_data__hla_2938:
        cmpb       $3, output_format__hla_117 
        jne        illegal_instruction__hla_574
        call       find_structure_data__hla_2166
        jc         unexpected_instruction__hla_606
        movzbl     2(%ebx), %eax 
        mov        current_section__hla_100, %edx 
        movl       %edi, %ecx 
        subl       20(%edx), %ecx 
        addl       12(%edx), %ecx 
        mov        code_start__hla_55, %edx 
        testl      $8, format_flags__hla_94 
        jnz        end_pe64_data__hla_2939
        subl       120(%edx,%eax,8), %ecx 
        mov        %ecx, 124(%edx,%eax,8) 
        jmp        remove_structure_data__hla_2177

end_pe64_data__hla_2939:
        subl       136(%edx,%eax,8), %ecx 
        mov        %ecx, 140(%edx,%eax,8) 
        jmp        remove_structure_data__hla_2177

break_directive__hla_178:
        mov        structures_buffer__hla_87, %ebx 
        mov        (%esi), %al 
        orb        %al, %al 
        jz         find_breakable_structure__hla_2940
        cmpb       $15, %al 
        jne        extra_characters_on_line__hla_571

find_breakable_structure__hla_2940:
        cmpl       additional_memory_end__hla_48, %ebx 
        je         unexpected_instruction__hla_606
        mov        (%ebx), %ax 
        cmpw       repeat_directive_assembler__hla_366, %ax 
        je         break_repeat__hla_2941
        cmpw       while_directive_assembler__hla_367, %ax 
        je         break_while__hla_2942
        cmpw       if_directive_assembler__hla_365, %ax 
        je         break_if__hla_2943
        addl       $32, %ebx 
        jmp        find_breakable_structure__hla_2940

break_if__hla_2943:
        pushl      current_line__hla_60 
        mov        4(%ebx), %eax 
        mov        %eax, current_line__hla_60 
        call       remove_structure_data__hla_2177
        call       skip_if_block__hla_2227
        popl       current_line__hla_60 
        mov        structures_buffer__hla_87, %ebx 
        jmp        find_breakable_structure__hla_2940

break_repeat__hla_2941:
        pushl      %ebx 
        call       find_end_repeat__hla_2185
        popl       %ebx 
        jmp        stop_repeat__hla_2927

break_while__hla_2942:
        pushl      %ebx 
        jmp        stop_while__hla_2930

data_bytes__hla_208:
        call       get_data_bytes__hla_2265
        jmp        instruction_assembled__hla_2891

data_unicode__hla_215:
        orb        $-1, base_code__hla_132 
        call       get_data_words__hla_2278
        jmp        instruction_assembled__hla_2891

data_words__hla_216:
        movb       $0, base_code__hla_132 
        call       get_data_words__hla_2278
        jmp        instruction_assembled__hla_2891

data_dwords__hla_211:
        call       get_data_dwords__hla_2294
        jmp        instruction_assembled__hla_2891

data_pwords__hla_212:
        call       get_data_pwords__hla_2305
        jmp        instruction_assembled__hla_2891

data_qwords__hla_213:
        call       get_data_qwords__hla_2316
        jmp        instruction_assembled__hla_2891

data_twords__hla_214:
        call       get_data_twords__hla_2326
        jmp        instruction_assembled__hla_2891

simple_instruction_except64__hla_341:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574

simple_instruction__hla_335:
        stosb
        jmp        instruction_assembled__hla_2891

simple_instruction_only64__hla_342:
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        jmp        simple_instruction__hla_335

simple_instruction_16bit_except64__hla_337:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574

simple_instruction_16bit__hla_336:
        cmpb       $16, code_type__hla_118 
        jne        size_prefix__hla_2944
        stosb
        jmp        instruction_assembled__hla_2891

size_prefix__hla_2944:
        movb       %al, %ah 
        mov        $102, %al 
        stosw
        jmp        instruction_assembled__hla_2891

simple_instruction_32bit_except64__hla_339:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574

simple_instruction_32bit__hla_338:
        cmpb       $16, code_type__hla_118 
        je         size_prefix__hla_2944
        stosb
        jmp        instruction_assembled__hla_2891

simple_instruction_64bit__hla_340:
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        movb       %al, %ah 
        mov        $72, %al 
        stosw
        jmp        instruction_assembled__hla_2891

simple_extended_instruction__hla_333:
        movb       %al, %ah 
        mov        $15, %al 
        stosw
        jmp        instruction_assembled__hla_2891

prefix_instruction__hla_308:
        stosb
        orb        $-1, prefixed_instruction__hla_120 
        jmp        continue_line__hla_2881

segment_prefix__hla_2879:
        movb       %al, %ah 
        shrb       $4, %ah 
        cmpb       $6, %ah 
        jne        illegal_instruction__hla_574
        andb       $15, %al 
        mov        %al, segment_register__hla_135 
        call       store_segment_prefix__hla_2350
        orb        $-1, prefixed_instruction__hla_120 
        jmp        continue_line__hla_2881

int_instruction__hla_255:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $1, %ah 
        ja         invalid_operand_size__hla_584
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        call       get_byte_value__hla_1523
        movb       %al, %ah 
        mov        $205, %al 
        stosw
        jmp        instruction_assembled__hla_2891

iret_instruction__hla_257:
        cmpb       $64, code_type__hla_118 
        jne        simple_instruction__hla_335
        call       operand_64bit__hla_2379
        jmp        simple_instruction__hla_335

aa_instruction__hla_169:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        pushl      %eax 
        mov        $10, %bl 
        cmpb       $40, (%esi) 
        jne        aa_store__hla_2945
        incl       %esi 
        xorb       %al, %al 
        xchgb      %al, operand_size__hla_127 
        cmpb       $1, %al 
        ja         invalid_operand_size__hla_584
        call       get_byte_value__hla_1523
        movb       %al, %bl 

aa_store__hla_2945:
        cmpb       $0, operand_size__hla_127 
        jne        invalid_operand__hla_583
        popl       %eax 
        movb       %bl, %ah 
        stosw
        jmp        instruction_assembled__hla_2891

basic_instruction__hla_176:
        mov        %al, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         basic_reg__hla_2946
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

basic_mem__hla_2947:
        call       get_address__hla_2546
        pushl      %edx 
        pushw      %bx 
        pushw      %cx 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        je         basic_mem_imm__hla_2948
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

basic_mem_reg__hla_2949:
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         basic_mem_reg_8bit__hla_2950
        call       operand_autodetect__hla_2387
        incb       base_code__hla_132 

basic_mem_reg_8bit__hla_2950:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

basic_mem_imm__hla_2948:
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         basic_mem_imm_8bit__hla_2951
        cmpb       $2, %al 
        je         basic_mem_imm_16bit__hla_2952
        cmpb       $4, %al 
        je         basic_mem_imm_32bit__hla_2953
        cmpb       $8, %al 
        je         basic_mem_imm_64bit__hla_2954
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpl       $0, error_line__hla_84 
        jne        basic_mem_imm_8bit__hla_2951
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

basic_mem_imm_8bit__hla_2951:
        call       get_byte_value__hla_1523
        mov        %al, value__hla_41 
        mov        base_code__hla_132, %al 
        shrb       $3, %al 
        mov        %al, postbyte_register__hla_134 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        movb       $128, base_code__hla_132 
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

basic_mem_imm_16bit__hla_2952:
        call       operand_16bit__hla_2361
        call       get_word_value__hla_1535
        mov        %ax, value__hla_41 
        mov        base_code__hla_132, %al 
        shrb       $3, %al 
        mov        %al, postbyte_register__hla_134 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        cmpb       $0, value_type__hla_130 
        jne        basic_mem_imm_16bit_store__hla_2955
        cmpb       $0, size_declared__hla_128 
        jne        basic_mem_imm_16bit_store__hla_2955
        cmpw       $128, value__hla_41 
        jb         basic_mem_simm_8bit__hla_2956
        cmpw       $65408, value__hla_41 
        jae        basic_mem_simm_8bit__hla_2956

basic_mem_imm_16bit_store__hla_2955:
        movb       $129, base_code__hla_132 
        call       store_instruction_with_imm16__hla_2503
        jmp        instruction_assembled__hla_2891

basic_mem_simm_8bit__hla_2956:
        movb       $131, base_code__hla_132 
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

basic_mem_imm_32bit__hla_2953:
        call       operand_32bit__hla_2370
        call       get_dword_value__hla_1547

basic_mem_imm_32bit_ok__hla_2957:
        mov        %eax, value__hla_41 
        mov        base_code__hla_132, %al 
        shrb       $3, %al 
        mov        %al, postbyte_register__hla_134 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        cmpb       $0, value_type__hla_130 
        jne        basic_mem_imm_32bit_store__hla_2958
        cmpb       $0, size_declared__hla_128 
        jne        basic_mem_imm_32bit_store__hla_2958
        cmpl       $128, value__hla_41 
        jb         basic_mem_simm_8bit__hla_2956
        cmpl       $-128, value__hla_41 
        jae        basic_mem_simm_8bit__hla_2956

basic_mem_imm_32bit_store__hla_2958:
        movb       $129, base_code__hla_132 
        call       store_instruction_with_imm32__hla_2511
        jmp        instruction_assembled__hla_2891

basic_mem_imm_64bit__hla_2954:
        cmpb       $0, size_declared__hla_128 
        jne        long_immediate_not_encodable__hla_587
        call       operand_64bit__hla_2379
        call       get_simm32__hla_2519
        cmpb       $4, value_type__hla_130 
        jae        long_immediate_not_encodable__hla_587
        jmp        basic_mem_imm_32bit_ok__hla_2957

basic_reg__hla_2946:
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         basic_reg_reg__hla_2959
        cmpb       $40, %al 
        je         basic_reg_imm__hla_2960
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

basic_reg_mem__hla_2961:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         basic_reg_mem_8bit__hla_2962
        call       operand_autodetect__hla_2387
        addb       $3, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

basic_reg_mem_8bit__hla_2962:
        addb       $2, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

basic_reg_reg__hla_2959:
        lodsb
        call       convert_register__hla_2617
        mov        postbyte_register__hla_134, %bl 
        mov        %al, postbyte_register__hla_134 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         basic_reg_reg_8bit__hla_2963
        call       operand_autodetect__hla_2387
        incb       base_code__hla_132 

basic_reg_reg_8bit__hla_2963:
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

basic_reg_imm__hla_2960:
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         basic_reg_imm_8bit__hla_2964
        cmpb       $2, %al 
        je         basic_reg_imm_16bit__hla_2965
        cmpb       $4, %al 
        je         basic_reg_imm_32bit__hla_2966
        cmpb       $8, %al 
        je         basic_reg_imm_64bit__hla_2967
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpl       $0, error_line__hla_84 
        jne        basic_reg_imm_32bit__hla_2966
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 
        jmp        basic_reg_imm_32bit__hla_2966

basic_reg_imm_8bit__hla_2964:
        call       get_byte_value__hla_1523
        movb       %al, %dl 
        mov        base_code__hla_132, %bl 
        shrb       $3, %bl 
        xchgb      %bl, postbyte_register__hla_134 
        orb        %bl, %bl 
        jz         basic_al_imm__hla_2968
        movb       $128, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

basic_al_imm__hla_2968:
        mov        base_code__hla_132, %al 
        addb       $4, %al 
        stosb
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

basic_reg_imm_16bit__hla_2965:
        call       operand_16bit__hla_2361
        call       get_word_value__hla_1535
        movw       %ax, %dx 
        mov        base_code__hla_132, %bl 
        shrb       $3, %bl 
        xchgb      %bl, postbyte_register__hla_134 
        cmpb       $0, value_type__hla_130 
        jne        basic_reg_imm_16bit_store__hla_2969
        cmpb       $0, size_declared__hla_128 
        jne        basic_reg_imm_16bit_store__hla_2969
        cmpw       $128, %dx 
        jb         basic_reg_simm_8bit__hla_2970
        cmpw       $65408, %dx 
        jae        basic_reg_simm_8bit__hla_2970

basic_reg_imm_16bit_store__hla_2969:
        orb        %bl, %bl 
        jz         basic_ax_imm__hla_2971
        movb       $129, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        movw       %dx, %ax 
        call       mark_relocation
        stosw
        jmp        instruction_assembled__hla_2891

basic_reg_simm_8bit__hla_2970:
        movb       $131, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

basic_ax_imm__hla_2971:
        addb       $5, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movw       %dx, %ax 
        call       mark_relocation
        stosw
        jmp        instruction_assembled__hla_2891

basic_reg_imm_32bit__hla_2966:
        call       operand_32bit__hla_2370
        call       get_dword_value__hla_1547

basic_reg_imm_32bit_ok__hla_2972:
        movl       %eax, %edx 
        mov        base_code__hla_132, %bl 
        shrb       $3, %bl 
        xchgb      %bl, postbyte_register__hla_134 
        cmpb       $0, value_type__hla_130 
        jne        basic_reg_imm_32bit_store__hla_2973
        cmpb       $0, size_declared__hla_128 
        jne        basic_reg_imm_32bit_store__hla_2973
        cmpl       $128, %edx 
        jb         basic_reg_simm_8bit__hla_2970
        cmpl       $-128, %edx 
        jae        basic_reg_simm_8bit__hla_2970

basic_reg_imm_32bit_store__hla_2973:
        orb        %bl, %bl 
        jz         basic_eax_imm__hla_2974
        movb       $129, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        movl       %edx, %eax 
        call       mark_relocation
        stosl
        jmp        instruction_assembled__hla_2891

basic_eax_imm__hla_2974:
        addb       $5, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movl       %edx, %eax 
        call       mark_relocation
        stosl
        jmp        instruction_assembled__hla_2891

basic_reg_imm_64bit__hla_2967:
        cmpb       $0, size_declared__hla_128 
        jne        long_immediate_not_encodable__hla_587
        call       operand_64bit__hla_2379
        call       get_simm32__hla_2519
        cmpb       $4, value_type__hla_130 
        jae        long_immediate_not_encodable__hla_587
        jmp        basic_reg_imm_32bit_ok__hla_2972

single_operand_instruction__hla_344:
        movb       $246, base_code__hla_132 
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         single_reg__hla_2975
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

single_mem__hla_2976:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         single_mem_8bit__hla_2977
        jb         single_mem_nosize__hla_2978
        call       operand_autodetect__hla_2387
        incb       base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

single_mem_nosize__hla_2978:
        cmpl       $0, error_line__hla_84 
        jne        single_mem_8bit__hla_2977
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

single_mem_8bit__hla_2977:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

single_reg__hla_2975:
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         single_reg_8bit__hla_2979
        call       operand_autodetect__hla_2387
        incb       base_code__hla_132 

single_reg_8bit__hla_2979:
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

mov_instruction__hla_276:
        movb       $136, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         mov_reg__hla_2980
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

mov_mem__hla_2981:
        call       get_address__hla_2546
        pushl      %edx 
        pushw      %bx 
        pushw      %cx 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        je         mov_mem_imm__hla_2982
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

mov_mem_reg__hla_2983:
        lodsb
        cmpb       $96, %al 
        jb         mov_mem_general_reg__hla_2984
        cmpb       $112, %al 
        jb         mov_mem_sreg__hla_2985

mov_mem_general_reg__hla_2984:
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        cmpb       $1, %ah 
        je         mov_mem_reg_8bit__hla_2986
        movb       %ah, %al 
        call       operand_autodetect__hla_2387
        mov        postbyte_register__hla_134, %al 
        orb        %bl, %al 
        orb        %bh, %al 
        jz         mov_mem_ax__hla_2987
        incb       base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

mov_mem_reg_8bit__hla_2986:
        orb        %bl, %al 
        orb        %bh, %al 
        jz         mov_mem_al__hla_2988
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

mov_mem_al__hla_2988:
        testb      $34, %ch 
        jnz        mov_mem_address16_al__hla_2989
        testb      $68, %ch 
        jnz        mov_mem_address32_al__hla_2990
        testb      $136, %ch 
        jnz        mov_mem_address64_al__hla_2991
        orb        %ch, %ch 
        jnz        invalid_address_size__hla_577
        cmpb       $64, code_type__hla_118 
        je         mov_mem_address64_al__hla_2991
        cmpb       $32, code_type__hla_118 
        je         mov_mem_address32_al__hla_2990
        cmpl       $65536, %edx 
        jb         mov_mem_address16_al__hla_2989

mov_mem_address32_al__hla_2990:
        call       store_segment_prefix_if_necessary__hla_2338
        call       address_32bit_prefix__hla_2407
        movb       $162, base_code__hla_132 

store_mov_address32__hla_2992:
        call       store_instruction_code__hla_2416
        pushl      $instruction_assembled__hla_2891 
        jmp        store_address_32bit_value__hla_2428

mov_mem_address16_al__hla_2989:
        call       store_segment_prefix_if_necessary__hla_2338
        call       address_16bit_prefix__hla_2398
        movb       $162, base_code__hla_132 

store_mov_address16__hla_2993:
        cmpb       $64, code_type__hla_118 
        je         invalid_address__hla_576
        call       store_instruction_code__hla_2416
        movl       %edx, %eax 
        stosw
        cmpl       $65536, %edx 
        jge        value_out_of_range__hla_607
        jmp        instruction_assembled__hla_2891

mov_mem_address64_al__hla_2991:
        call       store_segment_prefix_if_necessary__hla_2338
        movb       $162, base_code__hla_132 

store_mov_address64__hla_2994:
        call       store_instruction_code__hla_2416
        pushl      $instruction_assembled__hla_2891 
        jmp        store_address_64bit_value__hla_2437

mov_mem_ax__hla_2987:
        testb      $34, %ch 
        jnz        mov_mem_address16_ax__hla_2995
        testb      $68, %ch 
        jnz        mov_mem_address32_ax__hla_2996
        testb      $136, %ch 
        jnz        mov_mem_address64_ax__hla_2997
        orb        %ch, %ch 
        jnz        invalid_address_size__hla_577
        cmpb       $64, code_type__hla_118 
        je         mov_mem_address64_ax__hla_2997
        cmpb       $32, code_type__hla_118 
        je         mov_mem_address32_ax__hla_2996
        cmpl       $65536, %edx 
        jb         mov_mem_address16_ax__hla_2995

mov_mem_address32_ax__hla_2996:
        call       store_segment_prefix_if_necessary__hla_2338
        call       address_32bit_prefix__hla_2407
        movb       $163, base_code__hla_132 
        jmp        store_mov_address32__hla_2992

mov_mem_address16_ax__hla_2995:
        call       store_segment_prefix_if_necessary__hla_2338
        call       address_16bit_prefix__hla_2398
        movb       $163, base_code__hla_132 
        jmp        store_mov_address16__hla_2993

mov_mem_address64_ax__hla_2997:
        call       store_segment_prefix_if_necessary__hla_2338
        movb       $163, base_code__hla_132 
        jmp        store_mov_address64__hla_2994

mov_mem_sreg__hla_2985:
        subb       $97, %al 
        mov        %al, postbyte_register__hla_134 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        mov        operand_size__hla_127, %ah 
        orb        %ah, %ah 
        jz         mov_mem_sreg_store__hla_2998
        cmpb       $2, %ah 
        jne        invalid_operand_size__hla_584

mov_mem_sreg_store__hla_2998:
        movb       $140, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

mov_mem_imm__hla_2982:
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         mov_mem_imm_8bit__hla_2999
        cmpb       $2, %al 
        je         mov_mem_imm_16bit__hla_3000
        cmpb       $4, %al 
        je         mov_mem_imm_32bit__hla_3001
        cmpb       $8, %al 
        je         mov_mem_imm_64bit__hla_3002
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpl       $0, error_line__hla_84 
        jne        mov_mem_imm_32bit__hla_3001
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 
        jmp        mov_mem_imm_32bit__hla_3001

mov_mem_imm_8bit__hla_2999:
        call       get_byte_value__hla_1523
        mov        %al, value__hla_41 
        movb       $0, postbyte_register__hla_134 
        movb       $198, base_code__hla_132 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

mov_mem_imm_16bit__hla_3000:
        call       operand_16bit__hla_2361
        call       get_word_value__hla_1535
        mov        %ax, value__hla_41 
        movb       $0, postbyte_register__hla_134 
        movb       $199, base_code__hla_132 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        call       store_instruction_with_imm16__hla_2503
        jmp        instruction_assembled__hla_2891

mov_mem_imm_32bit__hla_3001:
        call       operand_32bit__hla_2370
        call       get_dword_value__hla_1547

mov_mem_imm_32bit_store__hla_3003:
        mov        %eax, value__hla_41 
        movb       $0, postbyte_register__hla_134 
        movb       $199, base_code__hla_132 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        call       store_instruction_with_imm32__hla_2511
        jmp        instruction_assembled__hla_2891

mov_mem_imm_64bit__hla_3002:
        cmpb       $0, size_declared__hla_128 
        jne        long_immediate_not_encodable__hla_587
        call       operand_64bit__hla_2379
        call       get_simm32__hla_2519
        cmpb       $4, value_type__hla_130 
        jae        long_immediate_not_encodable__hla_587
        jmp        mov_mem_imm_32bit_store__hla_3003

mov_reg__hla_2980:
        lodsb
        movb       %al, %ah 
        subb       $16, %ah 
        andb       %al, %ah 
        testb      $240, %ah 
        jnz        mov_sreg__hla_3004
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        je         mov_reg_mem__hla_3005
        cmpb       $40, %al 
        je         mov_reg_imm__hla_3006
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

mov_reg_reg__hla_3007:
        lodsb
        movb       %al, %ah 
        subb       $16, %ah 
        andb       %al, %ah 
        testb      $240, %ah 
        jnz        mov_reg_sreg__hla_3008
        call       convert_register__hla_2617
        mov        postbyte_register__hla_134, %bl 
        mov        %al, postbyte_register__hla_134 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         mov_reg_reg_8bit__hla_3009
        call       operand_autodetect__hla_2387
        incb       base_code__hla_132 

mov_reg_reg_8bit__hla_3009:
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

mov_reg_sreg__hla_3008:
        mov        postbyte_register__hla_134, %bl 
        movb       %al, %ah 
        andb       $15, %al 
        mov        %al, postbyte_register__hla_134 
        shrb       $4, %ah 
        cmpb       $5, %ah 
        je         mov_reg_creg__hla_3010
        cmpb       $7, %ah 
        je         mov_reg_dreg__hla_3011
        ja         mov_reg_treg__hla_3012
        decb       postbyte_register__hla_134 
        cmpb       $8, operand_size__hla_127 
        je         mov_reg_sreg64__hla_3013
        cmpb       $4, operand_size__hla_127 
        je         mov_reg_sreg32__hla_3014
        cmpb       $2, operand_size__hla_127 
        jne        invalid_operand_size__hla_584
        call       operand_16bit__hla_2361
        jmp        mov_reg_sreg_store__hla_3015

mov_reg_sreg64__hla_3013:
        call       operand_64bit__hla_2379
        jmp        mov_reg_sreg_store__hla_3015

mov_reg_sreg32__hla_3014:
        call       operand_32bit__hla_2370

mov_reg_sreg_store__hla_3015:
        movb       $140, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

mov_reg_treg__hla_3012:
        cmpb       $9, %ah 
        jne        invalid_operand__hla_583
        movb       $36, extended_code__hla_133 
        jmp        mov_reg_xrx__hla_3016

mov_reg_dreg__hla_3011:
        movb       $33, extended_code__hla_133 
        jmp        mov_reg_xrx__hla_3016

mov_reg_creg__hla_3010:
        movb       $32, extended_code__hla_133 

mov_reg_xrx__hla_3016:
        movb       $15, base_code__hla_132 
        cmpb       $64, code_type__hla_118 
        je         mov_reg_xrx_64bit__hla_3017
        cmpb       $4, operand_size__hla_127 
        jne        invalid_operand_size__hla_584
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

mov_reg_xrx_64bit__hla_3017:
        cmpb       $8, operand_size__hla_127 
        jne        invalid_operand_size__hla_584
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

mov_reg_mem__hla_3005:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         mov_reg_mem_8bit__hla_3018
        call       operand_autodetect__hla_2387
        mov        postbyte_register__hla_134, %al 
        orb        %bl, %al 
        orb        %bh, %al 
        jz         mov_ax_mem__hla_3019
        addb       $3, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

mov_reg_mem_8bit__hla_3018:
        mov        postbyte_register__hla_134, %al 
        orb        %bl, %al 
        orb        %bh, %al 
        jz         mov_al_mem__hla_3020
        addb       $2, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

mov_al_mem__hla_3020:
        testb      $34, %ch 
        jnz        mov_al_mem_address16__hla_3021
        testb      $68, %ch 
        jnz        mov_al_mem_address32__hla_3022
        testb      $136, %ch 
        jnz        mov_al_mem_address64__hla_3023
        orb        %ch, %ch 
        jnz        invalid_address_size__hla_577
        cmpb       $64, code_type__hla_118 
        je         mov_al_mem_address64__hla_3023
        cmpb       $32, code_type__hla_118 
        je         mov_al_mem_address32__hla_3022
        cmpl       $65536, %edx 
        jb         mov_al_mem_address16__hla_3021

mov_al_mem_address32__hla_3022:
        call       store_segment_prefix_if_necessary__hla_2338
        call       address_32bit_prefix__hla_2407
        movb       $160, base_code__hla_132 
        jmp        store_mov_address32__hla_2992

mov_al_mem_address16__hla_3021:
        call       store_segment_prefix_if_necessary__hla_2338
        call       address_16bit_prefix__hla_2398
        movb       $160, base_code__hla_132 
        jmp        store_mov_address16__hla_2993

mov_al_mem_address64__hla_3023:
        call       store_segment_prefix_if_necessary__hla_2338
        movb       $160, base_code__hla_132 
        jmp        store_mov_address64__hla_2994

mov_ax_mem__hla_3019:
        testb      $34, %ch 
        jnz        mov_ax_mem_address16__hla_3024
        testb      $68, %ch 
        jnz        mov_ax_mem_address32__hla_3025
        testb      $136, %ch 
        jnz        mov_ax_mem_address64__hla_3026
        orb        %ch, %ch 
        jnz        invalid_address_size__hla_577
        cmpb       $64, code_type__hla_118 
        je         mov_ax_mem_address64__hla_3026
        cmpb       $32, code_type__hla_118 
        je         mov_ax_mem_address32__hla_3025
        cmpl       $65536, %edx 
        jb         mov_ax_mem_address16__hla_3024

mov_ax_mem_address32__hla_3025:
        call       store_segment_prefix_if_necessary__hla_2338
        call       address_32bit_prefix__hla_2407
        movb       $161, base_code__hla_132 
        jmp        store_mov_address32__hla_2992

mov_ax_mem_address16__hla_3024:
        call       store_segment_prefix_if_necessary__hla_2338
        movb       $161, base_code__hla_132 
        jmp        store_mov_address16__hla_2993

mov_ax_mem_address64__hla_3026:
        call       store_segment_prefix_if_necessary__hla_2338
        movb       $161, base_code__hla_132 
        jmp        store_mov_address64__hla_2994

mov_reg_imm__hla_3006:
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         mov_reg_imm_8bit__hla_3027
        cmpb       $2, %al 
        je         mov_reg_imm_16bit__hla_3028
        cmpb       $4, %al 
        je         mov_reg_imm_32bit__hla_3029
        cmpb       $8, %al 
        je         mov_reg_imm_64bit__hla_3030
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpl       $0, error_line__hla_84 
        jne        mov_reg_imm_32bit__hla_3029
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 
        jmp        mov_reg_imm_32bit__hla_3029

mov_reg_imm_8bit__hla_3027:
        call       get_byte_value__hla_1523
        movb       %al, %dl 
        mov        $176, %al 
        call       store_mov_reg_imm_code__hla_2557
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

mov_reg_imm_16bit__hla_3028:
        call       get_word_value__hla_1535
        movw       %ax, %dx 
        call       operand_16bit__hla_2361
        mov        $184, %al 
        call       store_mov_reg_imm_code__hla_2557
        movw       %dx, %ax 
        call       mark_relocation
        stosw
        jmp        instruction_assembled__hla_2891

mov_reg_imm_32bit__hla_3029:
        call       operand_32bit__hla_2370
        call       get_dword_value__hla_1547
        movl       %eax, %edx 
        mov        $184, %al 
        call       store_mov_reg_imm_code__hla_2557
        movl       %edx, %eax 
        call       mark_relocation
        stosl
        jmp        instruction_assembled__hla_2891

mov_reg_imm_64bit__hla_3030:
        call       operand_64bit__hla_2379
        call       get_qword_value__hla_1570
        movl       %edx, %ecx 
        cmpb       $0, size_declared__hla_128 
        jne        mov_reg_imm_64bit_store__hla_3031
        cmpb       $4, value_type__hla_130 
        jae        mov_reg_imm_64bit_store__hla_3031
        cdq
        cmpl       %edx, %ecx 
        je         mov_reg_64bit_imm_32bit__hla_3032

mov_reg_imm_64bit_store__hla_3031:
        pushl      %eax 
        pushl      %ecx 
        mov        $184, %al 
        call       store_mov_reg_imm_code__hla_2557
        popl       %edx 
        popl       %eax 
        call       mark_relocation
        stosl
        movl       %edx, %eax 
        stosl
        jmp        instruction_assembled__hla_2891

mov_reg_64bit_imm_32bit__hla_3032:
        movl       %eax, %edx 
        mov        postbyte_register__hla_134, %bl 
        movb       $0, postbyte_register__hla_134 
        movb       $199, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        movl       %edx, %eax 
        call       mark_relocation
        stosl
        jmp        instruction_assembled__hla_2891

mov_sreg__hla_3004:
        movb       %al, %ah 
        andb       $15, %al 
        mov        %al, postbyte_register__hla_134 
        shrb       $4, %ah 
        cmpb       $5, %ah 
        je         mov_creg__hla_3033
        cmpb       $7, %ah 
        je         mov_dreg__hla_3034
        ja         mov_treg__hla_3035
        cmpb       $2, %al 
        je         illegal_instruction__hla_574
        decb       postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        je         mov_sreg_mem__hla_3036
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

mov_sreg_reg__hla_3037:
        lodsb
        call       convert_register__hla_2617
        orb        %ah, %ah 
        jz         mov_sreg_reg_size_ok__hla_3038
        cmpb       $2, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 

mov_sreg_reg_size_ok__hla_3038:
        movb       $142, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

mov_sreg_mem__hla_3036:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         mov_sreg_mem_size_ok__hla_3039
        cmpb       $2, %al 
        jne        invalid_operand_size__hla_584

mov_sreg_mem_size_ok__hla_3039:
        movb       $142, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

mov_treg__hla_3035:
        cmpb       $9, %ah 
        jne        invalid_operand__hla_583
        movb       $38, extended_code__hla_133 
        jmp        mov_xrx__hla_3040

mov_dreg__hla_3034:
        movb       $35, extended_code__hla_133 
        jmp        mov_xrx__hla_3040

mov_creg__hla_3033:
        movb       $34, extended_code__hla_133 

mov_xrx__hla_3040:
        movb       $15, base_code__hla_132 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        cmpb       $64, code_type__hla_118 
        je         mov_xrx_64bit__hla_3041
        cmpb       $4, %ah 
        jne        invalid_operand_size__hla_584
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

mov_xrx_64bit__hla_3041:
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

cmov_instruction__hla_183:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        je         cmov_reg_mem__hla_3042
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

cmov_reg_reg__hla_3043:
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        movb       %ah, %al 
        call       operand_autodetect__hla_2387
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

cmov_reg_mem__hla_3042:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        call       operand_autodetect__hla_2387
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

test_instruction__hla_353:
        movb       $132, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         test_reg__hla_3044
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

test_mem__hla_3045:
        call       get_address__hla_2546
        pushl      %edx 
        pushw      %bx 
        pushw      %cx 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        je         test_mem_imm__hla_3046
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

test_mem_reg__hla_3047:
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         test_mem_reg_8bit__hla_3048
        call       operand_autodetect__hla_2387
        incb       base_code__hla_132 

test_mem_reg_8bit__hla_3048:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

test_mem_imm__hla_3046:
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         test_mem_imm_8bit__hla_3049
        cmpb       $2, %al 
        je         test_mem_imm_16bit__hla_3050
        cmpb       $4, %al 
        je         test_mem_imm_32bit__hla_3051
        cmpb       $8, %al 
        je         test_mem_imm_64bit__hla_3052
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpl       $0, error_line__hla_84 
        jne        test_mem_imm_32bit__hla_3051
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 
        jmp        test_mem_imm_32bit__hla_3051

test_mem_imm_8bit__hla_3049:
        call       get_byte_value__hla_1523
        mov        %al, value__hla_41 
        movb       $0, postbyte_register__hla_134 
        movb       $246, base_code__hla_132 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

test_mem_imm_16bit__hla_3050:
        call       operand_16bit__hla_2361
        call       get_word_value__hla_1535
        mov        %ax, value__hla_41 
        movb       $0, postbyte_register__hla_134 
        movb       $247, base_code__hla_132 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        call       store_instruction_with_imm16__hla_2503
        jmp        instruction_assembled__hla_2891

test_mem_imm_32bit__hla_3051:
        call       operand_32bit__hla_2370
        call       get_dword_value__hla_1547

test_mem_imm_32bit_store__hla_3053:
        mov        %eax, value__hla_41 
        movb       $0, postbyte_register__hla_134 
        movb       $247, base_code__hla_132 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        call       store_instruction_with_imm32__hla_2511
        jmp        instruction_assembled__hla_2891

test_mem_imm_64bit__hla_3052:
        cmpb       $0, size_declared__hla_128 
        jne        long_immediate_not_encodable__hla_587
        call       operand_64bit__hla_2379
        call       get_simm32__hla_2519
        cmpb       $4, value_type__hla_130 
        jae        long_immediate_not_encodable__hla_587
        jmp        test_mem_imm_32bit_store__hla_3053

test_reg__hla_3044:
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        je         test_reg_mem__hla_3054
        cmpb       $40, %al 
        je         test_reg_imm__hla_3055
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

test_reg_reg__hla_3056:
        lodsb
        call       convert_register__hla_2617
        mov        postbyte_register__hla_134, %bl 
        mov        %al, postbyte_register__hla_134 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         test_reg_reg_8bit__hla_3057
        call       operand_autodetect__hla_2387
        incb       base_code__hla_132 

test_reg_reg_8bit__hla_3057:
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

test_reg_imm__hla_3055:
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         test_reg_imm_8bit__hla_3058
        cmpb       $2, %al 
        je         test_reg_imm_16bit__hla_3059
        cmpb       $4, %al 
        je         test_reg_imm_32bit__hla_3060
        cmpb       $8, %al 
        je         test_reg_imm_64bit__hla_3061
        jmp        invalid_operand_size__hla_584

test_reg_imm_8bit__hla_3058:
        call       get_byte_value__hla_1523
        movb       %al, %dl 
        mov        postbyte_register__hla_134, %bl 
        movb       $0, postbyte_register__hla_134 
        movb       $246, base_code__hla_132 
        orb        %bl, %bl 
        jz         test_al_imm__hla_3062
        call       store_nomem_instruction__hla_2527
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

test_al_imm__hla_3062:
        movb       $168, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

test_reg_imm_16bit__hla_3059:
        call       operand_16bit__hla_2361
        call       get_word_value__hla_1535
        movw       %ax, %dx 
        mov        postbyte_register__hla_134, %bl 
        movb       $0, postbyte_register__hla_134 
        movb       $247, base_code__hla_132 
        orb        %bl, %bl 
        jz         test_ax_imm__hla_3063
        call       store_nomem_instruction__hla_2527
        movw       %dx, %ax 
        call       mark_relocation
        stosw
        jmp        instruction_assembled__hla_2891

test_ax_imm__hla_3063:
        movb       $169, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movw       %dx, %ax 
        stosw
        jmp        instruction_assembled__hla_2891

test_reg_imm_32bit__hla_3060:
        call       operand_32bit__hla_2370
        call       get_dword_value__hla_1547

test_reg_imm_32bit_store__hla_3064:
        movl       %eax, %edx 
        mov        postbyte_register__hla_134, %bl 
        movb       $0, postbyte_register__hla_134 
        movb       $247, base_code__hla_132 
        orb        %bl, %bl 
        jz         test_eax_imm__hla_3065
        call       store_nomem_instruction__hla_2527
        movl       %edx, %eax 
        call       mark_relocation
        stosl
        jmp        instruction_assembled__hla_2891

test_eax_imm__hla_3065:
        movb       $169, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movl       %edx, %eax 
        stosl
        jmp        instruction_assembled__hla_2891

test_reg_imm_64bit__hla_3061:
        cmpb       $0, size_declared__hla_128 
        jne        long_immediate_not_encodable__hla_587
        call       operand_64bit__hla_2379
        call       get_simm32__hla_2519
        cmpb       $4, value_type__hla_130 
        jae        long_immediate_not_encodable__hla_587
        jmp        test_reg_imm_32bit_store__hla_3064

test_reg_mem__hla_3054:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         test_reg_mem_8bit__hla_3066
        call       operand_autodetect__hla_2387
        incb       base_code__hla_132 

test_reg_mem_8bit__hla_3066:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

xchg_instruction__hla_362:
        movb       $134, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         xchg_reg__hla_3067
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

xchg_mem__hla_3068:
        call       get_address__hla_2546
        pushl      %edx 
        pushw      %bx 
        pushw      %cx 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         test_mem_reg__hla_3047
        jmp        invalid_operand__hla_583

xchg_reg__hla_3067:
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        je         test_reg_mem__hla_3054
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

xchg_reg_reg__hla_3069:
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         xchg_reg_reg_8bit__hla_3070
        call       operand_autodetect__hla_2387
        cmpb       $0, postbyte_register__hla_134 
        je         xchg_ax_reg__hla_3071
        orb        %bl, %bl 
        jnz        xchg_reg_reg_store__hla_3072
        mov        postbyte_register__hla_134, %bl 

xchg_ax_reg__hla_3071:
        cmpb       $64, code_type__hla_118 
        jne        xchg_ax_reg_ok__hla_3073
        cmpb       $4, %ah 
        jne        xchg_ax_reg_ok__hla_3073
        orb        %bl, %bl 
        jz         xchg_reg_reg_store__hla_3072

xchg_ax_reg_ok__hla_3073:
        testb      $8, %bl 
        jz         xchg_ax_reg_store__hla_3074
        orb        $65, rex_prefix__hla_140 
        andb       $7, %bl 

xchg_ax_reg_store__hla_3074:
        addb       $144, %bl 
        mov        %bl, base_code__hla_132 
        call       store_instruction_code__hla_2416
        jmp        instruction_assembled__hla_2891

xchg_reg_reg_store__hla_3072:
        incb       base_code__hla_132 

xchg_reg_reg_8bit__hla_3070:
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

push_instruction__hla_313:
        mov        %al, push_size__hla_138 

push_next__hla_3075:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         push_reg__hla_3076
        cmpb       $40, %al 
        je         push_imm__hla_3077
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

push_mem__hla_3078:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        mov        push_size__hla_138, %ah 
        cmpb       $2, %al 
        je         push_mem_16bit__hla_3079
        cmpb       $4, %al 
        je         push_mem_32bit__hla_3080
        cmpb       $8, %al 
        je         push_mem_64bit__hla_3081
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpb       $2, %ah 
        je         push_mem_16bit__hla_3079
        cmpb       $4, %ah 
        je         push_mem_32bit__hla_3080
        cmpb       $8, %ah 
        je         push_mem_64bit__hla_3081
        cmpl       $0, error_line__hla_84 
        jne        push_mem_store__hla_3082
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 
        jmp        push_mem_store__hla_3082

push_mem_16bit__hla_3079:
        testb      $253, %ah 
        jnz        invalid_operand_size__hla_584
        call       operand_16bit__hla_2361
        jmp        push_mem_store__hla_3082

push_mem_32bit__hla_3080:
        testb      $251, %ah 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        call       operand_32bit__hla_2370
        jmp        push_mem_store__hla_3082

push_mem_64bit__hla_3081:
        testb      $247, %ah 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574

push_mem_store__hla_3082:
        movb       $255, base_code__hla_132 
        movb       $6, postbyte_register__hla_134 
        call       store_instruction__hla_2446
        jmp        push_done__hla_3083

push_reg__hla_3076:
        lodsb
        movb       %al, %ah 
        subb       $16, %ah 
        andb       %al, %ah 
        testb      $240, %ah 
        jnz        push_sreg__hla_3084
        call       convert_register__hla_2617
        testb      $8, %al 
        jz         push_reg_ok__hla_3085
        orb        $65, rex_prefix__hla_140 
        andb       $7, %al 

push_reg_ok__hla_3085:
        addb       $80, %al 
        mov        %al, base_code__hla_132 
        movb       %ah, %al 
        mov        push_size__hla_138, %ah 
        cmpb       $2, %al 
        je         push_reg_16bit__hla_3086
        cmpb       $4, %al 
        je         push_reg_32bit__hla_3087
        cmpb       $8, %al 
        jne        invalid_operand_size__hla_584

push_reg_64bit__hla_3088:
        testb      $247, %ah 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        jmp        push_reg_store__hla_3089

push_reg_32bit__hla_3087:
        testb      $251, %ah 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        call       operand_32bit__hla_2370
        jmp        push_reg_store__hla_3089

push_reg_16bit__hla_3086:
        testb      $253, %ah 
        jnz        invalid_operand_size__hla_584
        call       operand_16bit__hla_2361

push_reg_store__hla_3089:
        call       store_instruction_code__hla_2416
        jmp        push_done__hla_3083

push_sreg__hla_3084:
        movb       %al, %bl 
        mov        operand_size__hla_127, %dl 
        mov        push_size__hla_138, %dh 
        cmpb       $2, %dl 
        je         push_sreg16__hla_3090
        cmpb       $4, %dl 
        je         push_sreg32__hla_3091
        cmpb       $8, %dl 
        je         push_sreg64__hla_3092
        orb        %dl, %dl 
        jnz        invalid_operand_size__hla_584
        cmpb       $2, %dh 
        je         push_sreg16__hla_3090
        cmpb       $4, %dh 
        je         push_sreg32__hla_3091
        cmpb       $8, %dh 
        je         push_sreg64__hla_3092
        jmp        push_sreg_store__hla_3093

push_sreg16__hla_3090:
        testb      $253, %dh 
        jnz        invalid_operand_size__hla_584
        call       operand_16bit__hla_2361
        jmp        push_sreg_store__hla_3093

push_sreg32__hla_3091:
        testb      $251, %dh 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        call       operand_32bit__hla_2370
        jmp        push_sreg_store__hla_3093

push_sreg64__hla_3092:
        testb      $247, %dh 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574

push_sreg_store__hla_3093:
        movb       %bl, %al 
        cmpb       $112, %al 
        jae        invalid_operand__hla_583
        subb       $97, %al 
        cmpb       $4, %al 
        jae        push_sreg_386__hla_3094
        shlb       $3, %al 
        addb       $6, %al 
        mov        %al, base_code__hla_132 
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        jmp        push_reg_store__hla_3089

push_sreg_386__hla_3094:
        subb       $4, %al 
        shlb       $3, %al 
        addb       $160, %al 
        mov        %al, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        jmp        push_reg_store__hla_3089

push_imm__hla_3077:
        mov        operand_size__hla_127, %al 
        mov        push_size__hla_138, %ah 
        orb        %al, %al 
        je         push_imm_size_ok__hla_3095
        orb        %ah, %ah 
        je         push_imm_size_ok__hla_3095
        cmpb       %ah, %al 
        jne        invalid_operand_size__hla_584

push_imm_size_ok__hla_3095:
        cmpb       $2, %al 
        je         push_imm_16bit__hla_3096
        cmpb       $4, %al 
        je         push_imm_32bit__hla_3097
        cmpb       $8, %al 
        je         push_imm_64bit__hla_3098
        cmpb       $2, %ah 
        je         push_imm_optimized_16bit__hla_3099
        cmpb       $4, %ah 
        je         push_imm_optimized_32bit__hla_3100
        cmpb       $8, %ah 
        je         push_imm_optimized_64bit__hla_3101
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpb       $16, code_type__hla_118 
        je         push_imm_optimized_16bit__hla_3099
        cmpb       $32, code_type__hla_118 
        je         push_imm_optimized_32bit__hla_3100

push_imm_optimized_64bit__hla_3101:
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        call       get_simm32__hla_2519
        movl       %eax, %edx 
        cmpb       $0, value_type__hla_130 
        jne        push_imm_32bit_store__hla_3102
        cmpl       $-128, %eax 
        jl         push_imm_32bit_store__hla_3102
        cmpl       $128, %eax 
        jge        push_imm_32bit_store__hla_3102
        jmp        push_imm_8bit__hla_3103

push_imm_optimized_32bit__hla_3100:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        call       get_dword_value__hla_1547
        movl       %eax, %edx 
        call       operand_32bit__hla_2370
        cmpb       $0, value_type__hla_130 
        jne        push_imm_32bit_store__hla_3102
        cmpl       $-128, %eax 
        jl         push_imm_32bit_store__hla_3102
        cmpl       $128, %eax 
        jge        push_imm_32bit_store__hla_3102
        jmp        push_imm_8bit__hla_3103

push_imm_optimized_16bit__hla_3099:
        call       get_word_value__hla_1535
        movw       %ax, %dx 
        call       operand_16bit__hla_2361
        cmpb       $0, value_type__hla_130 
        jne        push_imm_16bit_store__hla_3104
        cmpw       $65408, %ax 
        jl         push_imm_16bit_store__hla_3104
        cmpw       $128, %ax 
        jge        push_imm_16bit_store__hla_3104

push_imm_8bit__hla_3103:
        movb       %al, %ah 
        movb       $106, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movb       %ah, %al 
        stosb
        jmp        push_done__hla_3083

push_imm_16bit__hla_3096:
        call       get_word_value__hla_1535
        movw       %ax, %dx 
        call       operand_16bit__hla_2361

push_imm_16bit_store__hla_3104:
        movb       $104, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movw       %dx, %ax 
        call       mark_relocation
        stosw
        jmp        push_done__hla_3083

push_imm_64bit__hla_3098:
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        call       get_simm32__hla_2519
        movl       %eax, %edx 
        jmp        push_imm_32bit_store__hla_3102

push_imm_32bit__hla_3097:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        call       get_dword_value__hla_1547
        movl       %eax, %edx 
        call       operand_32bit__hla_2370

push_imm_32bit_store__hla_3102:
        movb       $104, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movl       %edx, %eax 
        call       mark_relocation
        stosl

push_done__hla_3083:
        lodsb
        decl       %esi 
        cmpb       $15, %al 
        je         instruction_assembled__hla_2891
        orb        %al, %al 
        jz         instruction_assembled__hla_2891
        movb       $0, operand_size__hla_127 
        movb       $0, size_override__hla_125 
        movb       $0, operand_prefix__hla_139 
        movb       $0, rex_prefix__hla_140 
        jmp        push_next__hla_3075

pop_instruction__hla_306:
        mov        %al, push_size__hla_138 

pop_next__hla_3105:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         pop_reg__hla_3106
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

pop_mem__hla_3107:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        mov        push_size__hla_138, %ah 
        cmpb       $2, %al 
        je         pop_mem_16bit__hla_3108
        cmpb       $4, %al 
        je         pop_mem_32bit__hla_3109
        cmpb       $8, %al 
        je         pop_mem_64bit__hla_3110
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpb       $2, %ah 
        je         pop_mem_16bit__hla_3108
        cmpb       $4, %ah 
        je         pop_mem_32bit__hla_3109
        cmpb       $8, %ah 
        je         pop_mem_64bit__hla_3110
        cmpl       $0, error_line__hla_84 
        jne        pop_mem_store__hla_3111
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 
        jmp        pop_mem_store__hla_3111

pop_mem_16bit__hla_3108:
        testb      $253, %ah 
        jnz        invalid_operand_size__hla_584
        call       operand_16bit__hla_2361
        jmp        pop_mem_store__hla_3111

pop_mem_32bit__hla_3109:
        testb      $251, %ah 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        call       operand_32bit__hla_2370
        jmp        pop_mem_store__hla_3111

pop_mem_64bit__hla_3110:
        testb      $247, %ah 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574

pop_mem_store__hla_3111:
        movb       $143, base_code__hla_132 
        movb       $0, postbyte_register__hla_134 
        call       store_instruction__hla_2446
        jmp        pop_done__hla_3112

pop_reg__hla_3106:
        lodsb
        movb       %al, %ah 
        subb       $16, %ah 
        andb       %al, %ah 
        testb      $240, %ah 
        jnz        pop_sreg__hla_3113
        call       convert_register__hla_2617
        testb      $8, %al 
        jz         pop_reg_ok__hla_3114
        orb        $65, rex_prefix__hla_140 
        andb       $7, %al 

pop_reg_ok__hla_3114:
        addb       $88, %al 
        mov        %al, base_code__hla_132 
        movb       %ah, %al 
        mov        push_size__hla_138, %ah 
        cmpb       $2, %al 
        je         pop_reg_16bit__hla_3115
        cmpb       $4, %al 
        je         pop_reg_32bit__hla_3116
        cmpb       $8, %al 
        je         pop_reg_64bit__hla_3117
        jmp        invalid_operand_size__hla_584

pop_reg_64bit__hla_3117:
        testb      $247, %ah 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        jmp        pop_reg_store__hla_3118

pop_reg_32bit__hla_3116:
        testb      $251, %ah 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        call       operand_32bit__hla_2370
        jmp        pop_reg_store__hla_3118

pop_reg_16bit__hla_3115:
        testb      $253, %ah 
        jnz        invalid_operand_size__hla_584
        call       operand_16bit__hla_2361

pop_reg_store__hla_3118:
        call       store_instruction_code__hla_2416

pop_done__hla_3112:
        lodsb
        decl       %esi 
        cmpb       $15, %al 
        je         instruction_assembled__hla_2891
        orb        %al, %al 
        jz         instruction_assembled__hla_2891
        movb       $0, operand_size__hla_127 
        movb       $0, size_override__hla_125 
        movb       $0, operand_prefix__hla_139 
        movb       $0, rex_prefix__hla_140 
        jmp        pop_next__hla_3105

pop_sreg__hla_3113:
        mov        operand_size__hla_127, %dl 
        mov        push_size__hla_138, %dh 
        cmpb       $98, %al 
        je         pop_cs__hla_3119
        movb       %al, %bl 
        cmpb       $2, %dl 
        je         pop_sreg16__hla_3120
        cmpb       $4, %dl 
        je         pop_sreg32__hla_3121
        cmpb       $8, %dl 
        je         pop_sreg64__hla_3122
        orb        %dl, %dl 
        jnz        invalid_operand_size__hla_584
        cmpb       $2, %dh 
        je         pop_sreg16__hla_3120
        cmpb       $4, %dh 
        je         pop_sreg32__hla_3121
        cmpb       $8, %dh 
        je         pop_sreg64__hla_3122
        jmp        pop_sreg_store__hla_3123

pop_sreg16__hla_3120:
        testb      $253, %dh 
        jnz        invalid_operand_size__hla_584
        call       operand_16bit__hla_2361
        jmp        pop_sreg_store__hla_3123

pop_sreg32__hla_3121:
        testb      $251, %dh 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        call       operand_32bit__hla_2370
        jmp        pop_sreg_store__hla_3123

pop_sreg64__hla_3122:
        testb      $247, %dh 
        jnz        invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574

pop_sreg_store__hla_3123:
        movb       %bl, %al 
        cmpb       $112, %al 
        jae        invalid_operand__hla_583
        subb       $97, %al 
        cmpb       $4, %al 
        jae        pop_sreg_386__hla_3124
        shlb       $3, %al 
        addb       $7, %al 
        mov        %al, base_code__hla_132 
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        jmp        pop_reg_store__hla_3118

pop_cs__hla_3119:
        cmpb       $16, code_type__hla_118 
        jne        illegal_instruction__hla_574
        cmpb       $2, %dl 
        je         pop_cs_store__hla_3125
        orb        %dl, %dl 
        jnz        invalid_operand_size__hla_584
        cmpb       $2, %dh 
        je         pop_cs_store__hla_3125
        orb        %dh, %dh 
        jnz        illegal_instruction__hla_574

pop_cs_store__hla_3125:
        testb      $253, %dh 
        jnz        invalid_operand_size__hla_584
        mov        $15, %al 
        stosb
        jmp        pop_done__hla_3112

pop_sreg_386__hla_3124:
        subb       $4, %al 
        shlb       $3, %al 
        addb       $161, %al 
        mov        %al, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        jmp        pop_reg_store__hla_3118

inc_instruction__hla_253:
        mov        %al, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         inc_reg__hla_3126
        cmpb       $91, %al 
        je         inc_mem__hla_3127
        jne        invalid_operand__hla_583

inc_mem__hla_3127:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         inc_mem_8bit__hla_3128
        jb         inc_mem_nosize__hla_3129
        call       operand_autodetect__hla_2387
        mov        $255, %al 
        xchgb      %al, base_code__hla_132 
        mov        %al, postbyte_register__hla_134 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

inc_mem_nosize__hla_3129:
        cmpl       $0, error_line__hla_84 
        jne        inc_mem_8bit__hla_3128
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

inc_mem_8bit__hla_3128:
        mov        $254, %al 
        xchgb      %al, base_code__hla_132 
        mov        %al, postbyte_register__hla_134 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

inc_reg__hla_3126:
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        mov        $254, %al 
        xchgb      %al, base_code__hla_132 
        mov        %al, postbyte_register__hla_134 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         inc_reg_8bit__hla_3130
        call       operand_autodetect__hla_2387
        cmpb       $64, code_type__hla_118 
        je         inc_reg_long_form__hla_3131
        mov        postbyte_register__hla_134, %al 
        shlb       $3, %al 
        addb       %bl, %al 
        addb       $64, %al 
        mov        %al, base_code__hla_132 
        call       store_instruction_code__hla_2416
        jmp        instruction_assembled__hla_2891

inc_reg_long_form__hla_3131:
        incb       base_code__hla_132 

inc_reg_8bit__hla_3130:
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

set_instruction__hla_330:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         set_reg__hla_3132
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

set_mem__hla_3133:
        call       get_address__hla_2546
        cmpb       $1, operand_size__hla_127 
        ja         invalid_operand_size__hla_584
        movb       $0, postbyte_register__hla_134 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

set_reg__hla_3132:
        lodsb
        call       convert_register__hla_2617
        cmpb       $1, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        movb       $0, postbyte_register__hla_134 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

arpl_instruction__hla_173:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        movb       $99, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         arpl_reg__hla_3134
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        cmpb       $2, %ah 
        jne        invalid_operand_size__hla_584
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

arpl_reg__hla_3134:
        lodsb
        call       convert_register__hla_2617
        cmpb       $2, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        cmpb       $2, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

bound_instruction__hla_177:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $2, %al 
        je         bound_16bit__hla_3135
        cmpb       $4, %al 
        je         bound_32bit__hla_3136
        jmp        invalid_operand_size__hla_584

bound_32bit__hla_3136:
        call       operand_32bit__hla_2370
        movb       $98, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

bound_16bit__hla_3135:
        call       operand_16bit__hla_2361
        movb       $98, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

enter_instruction__hla_220:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $2, %ah 
        je         enter_imm16_size_ok__hla_3137
        orb        %ah, %ah 
        jnz        invalid_operand_size__hla_584

enter_imm16_size_ok__hla_3137:
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        call       get_word_value__hla_1535
        cmpb       $0, next_pass_needed__hla_115 
        jne        enter_imm16_ok__hla_3138
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

enter_imm16_ok__hla_3138:
        pushl      %eax 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $1, %ah 
        je         enter_imm8_size_ok__hla_3139
        orb        %ah, %ah 
        jnz        invalid_operand_size__hla_584

enter_imm8_size_ok__hla_3139:
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        call       get_byte_value__hla_1523
        movb       %al, %dl 
        popl       %ebx 
        mov        $200, %al 
        stosb
        movw       %bx, %ax 
        stosw
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

ret_instruction_only64__hla_326:
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        jmp        ret_instruction__hla_321

ret_instruction_32bit_except64__hla_324:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574

ret_instruction_32bit__hla_323:
        call       operand_32bit__hla_2370
        jmp        ret_instruction__hla_321

ret_instruction_16bit__hla_322:
        call       operand_16bit__hla_2361
        jmp        ret_instruction__hla_321

retf_instruction__hla_327:
        cmpb       $64, code_type__hla_118 
        jne        ret_instruction__hla_321

ret_instruction_64bit__hla_325:
        call       operand_64bit__hla_2379

ret_instruction__hla_321:
        mov        %al, base_code__hla_132 
        lodsb
        decl       %esi 
        orb        %al, %al 
        jz         simple_ret__hla_3140
        cmpb       $15, %al 
        je         simple_ret__hla_3140
        lodsb
        call       get_size_operator__hla_1591
        orb        %ah, %ah 
        jz         ret_imm__hla_3141
        cmpb       $2, %ah 
        je         ret_imm__hla_3141
        jmp        invalid_operand_size__hla_584

ret_imm__hla_3141:
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        call       get_word_value__hla_1535
        cmpb       $0, next_pass_needed__hla_115 
        jne        ret_imm_ok__hla_3142
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585

ret_imm_ok__hla_3142:
        cmpb       $0, size_declared__hla_128 
        jne        ret_imm_store__hla_3143
        orw        %ax, %ax 
        jz         simple_ret__hla_3140

ret_imm_store__hla_3143:
        movw       %ax, %dx 
        call       store_instruction_code__hla_2416
        movw       %dx, %ax 
        stosw
        jmp        instruction_assembled__hla_2891

simple_ret__hla_3140:
        incb       base_code__hla_132 
        call       store_instruction_code__hla_2416
        jmp        instruction_assembled__hla_2891

lea_instruction__hla_262:
        movb       $141, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        xorb       %al, %al 
        xchgb      %al, operand_size__hla_127 
        pushl      %eax 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        movb       $-1, size_override__hla_125 
        call       get_address__hla_2546
        popl       %eax 
        mov        %al, operand_size__hla_127 
        call       operand_autodetect__hla_2387
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

ls_instruction__hla_270:
        orb        %al, %al 
        jz         les_instruction__hla_3144
        cmpb       $3, %al 
        jz         lds_instruction__hla_3145
        addb       $176, %al 
        mov        %al, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        jmp        ls_code_ok__hla_3146

les_instruction__hla_3144:
        movb       $196, base_code__hla_132 
        jmp        ls_short_code__hla_3147

lds_instruction__hla_3145:
        movb       $197, base_code__hla_132 

ls_short_code__hla_3147:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574

ls_code_ok__hla_3146:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        addb       $2, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $4, %al 
        je         ls_16bit__hla_3148
        cmpb       $6, %al 
        je         ls_32bit__hla_3149
        cmpb       $10, %al 
        je         ls_64bit__hla_3150
        jmp        invalid_operand_size__hla_584

ls_16bit__hla_3148:
        call       operand_16bit__hla_2361
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

ls_32bit__hla_3149:
        call       operand_32bit__hla_2370
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

ls_64bit__hla_3150:
        call       operand_64bit__hla_2379
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

sh_instruction__hla_331:
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         sh_reg__hla_3151
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

sh_mem__hla_3152:
        call       get_address__hla_2546
        pushl      %edx 
        pushw      %bx 
        pushw      %cx 
        mov        operand_size__hla_127, %al 
        pushl      %eax 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        je         sh_mem_imm__hla_3153
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

sh_mem_reg__hla_3154:
        lodsb
        cmpb       $17, %al 
        jne        invalid_operand__hla_583
        popl       %eax 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        cmpb       $1, %al 
        je         sh_mem_cl_8bit__hla_3155
        jb         sh_mem_cl_nosize__hla_3156
        call       operand_autodetect__hla_2387
        movb       $211, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

sh_mem_cl_nosize__hla_3156:
        cmpl       $0, error_line__hla_84 
        jne        sh_mem_cl_8bit__hla_3155
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

sh_mem_cl_8bit__hla_3155:
        movb       $210, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

sh_mem_imm__hla_3153:
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         sh_mem_imm_size_ok__hla_3157
        cmpb       $1, %al 
        jne        invalid_operand_size__hla_584

sh_mem_imm_size_ok__hla_3157:
        call       get_byte_value__hla_1523
        mov        %al, value__hla_41 
        popl       %eax 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        cmpb       $1, %al 
        je         sh_mem_imm_8bit__hla_3158
        jb         sh_mem_imm_nosize__hla_3159
        call       operand_autodetect__hla_2387
        cmpb       $1, value__hla_41 
        je         sh_mem_1__hla_3160
        movb       $193, base_code__hla_132 
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

sh_mem_1__hla_3160:
        movb       $209, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

sh_mem_imm_nosize__hla_3159:
        cmpl       $0, error_line__hla_84 
        jne        sh_mem_imm_8bit__hla_3158
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

sh_mem_imm_8bit__hla_3158:
        cmpb       $1, value__hla_41 
        je         sh_mem_1_8bit__hla_3161
        movb       $192, base_code__hla_132 
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

sh_mem_1_8bit__hla_3161:
        movb       $208, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

sh_reg__hla_3151:
        lodsb
        call       convert_register__hla_2617
        movw       %ax, %bx 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        je         sh_reg_imm__hla_3162
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

sh_reg_reg__hla_3163:
        lodsb
        cmpb       $17, %al 
        jne        invalid_operand__hla_583
        movb       %bh, %al 
        cmpb       $1, %al 
        je         sh_reg_cl_8bit__hla_3164
        call       operand_autodetect__hla_2387
        movb       $211, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

sh_reg_cl_8bit__hla_3164:
        movb       $210, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

sh_reg_imm__hla_3162:
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         sh_reg_imm_size_ok__hla_3165
        cmpb       $1, %al 
        jne        invalid_operand_size__hla_584

sh_reg_imm_size_ok__hla_3165:
        pushl      %ebx 
        call       get_byte_value__hla_1523
        movb       %al, %dl 
        popl       %ebx 
        movb       %bh, %al 
        cmpb       $1, %al 
        je         sh_reg_imm_8bit__hla_3166
        call       operand_autodetect__hla_2387
        cmpb       $1, %dl 
        je         sh_reg_1__hla_3167
        movb       $193, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

sh_reg_1__hla_3167:
        movb       $209, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

sh_reg_imm_8bit__hla_3166:
        cmpb       $1, %dl 
        je         sh_reg_1_8bit__hla_3168
        movb       $192, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

sh_reg_1_8bit__hla_3168:
        movb       $208, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

shd_instruction__hla_332:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         shd_reg__hla_3169
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

shd_mem__hla_3170:
        call       get_address__hla_2546
        pushl      %edx 
        pushw      %bx 
        pushw      %cx 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        movb       %ah, %al 
        movb       $0, operand_size__hla_127 
        pushl      %eax 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        je         shd_mem_reg_imm__hla_3171
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $17, %al 
        jne        invalid_operand__hla_583
        popl       %eax 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        call       operand_autodetect__hla_2387
        incb       extended_code__hla_133 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

shd_mem_reg_imm__hla_3171:
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         shd_mem_reg_imm_size_ok__hla_3172
        cmpb       $1, %al 
        jne        invalid_operand_size__hla_584

shd_mem_reg_imm_size_ok__hla_3172:
        call       get_byte_value__hla_1523
        mov        %al, value__hla_41 
        popl       %eax 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        call       operand_autodetect__hla_2387
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

shd_reg__hla_3169:
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        postbyte_register__hla_134, %bl 
        mov        %al, postbyte_register__hla_134 
        movb       %ah, %al 
        pushl      %eax 
        pushl      %ebx 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        movb       $0, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        je         shd_reg_reg_imm__hla_3173
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $17, %al 
        jne        invalid_operand__hla_583
        popl       %ebx 
        popl       %eax 
        call       operand_autodetect__hla_2387
        incb       extended_code__hla_133 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

shd_reg_reg_imm__hla_3173:
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         shd_reg_reg_imm_size_ok__hla_3174
        cmpb       $1, %al 
        jne        invalid_operand_size__hla_584

shd_reg_reg_imm_size_ok__hla_3174:
        call       get_byte_value__hla_1523
        movb       %al, %dl 
        popl       %ebx 
        popl       %eax 
        call       operand_autodetect__hla_2387
        call       store_nomem_instruction__hla_2527
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

movx_instruction__hla_297:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        movb       %ah, %al 
        pushl      %eax 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        movb       $0, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         movx_reg__hla_3175
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        popl       %eax 
        mov        operand_size__hla_127, %ah 
        orb        %ah, %ah 
        jz         movx_unknown_size__hla_3176
        cmpb       %al, %ah 
        jae        invalid_operand_size__hla_584
        cmpb       $1, %ah 
        je         movx_mem_8bit__hla_3177
        cmpb       $2, %ah 
        jne        invalid_operand_size__hla_584

movx_mem_16bit__hla_3178:
        incb       extended_code__hla_133 
        call       operand_autodetect__hla_2387
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movx_unknown_size__hla_3176:
        cmpl       $0, error_line__hla_84 
        jne        movx_mem_8bit__hla_3177
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

movx_mem_8bit__hla_3177:
        call       operand_autodetect__hla_2387
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movx_reg__hla_3175:
        lodsb
        call       convert_register__hla_2617
        popl       %ebx 
        xchgb      %al, %bl 
        cmpb       %al, %ah 
        jae        invalid_operand_size__hla_584
        cmpb       $1, %ah 
        je         movx_reg_8bit__hla_3179
        cmpb       $2, %ah 
        je         movx_reg_16bit__hla_3180
        jmp        invalid_operand_size__hla_584

movx_reg_8bit__hla_3179:
        call       operand_autodetect__hla_2387
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

movx_reg_16bit__hla_3180:
        call       operand_autodetect__hla_2387
        incb       extended_code__hla_133 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

movsxd_instruction__hla_296:
        mov        %al, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        movb       $0, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         movsxd_reg__hla_3181
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        cmpb       $4, operand_size__hla_127 
        je         movsxd_mem_store__hla_3182
        cmpb       $0, operand_size__hla_127 
        jne        invalid_operand_size__hla_584

movsxd_mem_store__hla_3182:
        call       operand_64bit__hla_2379
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movsxd_reg__hla_3181:
        lodsb
        call       convert_register__hla_2617
        cmpb       $4, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        call       operand_64bit__hla_2379
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

bt_instruction__hla_181:
        mov        %al, postbyte_register__hla_134 
        shlb       $3, %al 
        addb       $131, %al 
        mov        %al, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         bt_reg__hla_3183
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        pushl      %eax 
        pushw      %bx 
        pushw      %cx 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        cmpb       $40, (%esi) 
        je         bt_mem_imm__hla_3184
        cmpb       $17, (%esi) 
        jne        bt_mem_reg__hla_3185
        cmpb       $40, 2(%esi) 
        je         bt_mem_imm__hla_3184

bt_mem_reg__hla_3185:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        movb       %ah, %al 
        call       operand_autodetect__hla_2387
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

bt_mem_imm__hla_3184:
        xorb       %al, %al 
        xchgb      %al, operand_size__hla_127 
        pushl      %eax 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         bt_mem_imm_size_ok__hla_3186
        cmpb       $1, %al 
        jne        invalid_operand_size__hla_584

bt_mem_imm_size_ok__hla_3186:
        call       get_byte_value__hla_1523
        mov        %al, value__hla_41 
        popl       %eax 
        orb        %al, %al 
        jz         bt_mem_imm_nosize__hla_3187
        call       operand_autodetect__hla_2387

bt_mem_imm_store__hla_3188:
        popw       %cx 
        popw       %bx 
        popl       %edx 
        movb       $186, extended_code__hla_133 
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

bt_mem_imm_nosize__hla_3187:
        cmpl       $0, error_line__hla_84 
        jne        bt_mem_imm_store__hla_3188
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 
        jmp        bt_mem_imm_store__hla_3188

bt_reg__hla_3183:
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        cmpb       $40, (%esi) 
        je         bt_reg_imm__hla_3189
        cmpb       $17, (%esi) 
        jne        bt_reg_reg__hla_3190
        cmpb       $40, 2(%esi) 
        je         bt_reg_imm__hla_3189

bt_reg_reg__hla_3190:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        movb       %ah, %al 
        call       operand_autodetect__hla_2387
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

bt_reg_imm__hla_3189:
        xorb       %al, %al 
        xchgb      %al, operand_size__hla_127 
        pushl      %eax 
        pushl      %ebx 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         bt_reg_imm_size_ok__hla_3191
        cmpb       $1, %al 
        jne        invalid_operand_size__hla_584

bt_reg_imm_size_ok__hla_3191:
        call       get_byte_value__hla_1523
        mov        %al, value__hla_41 
        popl       %ebx 
        popl       %eax 
        call       operand_autodetect__hla_2387

bt_reg_imm_store__hla_3192:
        movb       $186, extended_code__hla_133 
        call       store_nomem_instruction__hla_2527
        mov        value__hla_41, %al 
        stosb
        jmp        instruction_assembled__hla_2891

bs_instruction__hla_179:
        mov        %al, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         bs_reg_reg__hla_3193
        cmpb       $91, %al 
        jne        invalid_argument__hla_578
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        call       operand_autodetect__hla_2387
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

bs_reg_reg__hla_3193:
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        movb       %ah, %al 
        call       operand_autodetect__hla_2387
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

imul_instruction__hla_251:
        movb       $246, base_code__hla_132 
        movb       $5, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         imul_reg__hla_3194
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

imul_mem__hla_3195:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $1, %al 
        je         imul_mem_8bit__hla_3196
        jb         imul_mem_nosize__hla_3197
        call       operand_autodetect__hla_2387
        incb       base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

imul_mem_nosize__hla_3197:
        cmpl       $0, error_line__hla_84 
        jne        imul_mem_8bit__hla_3196
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

imul_mem_8bit__hla_3196:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

imul_reg__hla_3194:
        lodsb
        call       convert_register__hla_2617
        cmpb       $44, (%esi) 
        je         imul_reg___hla_3198
        movb       %al, %bl 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         imul_reg_8bit__hla_3199
        call       operand_autodetect__hla_2387
        incb       base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

imul_reg_8bit__hla_3199:
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

imul_reg___hla_3198:
        mov        %al, postbyte_register__hla_134 
        incl       %esi 
        cmpb       $40, (%esi) 
        je         imul_reg_imm__hla_3200
        cmpb       $17, (%esi) 
        jne        imul_reg_noimm__hla_3201
        cmpb       $40, 2(%esi) 
        je         imul_reg_imm__hla_3200

imul_reg_noimm__hla_3201:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         imul_reg_reg__hla_3202
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

imul_reg_mem__hla_3203:
        call       get_address__hla_2546
        pushl      %edx 
        pushw      %bx 
        pushw      %cx 
        cmpb       $44, (%esi) 
        je         imul_reg_mem_imm__hla_3204
        mov        operand_size__hla_127, %al 
        call       operand_autodetect__hla_2387
        popw       %cx 
        popw       %bx 
        popl       %edx 
        movb       $15, base_code__hla_132 
        movb       $175, extended_code__hla_133 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

imul_reg_mem_imm__hla_3204:
        incl       %esi 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        mov        operand_size__hla_127, %al 
        cmpb       $2, %al 
        je         imul_reg_mem_imm_16bit__hla_3205
        cmpb       $4, %al 
        je         imul_reg_mem_imm_32bit__hla_3206
        cmpb       $8, %al 
        je         imul_reg_mem_imm_64bit__hla_3207
        jmp        invalid_operand_size__hla_584

imul_reg_mem_imm_16bit__hla_3205:
        call       operand_16bit__hla_2361
        call       get_word_value__hla_1535
        mov        %ax, value__hla_41 
        cmpb       $0, value_type__hla_130 
        jne        imul_reg_mem_imm_16bit_store__hla_3208
        cmpb       $0, size_declared__hla_128 
        jne        imul_reg_mem_imm_16bit_store__hla_3208
        cmpw       $65408, %ax 
        jl         imul_reg_mem_imm_16bit_store__hla_3208
        cmpw       $128, %ax 
        jl         imul_reg_mem_imm_8bit_store__hla_3209

imul_reg_mem_imm_16bit_store__hla_3208:
        popw       %cx 
        popw       %bx 
        popl       %edx 
        movb       $105, base_code__hla_132 
        call       store_instruction_with_imm16__hla_2503
        jmp        instruction_assembled__hla_2891

imul_reg_mem_imm_32bit__hla_3206:
        call       operand_32bit__hla_2370
        call       get_dword_value__hla_1547

imul_reg_mem_imm_32bit_ok__hla_3210:
        mov        %eax, value__hla_41 
        cmpb       $0, value_type__hla_130 
        jne        imul_reg_mem_imm_32bit_store__hla_3211
        cmpb       $0, size_declared__hla_128 
        jne        imul_reg_mem_imm_32bit_store__hla_3211
        cmpl       $-128, %eax 
        jl         imul_reg_mem_imm_32bit_store__hla_3211
        cmpl       $128, %eax 
        jl         imul_reg_mem_imm_8bit_store__hla_3209

imul_reg_mem_imm_32bit_store__hla_3211:
        popw       %cx 
        popw       %bx 
        popl       %edx 
        movb       $105, base_code__hla_132 
        call       store_instruction_with_imm32__hla_2511
        jmp        instruction_assembled__hla_2891

imul_reg_mem_imm_64bit__hla_3207:
        cmpb       $0, size_declared__hla_128 
        jne        long_immediate_not_encodable__hla_587
        call       operand_64bit__hla_2379
        call       get_simm32__hla_2519
        cmpb       $4, value_type__hla_130 
        jae        long_immediate_not_encodable__hla_587
        jmp        imul_reg_mem_imm_32bit_ok__hla_3210

imul_reg_mem_imm_8bit_store__hla_3209:
        popw       %cx 
        popw       %bx 
        popl       %edx 
        movb       $107, base_code__hla_132 
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

imul_reg_imm__hla_3200:
        mov        postbyte_register__hla_134, %bl 
        decl       %esi 
        jmp        imul_reg_reg_imm__hla_3212

imul_reg_reg__hla_3202:
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        cmpb       $44, (%esi) 
        je         imul_reg_reg_imm__hla_3212
        movb       %ah, %al 
        call       operand_autodetect__hla_2387
        movb       $15, base_code__hla_132 
        movb       $175, extended_code__hla_133 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

imul_reg_reg_imm__hla_3212:
        incl       %esi 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        mov        operand_size__hla_127, %al 
        cmpb       $2, %al 
        je         imul_reg_reg_imm_16bit__hla_3213
        cmpb       $4, %al 
        je         imul_reg_reg_imm_32bit__hla_3214
        cmpb       $8, %al 
        je         imul_reg_reg_imm_64bit__hla_3215
        jmp        invalid_operand_size__hla_584

imul_reg_reg_imm_16bit__hla_3213:
        call       operand_16bit__hla_2361
        pushl      %ebx 
        call       get_word_value__hla_1535
        popl       %ebx 
        movw       %ax, %dx 
        cmpb       $0, value_type__hla_130 
        jne        imul_reg_reg_imm_16bit_store__hla_3216
        cmpb       $0, size_declared__hla_128 
        jne        imul_reg_reg_imm_16bit_store__hla_3216
        cmpw       $65408, %ax 
        jl         imul_reg_reg_imm_16bit_store__hla_3216
        cmpw       $128, %ax 
        jl         imul_reg_reg_imm_8bit_store__hla_3217

imul_reg_reg_imm_16bit_store__hla_3216:
        movb       $105, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        movw       %dx, %ax 
        call       mark_relocation
        stosw
        jmp        instruction_assembled__hla_2891

imul_reg_reg_imm_32bit__hla_3214:
        call       operand_32bit__hla_2370
        pushl      %ebx 
        call       get_dword_value__hla_1547

imul_reg_reg_imm_32bit_ok__hla_3218:
        popl       %ebx 
        movl       %eax, %edx 
        cmpb       $0, value_type__hla_130 
        jne        imul_reg_reg_imm_32bit_store__hla_3219
        cmpb       $0, size_declared__hla_128 
        jne        imul_reg_reg_imm_32bit_store__hla_3219
        cmpl       $-128, %eax 
        jl         imul_reg_reg_imm_32bit_store__hla_3219
        cmpl       $128, %eax 
        jl         imul_reg_reg_imm_8bit_store__hla_3217

imul_reg_reg_imm_32bit_store__hla_3219:
        movb       $105, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        movl       %edx, %eax 
        call       mark_relocation
        stosl
        jmp        instruction_assembled__hla_2891

imul_reg_reg_imm_64bit__hla_3215:
        cmpb       $0, size_declared__hla_128 
        jne        long_immediate_not_encodable__hla_587
        call       operand_64bit__hla_2379
        pushl      %ebx 
        call       get_simm32__hla_2519
        cmpb       $4, value_type__hla_130 
        jae        long_immediate_not_encodable__hla_587
        jmp        imul_reg_reg_imm_32bit_ok__hla_3218

imul_reg_reg_imm_8bit_store__hla_3217:
        movb       $107, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

in_instruction__hla_252:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        orb        %al, %al 
        jnz        invalid_operand__hla_583
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        movb       %ah, %al 
        pushl      %eax 
        movb       $0, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        je         in_imm__hla_3220
        cmpb       $16, %al 
        je         in_reg__hla_3221
        jmp        invalid_operand__hla_583

in_reg__hla_3221:
        lodsb
        cmpb       $34, %al 
        jne        invalid_operand__hla_583
        popl       %eax 
        cmpb       $1, %al 
        je         in_al_dx__hla_3222
        cmpb       $2, %al 
        je         in_ax_dx__hla_3223
        cmpb       $4, %al 
        je         in_eax_dx__hla_3224
        jmp        invalid_operand_size__hla_584

in_al_dx__hla_3222:
        mov        $236, %al 
        stosb
        jmp        instruction_assembled__hla_2891

in_ax_dx__hla_3223:
        call       operand_16bit__hla_2361
        movb       $237, base_code__hla_132 
        call       store_instruction_code__hla_2416
        jmp        instruction_assembled__hla_2891

in_eax_dx__hla_3224:
        call       operand_32bit__hla_2370
        movb       $237, base_code__hla_132 
        call       store_instruction_code__hla_2416
        jmp        instruction_assembled__hla_2891

in_imm__hla_3220:
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         in_imm_size_ok__hla_3225
        cmpb       $1, %al 
        jne        invalid_operand_size__hla_584

in_imm_size_ok__hla_3225:
        call       get_byte_value__hla_1523
        movb       %al, %dl 
        popl       %eax 
        cmpb       $1, %al 
        je         in_al_imm__hla_3226
        cmpb       $2, %al 
        je         in_ax_imm__hla_3227
        cmpb       $4, %al 
        je         in_eax_imm__hla_3228
        jmp        invalid_operand_size__hla_584

in_al_imm__hla_3226:
        mov        $228, %al 
        stosb
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

in_ax_imm__hla_3227:
        call       operand_16bit__hla_2361
        movb       $229, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

in_eax_imm__hla_3228:
        call       operand_32bit__hla_2370
        movb       $229, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

out_instruction__hla_299:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        je         out_imm__hla_3229
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $34, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        movb       $0, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        orb        %al, %al 
        jnz        invalid_operand__hla_583
        movb       %ah, %al 
        cmpb       $1, %al 
        je         out_dx_al__hla_3230
        cmpb       $2, %al 
        je         out_dx_ax__hla_3231
        cmpb       $4, %al 
        je         out_dx_eax__hla_3232
        jmp        invalid_operand_size__hla_584

out_dx_al__hla_3230:
        mov        $238, %al 
        stosb
        jmp        instruction_assembled__hla_2891

out_dx_ax__hla_3231:
        call       operand_16bit__hla_2361
        movb       $239, base_code__hla_132 
        call       store_instruction_code__hla_2416
        jmp        instruction_assembled__hla_2891

out_dx_eax__hla_3232:
        call       operand_32bit__hla_2370
        movb       $239, base_code__hla_132 
        call       store_instruction_code__hla_2416
        jmp        instruction_assembled__hla_2891

out_imm__hla_3229:
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         out_imm_size_ok__hla_3233
        cmpb       $1, %al 
        jne        invalid_operand_size__hla_584

out_imm_size_ok__hla_3233:
        call       get_byte_value__hla_1523
        movb       %al, %dl 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        movb       $0, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        orb        %al, %al 
        jnz        invalid_operand__hla_583
        movb       %ah, %al 
        cmpb       $1, %al 
        je         out_imm_al__hla_3234
        cmpb       $2, %al 
        je         out_imm_ax__hla_3235
        cmpb       $4, %al 
        je         out_imm_eax__hla_3236
        jmp        invalid_operand_size__hla_584

out_imm_al__hla_3234:
        mov        $230, %al 
        stosb
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

out_imm_ax__hla_3235:
        call       operand_16bit__hla_2361
        movb       $231, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

out_imm_eax__hla_3236:
        call       operand_32bit__hla_2370
        movb       $231, base_code__hla_132 
        call       store_instruction_code__hla_2416
        movb       %dl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

call_instruction__hla_182:
        movb       $2, postbyte_register__hla_134 
        movb       $232, base_code__hla_132 
        movb       $154, extended_code__hla_133 
        jmp        process_jmp__hla_3237

jmp_instruction__hla_258:
        movb       $4, postbyte_register__hla_134 
        movb       $233, base_code__hla_132 
        movb       $234, extended_code__hla_133 

process_jmp__hla_3237:
        lodsb
        call       get_jump_operator__hla_2645
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        je         jmp_imm__hla_3238
        movb       $255, base_code__hla_132 
        cmpb       $16, %al 
        je         jmp_reg__hla_3239
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

jmp_mem__hla_3240:
        cmpb       $1, jump_type__hla_137 
        je         illegal_instruction__hla_574
        call       get_address__hla_2546
        movl       %eax, %edx 
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         jmp_mem_size_not_specified__hla_3241
        cmpb       $2, %al 
        je         jmp_mem_16bit__hla_3242
        cmpb       $4, %al 
        je         jmp_mem_32bit__hla_3243
        cmpb       $6, %al 
        je         jmp_mem_48bit__hla_3244
        cmpb       $8, %al 
        je         jmp_mem_64bit__hla_3245
        cmpb       $10, %al 
        je         jmp_mem_80bit__hla_3246
        jmp        invalid_operand_size__hla_584

jmp_mem_size_not_specified__hla_3241:
        cmpb       $3, jump_type__hla_137 
        je         jmp_mem_far__hla_3247
        cmpb       $2, jump_type__hla_137 
        je         jmp_mem_near__hla_3248
        cmpl       $0, error_line__hla_84 
        jne        jmp_mem_near__hla_3248
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

jmp_mem_near__hla_3248:
        cmpb       $16, code_type__hla_118 
        je         jmp_mem_16bit__hla_3242
        cmpb       $32, code_type__hla_118 
        je         jmp_mem_near_32bit__hla_3249

jmp_mem_64bit__hla_3245:
        cmpb       $3, jump_type__hla_137 
        je         invalid_operand_size__hla_584
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

jmp_mem_far__hla_3247:
        cmpb       $16, code_type__hla_118 
        je         jmp_mem_far_32bit__hla_3250

jmp_mem_48bit__hla_3244:
        call       operand_32bit__hla_2370

jmp_mem_far_store__hla_3251:
        cmpb       $2, jump_type__hla_137 
        je         invalid_operand_size__hla_584
        incb       postbyte_register__hla_134 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

jmp_mem_80bit__hla_3246:
        call       operand_64bit__hla_2379
        jmp        jmp_mem_far_store__hla_3251

jmp_mem_far_32bit__hla_3250:
        call       operand_16bit__hla_2361
        jmp        jmp_mem_far_store__hla_3251

jmp_mem_32bit__hla_3243:
        cmpb       $3, jump_type__hla_137 
        je         jmp_mem_far_32bit__hla_3250
        cmpb       $2, jump_type__hla_137 
        je         jmp_mem_near_32bit__hla_3249
        cmpb       $16, code_type__hla_118 
        je         jmp_mem_far_32bit__hla_3250

jmp_mem_near_32bit__hla_3249:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        call       operand_32bit__hla_2370
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

jmp_mem_16bit__hla_3242:
        cmpb       $3, jump_type__hla_137 
        je         invalid_operand_size__hla_584
        call       operand_16bit__hla_2361
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

jmp_reg__hla_3239:
        testb      $1, jump_type__hla_137 
        jnz        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        movb       %ah, %al 
        cmpb       $2, %al 
        je         jmp_reg_16bit__hla_3252
        cmpb       $4, %al 
        je         jmp_reg_32bit__hla_3253
        cmpb       $8, %al 
        jne        invalid_operand_size__hla_584

jmp_reg_64bit__hla_3254:
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

jmp_reg_32bit__hla_3253:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

jmp_reg_16bit__hla_3252:
        call       operand_16bit__hla_2361
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

jmp_imm__hla_3238:
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        movl       %esi, %ebx 
        decl       %esi 
        call       skip_symbol__hla_1654
        xchgl      %ebx, %esi 
        cmpb       $58, (%ebx) 
        je         jmp_far__hla_3255
        cmpb       $3, jump_type__hla_137 
        je         invalid_operand__hla_583

jmp_near__hla_3256:
        mov        operand_size__hla_127, %al 
        cmpb       $2, %al 
        je         jmp_imm_16bit__hla_3257
        cmpb       $4, %al 
        je         jmp_imm_32bit__hla_3258
        cmpb       $8, %al 
        je         jmp_imm_64bit__hla_3259
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpb       $16, code_type__hla_118 
        je         jmp_imm_16bit__hla_3257
        cmpb       $64, code_type__hla_118 
        je         jmp_imm_64bit__hla_3259

jmp_imm_32bit__hla_3258:
        cmpb       $64, code_type__hla_118 
        je         invalid_operand_size__hla_584
        call       get_dword_value__hla_1547
        cmpb       $16, code_type__hla_118 
        jne        jmp_imm_32bit_prefix_ok__hla_3260
        movb       $102, (%edi) 
        incl       %edi 

jmp_imm_32bit_prefix_ok__hla_3260:
        call       calculate_jump_offset__hla_2566
        cdq
        call       check_for_short_jump__hla_2575
        jc         jmp_short__hla_3261

jmp_imm_32bit_store__hla_3262:
        movl       %eax, %edx 
        subl       $3, %edx 
        mov        base_code__hla_132, %al 
        stosb
        movl       %edx, %eax 
        call       mark_relocation
        stosl
        jmp        instruction_assembled__hla_2891

jmp_imm_64bit__hla_3259:
        cmpb       $64, code_type__hla_118 
        jne        invalid_operand_size__hla_584
        call       get_qword_value__hla_1570
        call       calculate_jump_offset__hla_2566
        movl       %edx, %ecx 
        cdq
        cmpl       %ecx, %edx 
        jne        value_out_of_range__hla_607
        call       check_for_short_jump__hla_2575
        jnc        jmp_imm_32bit_store__hla_3262

jmp_short__hla_3261:
        movb       %al, %ah 
        mov        $235, %al 
        stosw
        jmp        instruction_assembled__hla_2891

jmp_imm_16bit__hla_3257:
        call       get_word_value__hla_1535
        cmpb       $16, code_type__hla_118 
        je         jmp_imm_16bit_prefix_ok__hla_3263
        movb       $102, (%edi) 
        incl       %edi 

jmp_imm_16bit_prefix_ok__hla_3263:
        call       calculate_jump_offset__hla_2566
        cwde
        cdq
        call       check_for_short_jump__hla_2575
        jc         jmp_short__hla_3261
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        movl       %eax, %edx 
        decl       %edx 
        mov        base_code__hla_132, %al 
        stosb
        movl       %edx, %eax 
        stosw
        jmp        instruction_assembled__hla_2891

jump_out_of_range__hla_3264:
        cmpl       $0, error_line__hla_84 
        jne        instruction_assembled__hla_2891
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $relative_jump_out_of_range__hla_596, error__hla_85 
        jmp        instruction_assembled__hla_2891

jmp_far__hla_3255:
        cmpb       $2, jump_type__hla_137 
        je         invalid_operand__hla_583
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        mov        extended_code__hla_133, %al 
        mov        %al, base_code__hla_132 
        call       get_word_value__hla_1535
        pushl      %eax 
        incl       %esi 
        lodsb
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        mov        value_type__hla_130, %al 
        pushl      %eax 
        pushl      symbol_identifier__hla_91 
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        mov        operand_size__hla_127, %al 
        cmpb       $4, %al 
        je         jmp_far_16bit__hla_3265
        cmpb       $6, %al 
        je         jmp_far_32bit__hla_3266
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpb       $16, code_type__hla_118 
        jne        jmp_far_32bit__hla_3266

jmp_far_16bit__hla_3265:
        call       get_word_value__hla_1535
        movl       %eax, %ebx 
        call       operand_16bit__hla_2361
        call       store_instruction_code__hla_2416
        movw       %bx, %ax 
        call       mark_relocation
        stosw

jmp_far_segment__hla_3267:
        popl       symbol_identifier__hla_91 
        popl       %eax 
        mov        %al, value_type__hla_130 
        popl       %eax 
        call       mark_relocation
        stosw
        jmp        instruction_assembled__hla_2891

jmp_far_32bit__hla_3266:
        call       get_dword_value__hla_1547
        movl       %eax, %ebx 
        call       operand_32bit__hla_2370
        call       store_instruction_code__hla_2416
        movl       %ebx, %eax 
        call       mark_relocation
        stosl
        jmp        jmp_far_segment__hla_3267

conditional_jump__hla_196:
        mov        %al, base_code__hla_132 
        lodsb
        call       get_jump_operator__hla_2645
        cmpb       $3, jump_type__hla_137 
        je         invalid_operand__hla_583
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        mov        operand_size__hla_127, %al 
        cmpb       $2, %al 
        je         conditional_jump_16bit__hla_3268
        cmpb       $4, %al 
        je         conditional_jump_32bit__hla_3269
        cmpb       $8, %al 
        je         conditional_jump_64bit__hla_3270
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpb       $16, code_type__hla_118 
        je         conditional_jump_16bit__hla_3268
        cmpb       $64, code_type__hla_118 
        je         conditional_jump_64bit__hla_3270

conditional_jump_32bit__hla_3269:
        cmpb       $64, code_type__hla_118 
        je         invalid_operand_size__hla_584
        call       get_dword_value__hla_1547
        cmpb       $16, code_type__hla_118 
        jne        conditional_jump_32bit_prefix_ok__hla_3271
        movb       $102, (%edi) 
        incl       %edi 

conditional_jump_32bit_prefix_ok__hla_3271:
        call       calculate_jump_offset__hla_2566
        cdq
        call       check_for_short_jump__hla_2575
        jc         conditional_jump_short__hla_3272

conditional_jump_32bit_store__hla_3273:
        movl       %eax, %edx 
        subl       $4, %edx 
        mov        base_code__hla_132, %ah 
        addb       $16, %ah 
        mov        $15, %al 
        stosw
        movl       %edx, %eax 
        call       mark_relocation
        stosl
        jmp        instruction_assembled__hla_2891

conditional_jump_64bit__hla_3270:
        cmpb       $64, code_type__hla_118 
        jne        invalid_operand_size__hla_584
        call       get_qword_value__hla_1570
        call       calculate_jump_offset__hla_2566
        movl       %edx, %ecx 
        cdq
        cmpl       %ecx, %edx 
        jne        value_out_of_range__hla_607
        call       check_for_short_jump__hla_2575
        jnc        conditional_jump_32bit_store__hla_3273

conditional_jump_short__hla_3272:
        movb       %al, %ah 
        mov        base_code__hla_132, %al 
        stosw
        jmp        instruction_assembled__hla_2891

conditional_jump_16bit__hla_3268:
        call       get_word_value__hla_1535
        cmpb       $16, code_type__hla_118 
        je         conditional_jump_16bit_prefix_ok__hla_3274
        movb       $102, (%edi) 
        incl       %edi 

conditional_jump_16bit_prefix_ok__hla_3274:
        call       calculate_jump_offset__hla_2566
        cwde
        cdq
        call       check_for_short_jump__hla_2575
        jc         conditional_jump_short__hla_3272
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        movl       %eax, %edx 
        subl       $2, %edx 
        mov        base_code__hla_132, %ah 
        addb       $16, %ah 
        mov        $15, %al 
        stosw
        movl       %edx, %eax 
        stosw
        jmp        instruction_assembled__hla_2891

loop_instruction_16bit__hla_267:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        movb       %al, %dl 
        call       address_16bit_prefix__hla_2398
        movb       %dl, %al 
        jmp        loop_instruction__hla_266

loop_instruction_32bit__hla_268:
        movb       %al, %dl 
        call       address_32bit_prefix__hla_2407
        movb       %dl, %al 
        jmp        loop_instruction__hla_266

loop_instruction_64bit__hla_269:
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574

loop_instruction__hla_266:
        mov        %al, base_code__hla_132 
        lodsb
        call       get_jump_operator__hla_2645
        cmpb       $1, jump_type__hla_137 
        ja         invalid_operand__hla_583
        call       get_size_operator__hla_1591
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        mov        operand_size__hla_127, %al 
        cmpb       $2, %al 
        je         loop_jump_16bit__hla_3275
        cmpb       $4, %al 
        je         loop_jump_32bit__hla_3276
        cmpb       $8, %al 
        je         loop_jump_64bit__hla_3277
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpb       $16, code_type__hla_118 
        je         loop_jump_16bit__hla_3275
        cmpb       $64, code_type__hla_118 
        je         loop_jump_64bit__hla_3277

loop_jump_32bit__hla_3276:
        cmpb       $64, code_type__hla_118 
        je         invalid_operand_size__hla_584
        call       get_dword_value__hla_1547
        cmpb       $16, code_type__hla_118 
        jne        loop_jump_32bit_prefix_ok__hla_3278
        movb       $102, (%edi) 
        incl       %edi 

loop_jump_32bit_prefix_ok__hla_3278:
        call       calculate_jump_offset__hla_2566
        cdq

make_loop_jump__hla_3279:
        call       check_for_short_jump__hla_2575
        jc         conditional_jump_short__hla_3272
        jmp        jump_out_of_range__hla_3264

loop_jump_64bit__hla_3277:
        cmpb       $64, code_type__hla_118 
        jne        invalid_operand_size__hla_584
        call       get_qword_value__hla_1570
        call       calculate_jump_offset__hla_2566
        movl       %edx, %ecx 
        cdq
        cmpl       %ecx, %edx 
        jne        value_out_of_range__hla_607
        jmp        make_loop_jump__hla_3279

loop_jump_16bit__hla_3275:
        call       get_word_value__hla_1535
        cmpb       $16, code_type__hla_118 
        je         loop_jump_16bit_prefix_ok__hla_3280
        movb       $102, (%edi) 
        incl       %edi 

loop_jump_16bit_prefix_ok__hla_3280:
        call       calculate_jump_offset__hla_2566
        cwde
        cdq
        jmp        make_loop_jump__hla_3279

movs_instruction__hla_293:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        orl        %eax, %eax 
        jnz        invalid_address__hla_576
        orb        %ch, %bl 
        jnz        invalid_address__hla_576
        cmpb       $1, segment_register__hla_135 
        ja         invalid_address__hla_576
        pushl      %ebx 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        popl       %edx 
        orl        %eax, %eax 
        jnz        invalid_address__hla_576
        orb        %ch, %bl 
        jnz        invalid_address__hla_576
        movb       %dh, %al 
        movb       %bh, %ah 
        shrb       $4, %al 
        shrb       $4, %ah 
        cmpb       %ah, %al 
        jne        address_sizes_do_not_agree__hla_567
        andb       $7, %bh 
        andb       $7, %dh 
        cmpb       $6, %bh 
        jne        invalid_address__hla_576
        cmpb       $7, %dh 
        jne        invalid_address__hla_576
        cmpb       $2, %al 
        je         movs_address_16bit__hla_3281
        cmpb       $4, %al 
        je         movs_address_32bit__hla_3282
        cmpb       $64, code_type__hla_118 
        jne        invalid_address_size__hla_577
        jmp        movs_store__hla_3283

movs_address_32bit__hla_3282:
        call       address_32bit_prefix__hla_2407
        jmp        movs_store__hla_3283

movs_address_16bit__hla_3281:
        cmpb       $64, code_type__hla_118 
        je         invalid_address_size__hla_577
        call       address_16bit_prefix__hla_2398

movs_store__hla_3283:
        cmpb       $4, segment_register__hla_135 
        je         movs_segment_ok__hla_3284
        call       store_segment_prefix__hla_2350

movs_segment_ok__hla_3284:
        mov        $164, %al 
        mov        operand_size__hla_127, %bl 
        cmpb       $1, %bl 
        je         simple_instruction__hla_335
        incb       %al 
        cmpb       $2, %bl 
        je         simple_instruction_16bit__hla_336
        cmpb       $4, %bl 
        je         simple_instruction_32bit__hla_338
        cmpb       $8, %bl 
        je         simple_instruction_64bit__hla_340
        orb        %bl, %bl 
        jz         operand_size_not_specified__hla_592
        jmp        invalid_operand_size__hla_584

lods_instruction__hla_265:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        orl        %eax, %eax 
        jnz        invalid_address__hla_576
        orb        %ch, %bl 
        jnz        invalid_address__hla_576
        cmpb       $38, %bh 
        je         lods_address_16bit__hla_3285
        cmpb       $70, %bh 
        je         lods_address_32bit__hla_3286
        cmpb       $134, %bh 
        jne        invalid_address__hla_576
        cmpb       $64, code_type__hla_118 
        jne        invalid_address_size__hla_577
        jmp        lods_store__hla_3287

lods_address_32bit__hla_3286:
        call       address_32bit_prefix__hla_2407
        jmp        lods_store__hla_3287

lods_address_16bit__hla_3285:
        cmpb       $64, code_type__hla_118 
        je         invalid_address_size__hla_577
        call       address_16bit_prefix__hla_2398

lods_store__hla_3287:
        cmpb       $4, segment_register__hla_135 
        je         lods_segment_ok__hla_3288
        call       store_segment_prefix__hla_2350

lods_segment_ok__hla_3288:
        mov        $172, %al 
        mov        operand_size__hla_127, %bl 
        cmpb       $1, %bl 
        je         simple_instruction__hla_335
        incb       %al 
        cmpb       $2, %bl 
        je         simple_instruction_16bit__hla_336
        cmpb       $4, %bl 
        je         simple_instruction_32bit__hla_338
        cmpb       $8, %bl 
        je         simple_instruction_64bit__hla_340
        orb        %bl, %bl 
        jz         operand_size_not_specified__hla_592
        jmp        invalid_operand_size__hla_584

stos_instruction__hla_351:
        mov        %al, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        orl        %eax, %eax 
        jnz        invalid_address__hla_576
        orb        %ch, %bl 
        jnz        invalid_address__hla_576
        cmpb       $39, %bh 
        je         stos_address_16bit__hla_3289
        cmpb       $71, %bh 
        je         stos_address_32bit__hla_3290
        cmpb       $135, %bh 
        jne        invalid_address__hla_576
        cmpb       $64, code_type__hla_118 
        jne        invalid_address_size__hla_577
        jmp        stos_store__hla_3291

stos_address_32bit__hla_3290:
        call       address_32bit_prefix__hla_2407
        jmp        stos_store__hla_3291

stos_address_16bit__hla_3289:
        cmpb       $64, code_type__hla_118 
        je         invalid_address_size__hla_577
        call       address_16bit_prefix__hla_2398

stos_store__hla_3291:
        cmpb       $1, segment_register__hla_135 
        ja         invalid_address__hla_576
        mov        base_code__hla_132, %al 
        mov        operand_size__hla_127, %bl 
        cmpb       $1, %bl 
        je         simple_instruction__hla_335
        incb       %al 
        cmpb       $2, %bl 
        je         simple_instruction_16bit__hla_336
        cmpb       $4, %bl 
        je         simple_instruction_32bit__hla_338
        cmpb       $8, %bl 
        je         simple_instruction_64bit__hla_340
        orb        %bl, %bl 
        jz         operand_size_not_specified__hla_592
        jmp        invalid_operand_size__hla_584

cmps_instruction__hla_190:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        orl        %eax, %eax 
        jnz        invalid_address__hla_576
        orb        %ch, %bl 
        jnz        invalid_address__hla_576
        mov        segment_register__hla_135, %al 
        pushw      %ax 
        pushw      %bx 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        orl        %eax, %eax 
        jnz        invalid_address__hla_576
        orb        %ch, %bl 
        jnz        invalid_address__hla_576
        popw       %dx 
        popw       %ax 
        cmpb       $1, segment_register__hla_135 
        ja         invalid_address__hla_576
        mov        %al, segment_register__hla_135 
        movb       %dh, %al 
        movb       %bh, %ah 
        shrb       $4, %al 
        shrb       $4, %ah 
        cmpb       %ah, %al 
        jne        address_sizes_do_not_agree__hla_567
        andb       $7, %bh 
        andb       $7, %dh 
        cmpb       $7, %bh 
        jne        invalid_address__hla_576
        cmpb       $6, %dh 
        jne        invalid_address__hla_576
        cmpb       $2, %al 
        je         cmps_address_16bit__hla_3292
        cmpb       $4, %al 
        je         cmps_address_32bit__hla_3293
        cmpb       $64, code_type__hla_118 
        jne        invalid_address_size__hla_577
        jmp        cmps_store__hla_3294

cmps_address_32bit__hla_3293:
        call       address_32bit_prefix__hla_2407
        jmp        cmps_store__hla_3294

cmps_address_16bit__hla_3292:
        cmpb       $64, code_type__hla_118 
        je         invalid_address_size__hla_577
        call       address_16bit_prefix__hla_2398

cmps_store__hla_3294:
        cmpb       $4, segment_register__hla_135 
        je         cmps_segment_ok__hla_3295
        call       store_segment_prefix__hla_2350

cmps_segment_ok__hla_3295:
        mov        $166, %al 
        mov        operand_size__hla_127, %bl 
        cmpb       $1, %bl 
        je         simple_instruction__hla_335
        incb       %al 
        cmpb       $2, %bl 
        je         simple_instruction_16bit__hla_336
        cmpb       $4, %bl 
        je         simple_instruction_32bit__hla_338
        cmpb       $8, %bl 
        je         simple_instruction_64bit__hla_340
        orb        %bl, %bl 
        jz         operand_size_not_specified__hla_592
        jmp        invalid_operand_size__hla_584

ins_instruction__hla_254:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        orl        %eax, %eax 
        jnz        invalid_address__hla_576
        orb        %ch, %bl 
        jnz        invalid_address__hla_576
        cmpb       $39, %bh 
        je         ins_address_16bit__hla_3296
        cmpb       $71, %bh 
        je         ins_address_32bit__hla_3297
        cmpb       $135, %bh 
        jne        invalid_address__hla_576
        cmpb       $64, code_type__hla_118 
        jne        invalid_address_size__hla_577
        jmp        ins_store__hla_3298

ins_address_32bit__hla_3297:
        call       address_32bit_prefix__hla_2407
        jmp        ins_store__hla_3298

ins_address_16bit__hla_3296:
        cmpb       $64, code_type__hla_118 
        je         invalid_address_size__hla_577
        call       address_16bit_prefix__hla_2398

ins_store__hla_3298:
        cmpb       $1, segment_register__hla_135 
        ja         invalid_address__hla_576
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $34, %al 
        jne        invalid_operand__hla_583
        mov        $108, %al 
        mov        operand_size__hla_127, %bl 
        cmpb       $1, %bl 
        je         simple_instruction__hla_335
        incb       %al 
        cmpb       $2, %bl 
        je         simple_instruction_16bit__hla_336
        cmpb       $4, %bl 
        je         simple_instruction_32bit__hla_338
        orb        %bl, %bl 
        jz         operand_size_not_specified__hla_592
        jmp        invalid_operand_size__hla_584

outs_instruction__hla_300:
        lodsb
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $34, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        orl        %eax, %eax 
        jnz        invalid_address__hla_576
        orb        %ch, %bl 
        jnz        invalid_address__hla_576
        cmpb       $38, %bh 
        je         outs_address_16bit__hla_3299
        cmpb       $70, %bh 
        je         outs_address_32bit__hla_3300
        cmpb       $134, %bh 
        jne        invalid_address__hla_576
        cmpb       $64, code_type__hla_118 
        jne        invalid_address_size__hla_577
        jmp        outs_store__hla_3301

outs_address_32bit__hla_3300:
        call       address_32bit_prefix__hla_2407
        jmp        outs_store__hla_3301

outs_address_16bit__hla_3299:
        cmpb       $64, code_type__hla_118 
        je         invalid_address_size__hla_577
        call       address_16bit_prefix__hla_2398

outs_store__hla_3301:
        cmpb       $4, segment_register__hla_135 
        je         outs_segment_ok__hla_3302
        call       store_segment_prefix__hla_2350

outs_segment_ok__hla_3302:
        mov        $110, %al 
        mov        operand_size__hla_127, %bl 
        cmpb       $1, %bl 
        je         simple_instruction__hla_335
        incb       %al 
        cmpb       $2, %bl 
        je         simple_instruction_16bit__hla_336
        cmpb       $4, %bl 
        je         simple_instruction_32bit__hla_338
        orb        %bl, %bl 
        jz         operand_size_not_specified__hla_592
        jmp        invalid_operand_size__hla_584

xlat_instruction__hla_363:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        orl        %eax, %eax 
        jnz        invalid_address__hla_576
        orb        %ch, %bl 
        jnz        invalid_address__hla_576
        cmpb       $35, %bh 
        je         xlat_address_16bit__hla_3303
        cmpb       $67, %bh 
        je         xlat_address_32bit__hla_3304
        cmpb       $131, %bh 
        jne        invalid_address__hla_576
        cmpb       $64, code_type__hla_118 
        jne        invalid_address_size__hla_577
        jmp        xlat_store__hla_3305

xlat_address_32bit__hla_3304:
        call       address_32bit_prefix__hla_2407
        jmp        xlat_store__hla_3305

xlat_address_16bit__hla_3303:
        cmpb       $64, code_type__hla_118 
        je         invalid_address_size__hla_577
        call       address_16bit_prefix__hla_2398

xlat_store__hla_3305:
        call       store_segment_prefix_if_necessary__hla_2338
        mov        $215, %al 
        cmpb       $1, operand_size__hla_127 
        jbe        simple_instruction__hla_335
        jmp        invalid_operand_size__hla_584

pm_word_instruction__hla_305:
        movb       %al, %ah 
        shrb       $4, %ah 
        andb       $7, %al 
        movb       $15, base_code__hla_132 
        mov        %ah, extended_code__hla_133 
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         pm_reg__hla_3306

pm_mem__hla_3307:
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $2, %al 
        je         pm_mem_store__hla_3308
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584

pm_mem_store__hla_3308:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

pm_reg__hla_3306:
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        cmpb       $2, %ah 
        jne        invalid_operand_size__hla_584
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

pm_store_word_instruction__hla_304:
        movb       %al, %ah 
        shrb       $4, %ah 
        andb       $7, %al 
        movb       $15, base_code__hla_132 
        mov        %ah, extended_code__hla_133 
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        pm_mem__hla_3307
        lodsb
        call       convert_register__hla_2617
        movb       %al, %bl 
        movb       %ah, %al 
        call       operand_autodetect__hla_2387
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

lgdt_instruction__hla_263:
        movb       $15, base_code__hla_132 
        movb       $1, extended_code__hla_133 
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $6, %al 
        je         lgdt_mem_48bit__hla_3309
        cmpb       $10, %al 
        je         lgdt_mem_80bit__hla_3310
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        jmp        lgdt_mem_store__hla_3311

lgdt_mem_80bit__hla_3310:
        cmpb       $64, code_type__hla_118 
        jne        illegal_instruction__hla_574
        jmp        lgdt_mem_store__hla_3311

lgdt_mem_48bit__hla_3309:
        cmpb       $64, code_type__hla_118 
        je         illegal_instruction__hla_574
        cmpb       $2, postbyte_register__hla_134 
        jb         lgdt_mem_store__hla_3311
        call       operand_32bit__hla_2370

lgdt_mem_store__hla_3311:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

lar_instruction__hla_260:
        mov        %al, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        xorb       %al, %al 
        xchgb      %al, operand_size__hla_127 
        call       operand_autodetect__hla_2387
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         lar_reg_reg__hla_3312
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         lar_reg_mem__hla_3313
        cmpb       $2, %al 
        jne        invalid_operand_size__hla_584

lar_reg_mem__hla_3313:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

lar_reg_reg__hla_3312:
        lodsb
        call       convert_register__hla_2617
        cmpb       $2, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

invlpg_instruction__hla_256:
        movb       $15, base_code__hla_132 
        movb       $1, extended_code__hla_133 
        movb       $7, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

swapgs_instruction__hla_352:
        movb       $15, base_code__hla_132 
        movb       $1, extended_code__hla_133 
        movb       $7, postbyte_register__hla_134 
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

basic_486_instruction__hla_174:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         basic_486_reg__hla_3314
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        pushl      %edx 
        pushw      %bx 
        pushw      %cx 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        popw       %cx 
        popw       %bx 
        popl       %edx 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         basic_486_mem_reg_8bit__hla_3315
        call       operand_autodetect__hla_2387
        incb       extended_code__hla_133 

basic_486_mem_reg_8bit__hla_3315:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

basic_486_reg__hla_3314:
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        postbyte_register__hla_134, %bl 
        mov        %al, postbyte_register__hla_134 
        movb       %ah, %al 
        cmpb       $1, %al 
        je         basic_486_reg_reg_8bit__hla_3316
        call       operand_autodetect__hla_2387
        incb       extended_code__hla_133 

basic_486_reg_reg_8bit__hla_3316:
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

bswap_instruction__hla_180:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        testb      $8, %al 
        jz         bswap_reg_code_ok__hla_3317
        orb        $65, rex_prefix__hla_140 
        andb       $7, %al 

bswap_reg_code_ok__hla_3317:
        addb       $200, %al 
        mov        %al, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        cmpb       $8, %ah 
        je         bswap_reg64__hla_3318
        cmpb       $4, %ah 
        jne        invalid_operand_size__hla_584
        call       operand_32bit__hla_2370
        call       store_instruction_code__hla_2416
        jmp        instruction_assembled__hla_2891

bswap_reg64__hla_3318:
        call       operand_64bit__hla_2379
        call       store_instruction_code__hla_2416
        jmp        instruction_assembled__hla_2891

cmpxchgx_instruction__hla_193:
        movb       $15, base_code__hla_132 
        movb       $199, extended_code__hla_133 
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        $1, %ah 
        xchgb      %ah, postbyte_register__hla_134 
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         cmpxchgx_size_ok__hla_3319
        cmpb       %ah, %al 
        jne        invalid_operand_size__hla_584

cmpxchgx_size_ok__hla_3319:
        cmpb       $16, %ah 
        jne        cmpxchgx_store__hla_3320
        call       operand_64bit__hla_2379

cmpxchgx_store__hla_3320:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

basic_fpu_instruction__hla_175:
        mov        %al, postbyte_register__hla_134 
        movb       $216, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         basic_fpu_streg__hla_3321
        cmpb       $91, %al 
        je         basic_fpu_mem__hla_3322
        decl       %esi 
        mov        postbyte_register__hla_134, %ah 
        cmpb       $2, %ah 
        jb         invalid_operand__hla_583
        cmpb       $3, %ah 
        ja         invalid_operand__hla_583
        mov        $1, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

basic_fpu_mem__hla_3322:
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $4, %al 
        je         basic_fpu_mem_32bit__hla_3323
        cmpb       $8, %al 
        je         basic_fpu_mem_64bit__hla_3324
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpl       $0, error_line__hla_84 
        jne        basic_fpu_mem_32bit__hla_3323
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

basic_fpu_mem_32bit__hla_3323:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

basic_fpu_mem_64bit__hla_3324:
        movb       $220, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

basic_fpu_streg__hla_3321:
        lodsb
        call       convert_fpu_register__hla_2627
        movb       %al, %bl 
        mov        postbyte_register__hla_134, %ah 
        cmpb       $2, %ah 
        je         basic_fpu_single_streg__hla_3325
        cmpb       $3, %ah 
        je         basic_fpu_single_streg__hla_3325
        orb        %al, %al 
        jz         basic_fpu_st0__hla_3326
        testb      $6, %ah 
        jz         basic_fpu_streg_st0__hla_3327
        xorb       $1, postbyte_register__hla_134 

basic_fpu_streg_st0__hla_3327:
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_fpu_register__hla_2627
        orb        %al, %al 
        jnz        invalid_operand__hla_583
        movb       $220, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

basic_fpu_st0__hla_3326:
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_fpu_register__hla_2627
        movb       %al, %bl 

basic_fpu_single_streg__hla_3325:
        movb       $216, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

simple_fpu_instruction__hla_334:
        movb       %al, %ah 
        orb        $192, %ah 
        mov        $217, %al 
        stosw
        jmp        instruction_assembled__hla_2891

fi_instruction__hla_232:
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $2, %al 
        je         fi_mem_16bit__hla_3328
        cmpb       $4, %al 
        je         fi_mem_32bit__hla_3329
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpl       $0, error_line__hla_84 
        jne        fi_mem_32bit__hla_3329
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

fi_mem_32bit__hla_3329:
        movb       $218, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fi_mem_16bit__hla_3328:
        movb       $222, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fld_instruction__hla_235:
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         fld_streg__hla_3330
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $4, %al 
        je         fld_mem_32bit__hla_3331
        cmpb       $8, %al 
        je         fld_mem_64bit__hla_3332
        cmpb       $10, %al 
        je         fld_mem_80bit__hla_3333
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpl       $0, error_line__hla_84 
        jne        fld_mem_32bit__hla_3331
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

fld_mem_32bit__hla_3331:
        movb       $217, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fld_mem_64bit__hla_3332:
        movb       $221, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fld_mem_80bit__hla_3333:
        mov        postbyte_register__hla_134, %al 
        cmpb       $0, %al 
        je         fld_mem_80bit_store__hla_3334
        decb       postbyte_register__hla_134 
        cmpb       $3, %al 
        je         fld_mem_80bit_store__hla_3334
        jmp        invalid_operand_size__hla_584

fld_mem_80bit_store__hla_3334:
        addb       $5, postbyte_register__hla_134 
        movb       $219, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fld_streg__hla_3330:
        lodsb
        call       convert_fpu_register__hla_2627
        movb       %al, %bl 
        cmpb       $2, postbyte_register__hla_134 
        jae        fst_streg__hla_3335
        movb       $217, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

fst_streg__hla_3335:
        movb       $221, base_code__hla_132 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

fild_instruction__hla_233:
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        cmpb       $2, %al 
        je         fild_mem_16bit__hla_3336
        cmpb       $4, %al 
        je         fild_mem_32bit__hla_3337
        cmpb       $8, %al 
        je         fild_mem_64bit__hla_3338
        orb        %al, %al 
        jnz        invalid_operand_size__hla_584
        cmpl       $0, error_line__hla_84 
        jne        fild_mem_32bit__hla_3337
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $operand_size_not_specified__hla_592, error__hla_85 

fild_mem_32bit__hla_3337:
        movb       $219, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fild_mem_16bit__hla_3336:
        movb       $223, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fild_mem_64bit__hla_3338:
        mov        postbyte_register__hla_134, %al 
        cmpb       $1, %al 
        je         fisttp_64bit_store__hla_3339
        jb         fild_mem_64bit_store__hla_3340
        decb       postbyte_register__hla_134 
        cmpb       $3, %al 
        je         fild_mem_64bit_store__hla_3340
        jmp        invalid_operand_size__hla_584

fild_mem_64bit_store__hla_3340:
        addb       $5, postbyte_register__hla_134 
        movb       $223, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fisttp_64bit_store__hla_3339:
        movb       $221, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fbld_instruction__hla_224:
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         fbld_mem_80bit__hla_3341
        cmpb       $10, %al 
        je         fbld_mem_80bit__hla_3341
        jmp        invalid_operand_size__hla_584

fbld_mem_80bit__hla_3341:
        movb       $223, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

faddp_instruction__hla_223:
        mov        %al, postbyte_register__hla_134 
        movb       $222, base_code__hla_132 
        movl       %esi, %edx 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         faddp_streg__hla_3342
        movl       %edx, %esi 
        mov        $1, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

faddp_streg__hla_3342:
        lodsb
        call       convert_fpu_register__hla_2627
        movb       %al, %bl 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_fpu_register__hla_2627
        orb        %al, %al 
        jnz        invalid_operand__hla_583
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

fcompp_instruction__hla_228:
        mov        $55774, %ax 
        stosw
        jmp        instruction_assembled__hla_2891

fucompp_instruction__hla_246:
        mov        $59866, %ax 
        stosw
        jmp        instruction_assembled__hla_2891

fxch_instruction__hla_248:
        mov        $473, %dx 
        jmp        fpu_single_operand__hla_3343

ffreep_instruction__hla_231:
        mov        $223, %dx 
        jmp        fpu_single_operand__hla_3343

ffree_instruction__hla_230:
        mov        $221, %dl 
        movb       %al, %dh 

fpu_single_operand__hla_3343:
        movl       %esi, %ebx 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         fpu_streg__hla_3344
        orb        %dh, %dh 
        jz         invalid_operand__hla_583
        movl       %ebx, %esi 
        shlb       $3, %dh 
        orb        $193, %dh 
        movw       %dx, %ax 
        stosw
        jmp        instruction_assembled__hla_2891

fpu_streg__hla_3344:
        lodsb
        call       convert_fpu_register__hla_2627
        shlb       $3, %dh 
        orb        %al, %dh 
        orb        $192, %dh 
        movw       %dx, %ax 
        stosw
        jmp        instruction_assembled__hla_2891

fstenv_instruction__hla_245:
        movb       $155, (%edi) 
        incl       %edi 

fldenv_instruction__hla_237:
        movb       $217, base_code__hla_132 
        jmp        fpu_mem__hla_3345

fsave_instruction__hla_242:
        movb       $155, (%edi) 
        incl       %edi 

fnsave_instruction__hla_239:
        movb       $221, base_code__hla_132 

fpu_mem__hla_3345:
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        cmpb       $0, operand_size__hla_127 
        jne        invalid_operand_size__hla_584
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fstcw_instruction__hla_243:
        movb       $155, (%edi) 
        incl       %edi 

fldcw_instruction__hla_236:
        mov        %al, postbyte_register__hla_134 
        movb       $217, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         fldcw_mem_16bit__hla_3346
        cmpb       $2, %al 
        je         fldcw_mem_16bit__hla_3346
        jmp        invalid_operand_size__hla_584

fldcw_mem_16bit__hla_3346:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fstsw_instruction__hla_244:
        mov        $155, %al 
        stosb

fnstsw_instruction__hla_240:
        movb       $221, base_code__hla_132 
        movb       $7, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         fstsw_reg__hla_3347
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         fstsw_mem_16bit__hla_3348
        cmpb       $2, %al 
        je         fstsw_mem_16bit__hla_3348
        jmp        invalid_operand_size__hla_584

fstsw_mem_16bit__hla_3348:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

fstsw_reg__hla_3347:
        lodsb
        call       convert_register__hla_2617
        cmpw       $512, %ax 
        jne        invalid_operand__hla_583
        mov        $57567, %ax 
        stosw
        jmp        instruction_assembled__hla_2891

finit_instruction__hla_234:
        movb       $155, (%edi) 
        incl       %edi 

fninit_instruction__hla_238:
        movb       %al, %ah 
        mov        $219, %al 
        stosw
        jmp        instruction_assembled__hla_2891

fcmov_instruction__hla_225:
        mov        $218, %dh 
        jmp        fcomi_streg__hla_3349

fcomi_instruction__hla_226:
        mov        $219, %dh 
        jmp        fcomi_streg__hla_3349

fcomip_instruction__hla_227:
        mov        $223, %dh 

fcomi_streg__hla_3349:
        movb       %al, %dl 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_fpu_register__hla_2627
        movb       %al, %ah 
        cmpb       $44, (%esi) 
        je         fcomi_st0_streg__hla_3350
        addb       %dl, %ah 
        movb       %dh, %al 
        stosw
        jmp        instruction_assembled__hla_2891

fcomi_st0_streg__hla_3350:
        orb        %ah, %ah 
        jnz        invalid_operand__hla_583
        incl       %esi 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_fpu_register__hla_2627
        movb       %al, %ah 
        addb       %dl, %ah 
        movb       %dh, %al 
        stosw
        jmp        instruction_assembled__hla_2891

mmx_instruction__hla_273:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        call       make_mmx_prefix__hla_2590
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         mmx_mmreg_mmreg__hla_3351
        cmpb       $91, %al 
        jne        invalid_operand__hla_583

mmx_mmreg_mem__hla_3352:
        call       get_address__hla_2546
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

mmx_mmreg_mmreg__hla_3351:
        lodsb
        call       convert_mmx_register__hla_2635
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

mmx_ps_instruction__hla_274:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        call       make_mmx_prefix__hla_2590
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        movb       $0, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         mmx_mmreg_mmreg__hla_3351
        cmpb       $40, %al 
        je         mmx_ps_mmreg_imm8__hla_3353
        cmpb       $91, %al 
        je         mmx_mmreg_mem__hla_3352
        jmp        invalid_operand__hla_583

mmx_ps_mmreg_imm8__hla_3353:
        call       get_byte_value__hla_1523
        mov        %al, value__hla_41 
        testb      $254, operand_size__hla_127 
        jnz        invalid_value__hla_586
        mov        extended_code__hla_133, %bl 
        movb       %bl, %al 
        shrb       $4, %bl 
        andb       $15, %al 
        addb       $112, %al 
        mov        %al, extended_code__hla_133 
        subb       $12, %bl 
        shlb       $1, %bl 
        xchgb      %bl, postbyte_register__hla_134 
        call       store_nomem_instruction__hla_2527
        mov        value__hla_41, %al 
        stosb
        jmp        instruction_assembled__hla_2891

pextrw_instruction__hla_302:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        cmpb       $4, %ah 
        jnz        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        movb       %al, %bl 
        call       make_mmx_prefix__hla_2590
        cmpb       $197, extended_code__hla_133 
        je         mmx_nomem_imm8__hla_3354
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

mmx_imm8__hla_3355:
        pushw      %bx 
        pushw      %cx 
        pushl      %edx 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        testb      $254, %ah 
        jnz        invalid_operand_size__hla_584
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        call       get_byte_value__hla_1523
        mov        %al, value__hla_41 
        popl       %edx 
        popw       %cx 
        popw       %bx 
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

mmx_nomem_imm8__hla_3354:
        call       store_nomem_instruction__hla_2527
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        testb      $254, %ah 
        jnz        invalid_operand_size__hla_584
        cmpb       $40, %al 
        jne        invalid_operand__hla_583
        call       get_byte_value__hla_1523
        stosb
        jmp        instruction_assembled__hla_2891

pinsrw_instruction__hla_303:
        mov        %al, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        call       make_mmx_prefix__hla_2590
        mov        %al, postbyte_register__hla_134 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         pinsrw_mmreg_reg__hla_3356
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        cmpb       $0, operand_size__hla_127 
        je         mmx_imm8__hla_3355
        cmpb       $2, operand_size__hla_127 
        jne        invalid_operand_size__hla_584
        jmp        mmx_imm8__hla_3355

pinsrw_mmreg_reg__hla_3356:
        lodsb
        call       convert_register__hla_2617
        cmpb       $4, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        jmp        mmx_nomem_imm8__hla_3354

pshufw_instruction__hla_310:
        movb       $8, mmx_size__hla_136 
        mov        %al, operand_prefix__hla_139 
        jmp        pshuf_instruction__hla_3357

pshufd_instruction__hla_309:
        movb       $16, mmx_size__hla_136 
        mov        %al, operand_prefix__hla_139 

pshuf_instruction__hla_3357:
        movb       $15, base_code__hla_132 
        movb       $112, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       mmx_size__hla_136, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         pshuf_mmreg_mmreg__hla_3358
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        jmp        mmx_imm8__hla_3355

pshuf_mmreg_mmreg__hla_3358:
        lodsb
        call       convert_mmx_register__hla_2635
        movb       %al, %bl 
        jmp        mmx_nomem_imm8__hla_3354

movd_instruction__hla_277:
        movb       $15, base_code__hla_132 
        movb       $126, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         movd_reg__hla_3359
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        testb      $251, operand_size__hla_127 
        jnz        invalid_operand_size__hla_584
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        call       make_mmx_prefix__hla_2590
        mov        %al, postbyte_register__hla_134 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movd_reg__hla_3359:
        lodsb
        cmpb       $176, %al 
        jae        movd_mmreg__hla_3360
        call       convert_register__hla_2617
        cmpb       $4, %ah 
        jne        invalid_operand_size__hla_584
        movb       $0, operand_size__hla_127 
        movb       %al, %bl 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        mov        %al, postbyte_register__hla_134 
        call       make_mmx_prefix__hla_2590
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

movd_mmreg__hla_3360:
        movb       $110, extended_code__hla_133 
        call       convert_mmx_register__hla_2635
        call       make_mmx_prefix__hla_2590
        mov        %al, postbyte_register__hla_134 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         movd_mmreg_reg__hla_3361
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        testb      $251, operand_size__hla_127 
        jnz        invalid_operand_size__hla_584
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movd_mmreg_reg__hla_3361:
        lodsb
        call       convert_register__hla_2617
        cmpb       $4, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

movq_instruction__hla_291:
        movb       $15, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         movq_reg__hla_3362
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        testb      $247, operand_size__hla_127 
        jnz        invalid_operand_size__hla_584
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        mov        %al, postbyte_register__hla_134 
        cmpb       $16, %ah 
        je         movq_mem_xmmreg__hla_3363
        movb       $127, extended_code__hla_133 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movq_mem_xmmreg__hla_3363:
        movb       $214, extended_code__hla_133 
        movb       $102, operand_prefix__hla_139 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movq_reg__hla_3362:
        lodsb
        cmpb       $176, %al 
        jae        movq_mmreg__hla_3364
        call       convert_register__hla_2617
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        movb       $0, operand_size__hla_127 
        movb       %al, %bl 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        mov        %al, postbyte_register__hla_134 
        call       make_mmx_prefix__hla_2590
        movb       $126, extended_code__hla_133 
        call       operand_64bit__hla_2379
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

movq_mmreg__hla_3364:
        call       convert_mmx_register__hla_2635
        mov        %al, postbyte_register__hla_134 
        movb       $111, extended_code__hla_133 
        mov        %ah, mmx_size__hla_136 
        cmpb       $16, %ah 
        jne        movq_mmreg___hla_3365
        movb       $126, extended_code__hla_133 
        movb       $243, operand_prefix__hla_139 

movq_mmreg___hla_3365:
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        movb       $0, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         movq_mmreg_reg__hla_3366
        call       get_address__hla_2546
        testb      $247, operand_size__hla_127 
        jnz        invalid_operand_size__hla_584
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movq_mmreg_reg__hla_3366:
        lodsb
        cmpb       $176, %al 
        jae        movq_mmreg_mmreg__hla_3367
        movb       $0, operand_size__hla_127 
        call       convert_register__hla_2617
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        movb       $110, extended_code__hla_133 
        movb       $0, operand_prefix__hla_139 
        movb       %al, %bl 
        cmpb       $16, mmx_size__hla_136 
        jne        movq_mmreg_reg_store__hla_3368
        movb       $102, operand_prefix__hla_139 

movq_mmreg_reg_store__hla_3368:
        call       operand_64bit__hla_2379
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

movq_mmreg_mmreg__hla_3367:
        call       convert_mmx_register__hla_2635
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

movdq_instruction__hla_278:
        mov        %al, operand_prefix__hla_139 
        movb       $15, base_code__hla_132 
        movb       $111, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         movdq_mmreg__hla_3369
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        movb       $127, extended_code__hla_133 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movdq_mmreg__hla_3369:
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         movdq_mmreg_mmreg__hla_3370
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movdq_mmreg_mmreg__hla_3370:
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

lddqu_instruction__hla_261:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        pushl      %eax 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        popl       %eax 
        mov        %al, postbyte_register__hla_134 
        movb       $242, operand_prefix__hla_139 
        movb       $15, base_code__hla_132 
        movb       $240, extended_code__hla_133 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movq2dq_instruction__hla_292:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        movb       $243, operand_prefix__hla_139 
        movb       $15, base_code__hla_132 
        movb       $214, extended_code__hla_133 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

movdq2q_instruction__hla_279:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        movb       $242, operand_prefix__hla_139 
        movb       $15, base_code__hla_132 
        movb       $214, extended_code__hla_133 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

sse_ps_instruction__hla_346:
        movb       $16, mmx_size__hla_136 
        jmp        sse_instruction__hla_3371

sse_pd_instruction__hla_345:
        movb       $16, mmx_size__hla_136 
        movb       $102, operand_prefix__hla_139 
        jmp        sse_instruction__hla_3371

sse_ss_instruction__hla_348:
        movb       $4, mmx_size__hla_136 
        movb       $243, operand_prefix__hla_139 
        jmp        sse_instruction__hla_3371

sse_sd_instruction__hla_347:
        movb       $8, mmx_size__hla_136 
        movb       $242, operand_prefix__hla_139 
        jmp        sse_instruction__hla_3371

comiss_instruction__hla_195:
        movb       $4, mmx_size__hla_136 
        jmp        sse_instruction__hla_3371

comisd_instruction__hla_194:
        movb       $8, mmx_size__hla_136 
        movb       $102, operand_prefix__hla_139 
        jmp        sse_instruction__hla_3371

cvtps2pd_instruction__hla_202:
        movb       $8, mmx_size__hla_136 
        jmp        sse_instruction__hla_3371

cvtpd2dq_instruction__hla_198:
        movb       $16, mmx_size__hla_136 
        movb       $242, operand_prefix__hla_139 
        jmp        sse_instruction__hla_3371

cvtdq2pd_instruction__hla_197:
        movb       $16, mmx_size__hla_136 
        movb       $243, operand_prefix__hla_139 

sse_instruction__hla_3371:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583

sse_xmmreg__hla_3372:
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584

sse_reg__hla_3373:
        mov        %al, postbyte_register__hla_134 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         sse_xmmreg_xmmreg__hla_3374

sse_reg_mem__hla_3375:
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        cmpb       $0, operand_size__hla_127 
        je         sse_mem_size_ok__hla_3376
        mov        mmx_size__hla_136, %al 
        cmpb       %al, operand_size__hla_127 
        jne        invalid_operand_size__hla_584

sse_mem_size_ok__hla_3376:
        cmpb       $198, extended_code__hla_133 
        je         mmx_imm8__hla_3355
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

sse_xmmreg_xmmreg__hla_3374:
        cmpb       $102, operand_prefix__hla_139 
        jne        sse_xmmreg_xmmreg_ok__hla_3377
        cmpb       $18, extended_code__hla_133 
        je         invalid_operand__hla_583
        cmpb       $22, extended_code__hla_133 
        je         invalid_operand__hla_583

sse_xmmreg_xmmreg_ok__hla_3377:
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        cmpb       $198, extended_code__hla_133 
        je         mmx_nomem_imm8__hla_3354
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

ps_dq_instruction__hla_311:
        mov        %al, postbyte_register__hla_134 
        movb       $102, operand_prefix__hla_139 
        movb       $15, base_code__hla_132 
        movb       $115, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        jmp        mmx_nomem_imm8__hla_3354

movpd_instruction__hla_289:
        movb       $102, operand_prefix__hla_139 

movps_instruction__hla_290:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        movb       $16, mmx_size__hla_136 
        jmp        sse_mov_instruction__hla_3378

movss_instruction__hla_295:
        movb       $4, mmx_size__hla_136 
        movb       $243, operand_prefix__hla_139 
        jmp        sse_movs__hla_3379

movsd_instruction__hla_294:
        mov        $165, %al 
        mov        (%esi), %ah 
        orb        %ah, %ah 
        jz         simple_instruction_32bit__hla_338
        cmpb       $15, %ah 
        je         simple_instruction_32bit__hla_338
        movb       $8, mmx_size__hla_136 
        movb       $242, operand_prefix__hla_139 

sse_movs__hla_3379:
        movb       $15, base_code__hla_132 
        movb       $16, extended_code__hla_133 
        jmp        sse_mov_instruction__hla_3378

sse_mov_instruction__hla_3378:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         sse_xmmreg__hla_3372

sse_mem__hla_3380:
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        incb       extended_code__hla_133 
        call       get_address__hla_2546
        cmpb       $0, operand_size__hla_127 
        je         sse_mem_xmmreg__hla_3381
        mov        mmx_size__hla_136, %al 
        cmpb       %al, operand_size__hla_127 
        jne        invalid_operand_size__hla_584
        movb       $0, operand_size__hla_127 

sse_mem_xmmreg__hla_3381:
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movlpd_instruction__hla_281:
        movb       $102, operand_prefix__hla_139 

movlps_instruction__hla_282:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        movb       $8, mmx_size__hla_136 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        sse_mem__hla_3380
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        jmp        sse_reg_mem__hla_3375

movhlps_instruction__hla_280:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        movb       $0, mmx_size__hla_136 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         sse_xmmreg_xmmreg_ok__hla_3377
        jmp        invalid_operand__hla_583

maskmovq_instruction__hla_271:
        mov        $8, %cl 
        jmp        maskmov_instruction__hla_3382

maskmovdqu_instruction__hla_272:
        mov        $16, %cl 
        movb       $102, operand_prefix__hla_139 

maskmov_instruction__hla_3382:
        movb       $15, base_code__hla_132 
        movb       $247, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       %cl, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

movmskpd_instruction__hla_283:
        movb       $102, operand_prefix__hla_139 

movmskps_instruction__hla_284:
        movb       $15, base_code__hla_132 
        movb       $80, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        cmpb       $4, %ah 
        jne        invalid_operand_size__hla_584
        movb       $0, operand_size__hla_127 
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

cmppd_instruction__hla_188:
        movb       $102, operand_prefix__hla_139 

cmpps_instruction__hla_189:
        movb       $15, base_code__hla_132 
        movb       $194, extended_code__hla_133 
        movb       $16, mmx_size__hla_136 
        movb       $-1, value__hla_41 
        jmp        sse_cmp_instruction__hla_3383

cmp_pd_instruction__hla_184:
        movb       $102, operand_prefix__hla_139 

cmp_ps_instruction__hla_185:
        movb       $15, base_code__hla_132 
        movb       $194, extended_code__hla_133 
        movb       $16, mmx_size__hla_136 
        mov        %al, value__hla_41 
        jmp        sse_cmp_instruction__hla_3383

cmpss_instruction__hla_192:
        movb       $4, mmx_size__hla_136 
        movb       $243, operand_prefix__hla_139 
        jmp        cmpsx_instruction__hla_3384

cmpsd_instruction__hla_191:
        mov        $167, %al 
        mov        (%esi), %ah 
        orb        %ah, %ah 
        jz         simple_instruction_32bit__hla_338
        cmpb       $15, %ah 
        je         simple_instruction_32bit__hla_338
        movb       $8, mmx_size__hla_136 
        movb       $242, operand_prefix__hla_139 

cmpsx_instruction__hla_3384:
        movb       $15, base_code__hla_132 
        movb       $194, extended_code__hla_133 
        movb       $-1, value__hla_41 
        jmp        sse_cmp_instruction__hla_3383

cmp_ss_instruction__hla_187:
        movb       $4, mmx_size__hla_136 
        movb       $243, operand_prefix__hla_139 
        jmp        cmp_sx_instruction__hla_3385

cmp_sd_instruction__hla_186:
        movb       $8, mmx_size__hla_136 
        movb       $242, operand_prefix__hla_139 

cmp_sx_instruction__hla_3385:
        movb       $15, base_code__hla_132 
        movb       $194, extended_code__hla_133 
        mov        %al, value__hla_41 

sse_cmp_instruction__hla_3383:
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        movb       $0, operand_size__hla_127 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         sse_cmp_xmmreg_xmmreg__hla_3386
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         sse_cmp_size_ok__hla_3387
        cmpb       mmx_size__hla_136, %al 
        jne        invalid_operand_size__hla_584

sse_cmp_size_ok__hla_3387:
        pushw      %bx 
        pushw      %cx 
        pushl      %edx 
        call       get_nextbyte__hla_2599
        popl       %edx 
        popw       %cx 
        popw       %bx 
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

sse_cmp_xmmreg_xmmreg__hla_3386:
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        call       get_nextbyte__hla_2599
        mov        value__hla_41, %al 
        stosb
        jmp        instruction_assembled__hla_2891

cvtpi2pd_instruction__hla_200:
        movb       $102, operand_prefix__hla_139 

cvtpi2ps_instruction__hla_201:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         cvtpi_xmmreg_xmmreg__hla_3388
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        cmpb       $0, operand_size__hla_127 
        je         cvtpi_size_ok__hla_3389
        cmpb       $8, operand_size__hla_127 
        jne        invalid_operand_size__hla_584

cvtpi_size_ok__hla_3389:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

cvtpi_xmmreg_xmmreg__hla_3388:
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

cvtsi2ss_instruction__hla_206:
        movb       $243, operand_prefix__hla_139 
        jmp        cvtsi_instruction__hla_3390

cvtsi2sd_instruction__hla_205:
        movb       $242, operand_prefix__hla_139 

cvtsi_instruction__hla_3390:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $16, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        movb       $0, operand_size__hla_127 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         cvtsi_xmmreg_reg__hla_3391
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        cmpb       $0, operand_size__hla_127 
        je         cvtsi_size_ok__hla_3392
        cmpb       $4, operand_size__hla_127 
        jne        invalid_operand_size__hla_584

cvtsi_size_ok__hla_3392:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

cvtsi_xmmreg_reg__hla_3391:
        lodsb
        call       convert_register__hla_2617
        cmpb       $4, %ah 
        je         cvtsi_xmmreg_reg_store__hla_3393
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        call       operand_64bit__hla_2379

cvtsi_xmmreg_reg_store__hla_3393:
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        jmp        instruction_assembled__hla_2891

cvtps2pi_instruction__hla_203:
        movb       $8, mmx_size__hla_136 
        jmp        cvtpd_instruction__hla_3394

cvtpd2pi_instruction__hla_199:
        movb       $102, operand_prefix__hla_139 
        movb       $16, mmx_size__hla_136 

cvtpd_instruction__hla_3394:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        movb       $0, operand_size__hla_127 
        jmp        sse_reg__hla_3373

cvtss2si_instruction__hla_207:
        movb       $243, operand_prefix__hla_139 
        movb       $4, mmx_size__hla_136 
        jmp        cvt2si_instruction__hla_3395

cvtsd2si_instruction__hla_204:
        movb       $242, operand_prefix__hla_139 
        movb       $8, mmx_size__hla_136 

cvt2si_instruction__hla_3395:
        mov        %al, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        movb       $0, operand_size__hla_127 
        cmpb       $4, %ah 
        je         sse_reg__hla_3373
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        call       operand_64bit__hla_2379
        jmp        sse_reg__hla_3373

amd3dnow_instruction__hla_171:
        movb       $15, base_code__hla_132 
        movb       $15, extended_code__hla_133 
        mov        %al, value__hla_41 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        je         amd3dnow_mmreg_mmreg__hla_3396
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        call       store_instruction_with_imm8__hla_2495
        jmp        instruction_assembled__hla_2891

amd3dnow_mmreg_mmreg__hla_3396:
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        movb       %al, %bl 
        call       store_nomem_instruction__hla_2527
        mov        value__hla_41, %al 
        stosb
        jmp        instruction_assembled__hla_2891

fxsave_instruction__hla_247:
        movb       $174, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %ah 
        orb        %ah, %ah 
        jz         fxsave_size_ok__hla_3397
        mov        postbyte_register__hla_134, %al 
        cmpb       $7, %al 
        je         clflush_size_check__hla_3398
        cmpb       $2, %al 
        jb         invalid_operand_size__hla_584
        cmpb       $3, %al 
        ja         invalid_operand_size__hla_584
        cmpb       $4, %ah 
        jne        invalid_operand_size__hla_584
        jmp        fxsave_size_ok__hla_3397

clflush_size_check__hla_3398:
        cmpb       $1, %ah 
        jne        invalid_operand_size__hla_584

fxsave_size_ok__hla_3397:
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

prefetch_instruction__hla_307:
        movb       $24, extended_code__hla_133 

prefetch_mem_8bit__hla_3399:
        movb       $15, base_code__hla_132 
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        orb        %ah, %ah 
        jz         prefetch_size_ok__hla_3400
        cmpb       $1, %ah 
        jne        invalid_operand_size__hla_584

prefetch_size_ok__hla_3400:
        call       get_address__hla_2546
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

amd_prefetch_instruction__hla_172:
        movb       $13, extended_code__hla_133 
        jmp        prefetch_mem_8bit__hla_3399

fence_instruction__hla_229:
        movb       %al, %bl 
        mov        $44559, %ax 
        stosw
        movb       %bl, %al 
        stosb
        jmp        instruction_assembled__hla_2891

pause_instruction__hla_301:
        mov        $37107, %ax 
        stosw
        jmp        instruction_assembled__hla_2891

movntq_instruction__hla_286:
        movb       $8, mmx_size__hla_136 
        jmp        movnt_instruction__hla_3401

movntps_instruction__hla_288:
        movb       $16, mmx_size__hla_136 
        jmp        movnt_instruction__hla_3401

movntdq_instruction__hla_287:
        movb       $102, operand_prefix__hla_139 
        movb       $16, mmx_size__hla_136 

movnt_instruction__hla_3401:
        mov        %al, extended_code__hla_133 
        movb       $15, base_code__hla_132 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_mmx_register__hla_2635
        cmpb       mmx_size__hla_136, %ah 
        jne        invalid_operand_size__hla_584
        mov        %al, postbyte_register__hla_134 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

movnti_instruction__hla_285:
        movb       $15, base_code__hla_132 
        mov        %al, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        cmpb       $4, %ah 
        je         movnti_store__hla_3402
        cmpb       $8, %ah 
        jne        invalid_operand_size__hla_584
        call       operand_64bit__hla_2379

movnti_store__hla_3402:
        mov        %al, postbyte_register__hla_134 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

monitor_instruction__hla_275:
        mov        %al, postbyte_register__hla_134 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        cmpw       $1024, %ax 
        jne        invalid_operand__hla_583
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        cmpw       $1025, %ax 
        jne        invalid_operand__hla_583
        cmpb       $200, postbyte_register__hla_134 
        jne        monitor_instruction_store__hla_3403
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        cmpw       $1026, %ax 
        jne        invalid_operand__hla_583

monitor_instruction_store__hla_3403:
        mov        $271, %ax 
        stosw
        mov        postbyte_register__hla_134, %al 
        stosb
        jmp        instruction_assembled__hla_2891

simple_vmx_instruction__hla_343:
        movb       %al, %ah 
        mov        $15, %al 
        stosb
        mov        $1, %al 
        stosw
        jmp        instruction_assembled__hla_2891

vmclear_instruction__hla_356:
        movb       $102, operand_prefix__hla_139 
        jmp        vmx_instruction__hla_359

vmxon_instruction__hla_360:
        movb       $243, operand_prefix__hla_139 

vmx_instruction__hla_359:
        mov        %al, postbyte_register__hla_134 
        movb       $199, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        mov        operand_size__hla_127, %al 
        orb        %al, %al 
        jz         vmx_size_ok__hla_3404
        cmpb       $8, %al 
        jne        invalid_operand_size__hla_584

vmx_size_ok__hla_3404:
        movb       $15, base_code__hla_132 
        call       store_instruction__hla_2446
        jmp        instruction_assembled__hla_2891

vmread_instruction__hla_357:
        movb       $120, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 

vmread_check_size__hla_3405:
        cmpb       $64, code_type__hla_118 
        je         vmread_long__hla_3406
        cmpb       $4, operand_size__hla_127 
        je         vmx_size_ok__hla_3404
        jmp        invalid_operand_size__hla_584

vmread_long__hla_3406:
        cmpb       $8, operand_size__hla_127 
        je         vmx_size_ok__hla_3404
        jmp        invalid_operand_size__hla_584

vmwrite_instruction__hla_358:
        movb       $121, extended_code__hla_133 
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $16, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       convert_register__hla_2617
        mov        %al, postbyte_register__hla_134 
        lodsb
        cmpb       $44, %al 
        jne        invalid_operand__hla_583
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $91, %al 
        jne        invalid_operand__hla_583
        call       get_address__hla_2546
        jmp        vmread_check_size__hla_3405
        int        $3 
        int        $3 
        int        $3 

 .ascii "format_directive"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 

format_directive__hla_241:
        cmpl       code_start__hla_55, %edi 
        jne        unexpected_instruction__hla_606
        cmpb       $0, virtual_data__hla_121 
        jne        unexpected_instruction__hla_606
        cmpb       $0, output_format__hla_117 
        jne        unexpected_instruction__hla_606
        lodsb
        cmpb       $23, %al 
        je         format_prefix__hla_3407
        cmpb       $24, %al 
        jne        invalid_argument__hla_578
        lodsb

select_format__hla_3408:
        movb       %al, %dl 
        shrb       $4, %al 
        mov        %al, output_format__hla_117 
        andl       $15, %edx 
        orl        %edx, format_flags__hla_94 
        cmpb       $2, %al 
        je         format_mz__hla_3409
        cmpb       $3, %al 
        je         format_pe__hla_3410
        cmpb       $4, %al 
        je         format_coff__hla_3411
        cmpb       $5, %al 
        je         format_elf__hla_3412
        jmp        instruction_assembled__hla_2891

format_prefix__hla_3407:
        lodsb
        movb       %al, %ah 
        lodsb
        cmpb       $24, %al 
        jne        invalid_argument__hla_578
        lodsb
        movl       %eax, %edx 
        shrb       $4, %dl 
        shrb       $4, %dh 
        cmpb       %dh, %dl 
        jne        invalid_argument__hla_578
        orb        %ah, %al 
        jmp        select_format__hla_3408

entry_directive__hla_221:
        bts        $16, format_flags__hla_94 
        jc         setting_already_specified__hla_599
        mov        output_format__hla_117, %al 
        cmpb       $2, %al 
        je         mz_entry__hla_3413
        cmpb       $3, %al 
        je         pe_entry__hla_3414
        cmpb       $5, %al 
        jne        illegal_instruction__hla_574
        bt         $0, format_flags__hla_94 
        jc         elf_entry__hla_3415
        jmp        illegal_instruction__hla_574

stack_directive__hla_349:
        bts        $17, format_flags__hla_94 
        jc         setting_already_specified__hla_599
        mov        output_format__hla_117, %al 
        cmpb       $2, %al 
        je         mz_stack__hla_3416
        cmpb       $3, %al 
        je         pe_stack__hla_3417
        jmp        illegal_instruction__hla_574

heap_directive__hla_249:
        bts        $18, format_flags__hla_94 
        jc         setting_already_specified__hla_599
        mov        output_format__hla_117, %al 
        cmpb       $2, %al 
        je         mz_heap__hla_3418
        cmpb       $3, %al 
        je         pe_heap__hla_3419
        jmp        illegal_instruction__hla_574

segment_directive__hla_329:
        cmpb       $0, virtual_data__hla_121 
        jne        illegal_instruction__hla_574
        mov        output_format__hla_117, %al 
        cmpb       $2, %al 
        je         mz_segment__hla_3420
        cmpb       $5, %al 
        je         elf_segment__hla_3421
        jmp        illegal_instruction__hla_574

section_directive__hla_328:
        cmpb       $0, virtual_data__hla_121 
        jne        illegal_instruction__hla_574
        mov        output_format__hla_117, %al 
        cmpb       $3, %al 
        je         pe_section__hla_3422
        cmpb       $4, %al 
        je         coff_section__hla_3423
        cmpb       $5, %al 
        je         elf_section__hla_3424
        jmp        illegal_instruction__hla_574

public_directive__hla_312:
        mov        output_format__hla_117, %al 
        cmpb       $4, %al 
        je         public_allowed__hla_3425
        cmpb       $5, %al 
        jne        illegal_instruction__hla_574
        bt         $0, format_flags__hla_94 
        jc         illegal_instruction__hla_574

public_allowed__hla_3425:
        lodsb
        cmpb       $2, %al 
        jne        invalid_argument__hla_578
        lodsl
        cmpl       $15, %eax 
        jb         invalid_use_of_symbol__hla_585
        je         reserved_word_used_as_symbol__hla_597
        mov        current_pass__hla_111, %dx 
        mov        %dx, 18(%eax) 
        orb        $8, 8(%eax) 
        incl       %esi 
        mov        free_additional_memory__hla_53, %ebx 
        lea        16(%ebx), %edx 
        cmpl       structures_buffer__hla_87, %edx 
        jae        out_of_memory__hla_593
        mov        %edx, free_additional_memory__hla_53 
        mov        %eax, 8(%ebx) 
        mov        current_line__hla_60, %eax 
        mov        %eax, 12(%ebx) 
        lodsb
        cmpb       $134, %al 
        jne        invalid_argument__hla_578
        lodsw
        cmpw       $40, %ax 
        jne        invalid_argument__hla_578
        mov        %esi, 4(%ebx) 
        lodsl
        lea        1(%esi,%eax,1), %esi 
        movb       $128, (%ebx) 
        jmp        instruction_assembled__hla_2891

extrn_directive__hla_222:
        mov        output_format__hla_117, %al 
        cmpb       $4, %al 
        je         extrn_allowed__hla_3428
        cmpb       $5, %al 
        jne        illegal_instruction__hla_574
        bt         $0, format_flags__hla_94 
        jc         illegal_instruction__hla_574

extrn_allowed__hla_3428:
        lodsw
        cmpw       $40, %ax 
        jne        invalid_argument__hla_578
        movl       %esi, %ebx 
        lodsl
        lea        1(%esi,%eax,1), %esi 
        mov        free_additional_memory__hla_53, %edx 
        lea        12(%edx), %eax 
        cmpl       structures_buffer__hla_87, %eax 
        jae        out_of_memory__hla_593
        mov        %eax, free_additional_memory__hla_53 
        movb       $129, (%edx) 
        mov        %ebx, 4(%edx) 
        lodsb
        cmpb       $134, %al 
        jne        invalid_argument__hla_578
        lodsb
        cmpb       $2, %al 
        jne        invalid_argument__hla_578
        lodsl
        cmpl       $15, %eax 
        jb         invalid_use_of_symbol__hla_585
        je         reserved_word_used_as_symbol__hla_597
        incl       %esi 
        movl       %eax, %ebx 
        xorb       %ah, %ah 
        lodsb
        cmpb       $58, %al 
        je         get_extrn_size__hla_3431
        decl       %esi 
        cmpb       $17, %al 
        jne        extrn_size_ok__hla_3432

get_extrn_size__hla_3431:
        lodsw
        cmpb       $17, %al 
        jne        invalid_argument__hla_578

extrn_size_ok__hla_3432:
        mov        %edx, address_symbol__hla_92 
        movzbl     %ah, %ecx 
        mov        %ecx, 8(%edx) 
        xorl       %eax, %eax 
        xorl       %edx, %edx 
        xorl       %ebp, %ebp 
        mov        $2, %ch 
        testl      $8, format_flags__hla_94 
        jz         make_free_label__hla_2895
        mov        $4, %ch 
        jmp        make_free_label__hla_2895

format_mz__hla_3409:
        mov        additional_memory__hla_47, %edx 
        pushl      %edi 
        movl       %edx, %edi 
        mov        $7, %ecx 
        xorl       %eax, %eax 
        rep stosl
        mov        %edi, free_additional_memory__hla_53 
        popl       %edi 
        movw       $65535, 12(%edx) 
        movw       $4096, 16(%edx) 
        movb       $16, code_type__hla_118 
        jmp        instruction_assembled__hla_2891

format_elf__hla_3412:
        testl      $8, format_flags__hla_94 
        jnz        format_elf64__hla_3433
        movl       %edi, %edx 
        mov        $13, %ecx 
        lea        (%edi,%ecx,4), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        xorl       %eax, %eax 
        rep stosl
        movl       $1179403647, (%edx) 
        mov        $1, %al 
        mov        %al, 4(%edx) 
        mov        %al, 5(%edx) 
        mov        %al, 6(%edx) 
        mov        %al, 20(%edx) 
        movb       $3, 18(%edx) 
        movb       $52, 40(%edx) 
        movb       $40, 46(%edx) 
        movb       $32, code_type__hla_118 
        cmpw       $7449, (%esi) 
        je         format_elf_exe__hla_3438
        movb       $2, labels_type__hla_119 

elf_header_ok__hla_3439:
        movb       $1, 16(%edx) 
        mov        additional_memory__hla_47, %eax 
        mov        %eax, symbols_stream__hla_95 
        movl       %eax, %ebx 
        addl       $32, %eax 
        cmpl       structures_buffer__hla_87, %eax 
        jae        out_of_memory__hla_593
        mov        %eax, free_additional_memory__hla_53 
        xorl       %eax, %eax 
        mov        %ebx, current_section__hla_100 
        mov        %eax, number_of_sections__hla_97 
        mov        %edi, org_origin__hla_40 
        mov        %eax, org_origin__hla_40+4 
        mov        %eax, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        mov        %ebx, org_symbol__hla_79 
        mov        %al, (%ebx) 
        mov        %eax, 4(%ebx) 
        mov        %edi, 8(%ebx) 
        mov        $7, %al 
        mov        %eax, 20(%ebx) 
        mov        $4, %al 
        mov        %eax, 16(%ebx) 
        testl      $8, format_flags__hla_94 
        jz         instruction_assembled__hla_2891
        movb       $8, 16(%ebx) 
        jmp        instruction_assembled__hla_2891

format_elf64__hla_3433:
        movl       %edi, %edx 
        mov        $16, %ecx 
        lea        (%edi,%ecx,4), %eax 
        cmpl       display_buffer__hla_86, %eax 
        jae        out_of_memory__hla_593
        xorl       %eax, %eax 
        rep stosl
        movl       $1179403647, (%edx) 
        mov        $1, %al 
        mov        %al, 5(%edx) 
        mov        %al, 6(%edx) 
        mov        %al, 20(%edx) 
        movb       $2, 4(%edx) 
        movb       $62, 18(%edx) 
        movb       $64, 52(%edx) 
        movb       $64, 58(%edx) 
        movb       $64, code_type__hla_118 
        cmpw       $7449, (%esi) 
        je         format_elf64_exe__hla_3446
        movb       $4, labels_type__hla_119 
        jmp        elf_header_ok__hla_3439

elf_section__hla_3424:
        bt         $0, format_flags__hla_94 
        jc         illegal_instruction__hla_574
        call       close_coff_section__hla_1976
        mov        free_additional_memory__hla_53, %ebx 
        lea        32(%ebx), %eax 
        cmpl       structures_buffer__hla_87, %eax 
        jae        out_of_memory__hla_593
        mov        %eax, free_additional_memory__hla_53 
        mov        %ebx, current_section__hla_100 
        incw       number_of_sections__hla_97 
        jz         format_limitations_exceeded__hla_573
        xorl       %eax, %eax 
        mov        %al, (%ebx) 
        mov        %edi, 8(%ebx) 
        mov        %edi, org_origin__hla_40 
        movl       $0, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        mov        %ebx, org_symbol__hla_79 
        testl      $8, format_flags__hla_94 
        jnz        elf64_labels_type__hla_3449
        movb       $2, labels_type__hla_119 
        jmp        elf_labels_type_ok__hla_3450

elf64_labels_type__hla_3449:
        movb       $4, labels_type__hla_119 

elf_labels_type_ok__hla_3450:
        mov        %eax, 16(%ebx) 
        mov        $2, %al 
        mov        %eax, 20(%ebx) 
        lodsw
        cmpw       $40, %ax 
        jne        invalid_argument__hla_578
        mov        %esi, 4(%ebx) 
        mov        (%esi), %ecx 
        lea        5(%esi,%ecx,1), %esi 

elf_section_flags__hla_3451:
        cmpb       $28, (%esi) 
        je         elf_section_alignment__hla_3452
        cmpb       $25, (%esi) 
        jne        elf_section_settings_ok__hla_3453
        incl       %esi 
        lodsb
        subb       $28, %al 
        xorb       $3, %al 
        testb      $253, %al 
        jnz        invalid_argument__hla_578
        movb       %al, %cl 
        mov        $1, %al 
        shlb       %cl, %al 
        testb      %al, 20(%ebx) 
        jnz        setting_already_specified__hla_599
        orb        %al, 20(%ebx) 
        jmp        elf_section_flags__hla_3451

elf_section_alignment__hla_3452:
        incl       %esi 
        lodsb
        orb        %al, %al 
        jnz        invalid_argument__hla_578
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        pushl      %ebx 
        call       get_dword_value__hla_1547
        popl       %ebx 
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        movl       %eax, %edx 
        decl       %edx 
        testl      %edx, %eax 
        jnz        invalid_value__hla_586
        orl        %eax, %eax 
        jz         invalid_value__hla_586
        xchgl      %eax, 16(%ebx) 
        orl        %eax, %eax 
        jnz        setting_already_specified__hla_599
        jmp        elf_section_flags__hla_3451

elf_section_settings_ok__hla_3453:
        cmpl       $0, 16(%ebx) 
        jne        instruction_assembled__hla_2891
        movl       $4, 16(%ebx) 
        testl      $8, format_flags__hla_94 
        jz         instruction_assembled__hla_2891
        movb       $8, 16(%ebx) 
        jmp        instruction_assembled__hla_2891

format_elf_exe__hla_3438:
        addl       $2, %esi 
        orl        $1, format_flags__hla_94 
        movl       $134512640, image_base__hla_102 
        cmpb       $128, (%esi) 
        jne        elf_exe_base_ok__hla_3454
        lodsw
        cmpb       $40, %ah 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        pushl      %edx 
        call       get_dword_value__hla_1547
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        %eax, image_base__hla_102 
        popl       %edx 

elf_exe_base_ok__hla_3454:
        movb       $2, 16(%edx) 
        movb       $32, 42(%edx) 
        movl       %edi, %ebx 
        mov        $8, %ecx 
        cmpw       $0, current_pass__hla_111 
        je         init_elf_segments__hla_3455
        imull      number_of_sections__hla_97, %ecx 

init_elf_segments__hla_3455:
        xorl       %eax, %eax 
        rep stosl
        movl       $0, number_of_sections__hla_97 
        movb       $1, (%ebx) 
        movw       $4096, 28(%ebx) 
        movb       $7, 24(%ebx) 
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        mov        %eax, 4(%ebx) 
        addl       image_base__hla_102, %eax 
        mov        %eax, 8(%ebx) 
        mov        %eax, 12(%ebx) 
        mov        %eax, 24(%edx) 
        xorl       %edx, %edx 
        notl       %eax 
        notl       %edx 
        addl       $1, %eax 
        adcl       $0, %edx 
        addl       %edi, %eax 
        adcl       $0, %edx 
        mov        %eax, org_origin__hla_40 
        mov        %edx, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        mov        %edi, symbols_stream__hla_95 
        jmp        instruction_assembled__hla_2891

format_elf64_exe__hla_3446:
        addl       $2, %esi 
        orl        $1, format_flags__hla_94 
        movl       $4194304, image_base__hla_102 
        movl       $0, image_base_high__hla_103 
        cmpb       $128, (%esi) 
        jne        elf64_exe_base_ok__hla_3456
        lodsw
        cmpb       $40, %ah 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        pushl      %edx 
        call       get_qword_value__hla_1570
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        %eax, image_base__hla_102 
        mov        %edx, image_base_high__hla_103 
        popl       %edx 

elf64_exe_base_ok__hla_3456:
        movb       $2, 16(%edx) 
        movb       $56, 54(%edx) 
        movl       %edi, %ebx 
        mov        $14, %ecx 
        cmpw       $0, current_pass__hla_111 
        je         init_elf64_segments__hla_3457
        imull      number_of_sections__hla_97, %ecx 

init_elf64_segments__hla_3457:
        xorl       %eax, %eax 
        rep stosl
        movl       $0, number_of_sections__hla_97 
        movb       $1, (%ebx) 
        movw       $4096, 48(%ebx) 
        movb       $7, 4(%ebx) 
        pushl      %edx 
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        mov        %eax, 8(%ebx) 
        xorl       %edx, %edx 
        addl       image_base__hla_102, %eax 
        adcl       image_base_high__hla_103, %edx 
        mov        %eax, 16(%ebx) 
        mov        %edx, 20(%ebx) 
        mov        %eax, 24(%ebx) 
        mov        %edx, 28(%ebx) 
        popl       %ebx 
        mov        %eax, 24(%ebx) 
        mov        %edx, 28(%ebx) 
        notl       %eax 
        notl       %edx 
        addl       $1, %eax 
        adcl       $0, %edx 
        addl       %edi, %eax 
        adcl       $0, %edx 
        mov        %eax, org_origin__hla_40 
        mov        %edx, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        mov        %edi, symbols_stream__hla_95 
        jmp        instruction_assembled__hla_2891

elf_entry__hla_3415:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        testl      $8, format_flags__hla_94 
        jnz        elf64_entry__hla_3458
        call       get_dword_value__hla_1547
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        code_start__hla_55, %edx 
        mov        %eax, 24(%edx) 
        jmp        instruction_assembled__hla_2891

elf64_entry__hla_3458:
        call       get_qword_value__hla_1570
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        code_start__hla_55, %ebx 
        mov        %eax, 24(%ebx) 
        mov        %edx, 28(%ebx) 
        jmp        instruction_assembled__hla_2891

elf_segment__hla_3421:
        bt         $0, format_flags__hla_94 
        jnc        illegal_instruction__hla_574
        testl      $8, format_flags__hla_94 
        jnz        elf64_segment__hla_3459
        call       close_elf_segment__hla_1954
        pushl      %eax 
        mov        number_of_sections__hla_97, %ebx 
        shll       $5, %ebx 
        addl       code_start__hla_55, %ebx 
        addl       $52, %ebx 
        cmpl       symbols_stream__hla_95, %ebx 
        jb         new_elf_segment__hla_3460
        mov        symbols_stream__hla_95, %ebx 
        subl       $32, %ebx 
        pushl      %edi 
        movl       %ebx, %edi 
        mov        $8, %ecx 
        xorl       %eax, %eax 
        rep stosl
        popl       %edi 
        orb        $-1, next_pass_needed__hla_115 

new_elf_segment__hla_3460:
        movb       $1, (%ebx) 
        movw       $4096, 28(%ebx) 

elf_segment_flags__hla_3461:
        cmpb       $25, (%esi) 
        jne        elf_segment_flags_ok__hla_3462
        lodsw
        subb       $28, %ah 
        jbe        invalid_argument__hla_578
        cmpb       $1, %ah 
        je         mark_elf_segment_flag__hla_3463
        cmpb       $3, %ah 
        ja         invalid_argument__hla_578
        xorb       $1, %ah 
        cmpb       $2, %ah 
        je         mark_elf_segment_flag__hla_3463
        incb       %ah 

mark_elf_segment_flag__hla_3463:
        testb      %ah, 24(%ebx) 
        jnz        setting_already_specified__hla_599
        orb        %ah, 24(%ebx) 
        jmp        elf_segment_flags__hla_3461

elf_segment_flags_ok__hla_3462:
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        mov        %eax, 4(%ebx) 
        popl       %edx 
        andl       $4095, %eax 
        addl       %eax, %edx 
        mov        %edx, 8(%ebx) 
        mov        %edx, 12(%ebx) 
        movl       %edx, %eax 
        xorl       %edx, %edx 
        notl       %eax 
        notl       %edx 
        addl       $1, %eax 
        adcl       $0, %edx 
        addl       %edi, %eax 
        adcl       $0, %edx 
        mov        %eax, org_origin__hla_40 
        mov        %edx, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        incl       number_of_sections__hla_97 
        jmp        instruction_assembled__hla_2891

elf64_segment__hla_3459:
        call       close_elf64_segment__hla_1965
        pushl      %eax 
        pushl      %edx 
        mov        number_of_sections__hla_97, %ebx 
        imul       $56, %ebx, %ebx 
        addl       code_start__hla_55, %ebx 
        addl       $64, %ebx 
        cmpl       symbols_stream__hla_95, %ebx 
        jb         new_elf64_segment__hla_3464
        mov        symbols_stream__hla_95, %ebx 
        subl       $56, %ebx 
        pushl      %edi 
        movl       %ebx, %edi 
        mov        $14, %ecx 
        xorl       %eax, %eax 
        rep stosl
        popl       %edi 
        orb        $-1, next_pass_needed__hla_115 

new_elf64_segment__hla_3464:
        movb       $1, (%ebx) 
        movw       $4096, 48(%ebx) 

elf64_segment_flags__hla_3465:
        cmpb       $25, (%esi) 
        jne        elf64_segment_flags_ok__hla_3466
        lodsw
        subb       $28, %ah 
        jbe        invalid_argument__hla_578
        cmpb       $1, %ah 
        je         mark_elf64_segment_flag__hla_3467
        cmpb       $3, %ah 
        ja         invalid_argument__hla_578
        xorb       $1, %ah 
        cmpb       $2, %ah 
        je         mark_elf64_segment_flag__hla_3467
        incb       %ah 

mark_elf64_segment_flag__hla_3467:
        testb      %ah, 4(%ebx) 
        jnz        setting_already_specified__hla_599
        orb        %ah, 4(%ebx) 
        jmp        elf64_segment_flags__hla_3465

elf64_segment_flags_ok__hla_3466:
        movl       %edi, %ecx 
        subl       code_start__hla_55, %ecx 
        mov        %ecx, 8(%ebx) 
        popl       %edx 
        popl       %eax 
        andl       $4095, %ecx 
        addl       %ecx, %eax 
        adcl       $0, %edx 
        mov        %eax, 16(%ebx) 
        mov        %edx, 20(%ebx) 
        mov        %eax, 24(%ebx) 
        mov        %edx, 28(%ebx) 
        notl       %eax 
        notl       %edx 
        addl       $1, %eax 
        adcl       $0, %edx 
        addl       %edi, %eax 
        adcl       $0, %edx 
        mov        %eax, org_origin__hla_40 
        mov        %edx, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        incl       number_of_sections__hla_97 
        jmp        instruction_assembled__hla_2891

format_coff__hla_3411:
        mov        additional_memory__hla_47, %eax 
        mov        %eax, symbols_stream__hla_95 
        movl       %eax, %ebx 
        addl       $32, %eax 
        cmpl       structures_buffer__hla_87, %eax 
        jae        out_of_memory__hla_593
        mov        %eax, free_additional_memory__hla_53 
        xorl       %eax, %eax 
        mov        %al, (%ebx) 
        mov        %eax, 4(%ebx) 
        mov        %edi, 8(%ebx) 
        mov        $4, %al 
        mov        %eax, 16(%ebx) 
        mov        $96, %al 
        bt         $0, format_flags__hla_94 
        jnc        flat_section_flags_ok__hla_3470
        orl        $-536870912, %eax 

flat_section_flags_ok__hla_3470:
        mov        %eax, 20(%ebx) 
        mov        %ebx, current_section__hla_100 
        movl       $0, number_of_sections__hla_97 
        mov        %edi, org_origin__hla_40 
        movl       $0, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        mov        %ebx, org_symbol__hla_79 
        movb       $2, labels_type__hla_119 
        movb       $32, code_type__hla_118 
        testl      $8, format_flags__hla_94 
        jz         instruction_assembled__hla_2891
        movb       $4, labels_type__hla_119 
        movb       $64, code_type__hla_118 
        jmp        instruction_assembled__hla_2891

coff_section__hla_3423:
        call       close_coff_section__hla_1976
        mov        free_additional_memory__hla_53, %ebx 
        lea        32(%ebx), %eax 
        cmpl       structures_buffer__hla_87, %eax 
        jae        out_of_memory__hla_593
        mov        %eax, free_additional_memory__hla_53 
        mov        %ebx, current_section__hla_100 
        incl       number_of_sections__hla_97 
        xorl       %eax, %eax 
        mov        %al, (%ebx) 
        mov        %edi, 8(%ebx) 
        mov        %edi, org_origin__hla_40 
        movl       $0, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        mov        %ebx, org_symbol__hla_79 
        movb       $2, labels_type__hla_119 
        testl      $8, format_flags__hla_94 
        jz         coff_labels_type_ok__hla_3473
        movb       $4, labels_type__hla_119 

coff_labels_type_ok__hla_3473:
        mov        %eax, 16(%ebx) 
        mov        %eax, 20(%ebx) 
        lodsw
        cmpw       $40, %ax 
        jne        invalid_argument__hla_578
        mov        %esi, 4(%ebx) 
        mov        (%esi), %ecx 
        lea        5(%esi,%ecx,1), %esi 
        cmpl       $8, %ecx 
        ja         name_too_long__hla_590

coff_section_flags__hla_3474:
        cmpb       $28, (%esi) 
        je         coff_section_alignment__hla_3475
        cmpb       $25, (%esi) 
        jne        coff_section_settings_ok__hla_3476
        incl       %esi 
        lodsb
        bt         $0, format_flags__hla_94 
        jc         coff_section_flag_ok__hla_3477
        cmpb       $7, %al 
        ja         invalid_argument__hla_578

coff_section_flag_ok__hla_3477:
        movb       %al, %cl 
        mov        $1, %eax 
        shll       %cl, %eax 
        testl      %eax, 20(%ebx) 
        jnz        setting_already_specified__hla_599
        orl        20(%ebx), %eax 
        mov        %eax, 20(%ebx) 
        andb       $192, %al 
        cmpb       $192, %al 
        je         invalid_argument__hla_578
        jmp        coff_section_flags__hla_3474

coff_section_alignment__hla_3475:
        bt         $0, format_flags__hla_94 
        jnc        invalid_argument__hla_578
        incl       %esi 
        lodsb
        orb        %al, %al 
        jnz        invalid_argument__hla_578
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        pushl      %ebx 
        call       get_dword_value__hla_1547
        popl       %ebx 
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        movl       %eax, %edx 
        decl       %edx 
        testl      %edx, %eax 
        jnz        invalid_value__hla_586
        orl        %eax, %eax 
        jz         invalid_value__hla_586
        cmpl       $8192, %eax 
        ja         invalid_value__hla_586
        bsfl       %eax, %edx 
        incl       %edx 
        shll       $20, %edx 
        orl        %edx, 20(%ebx) 
        xchgl      %eax, 16(%ebx) 
        orl        %eax, %eax 
        jnz        setting_already_specified__hla_599
        jmp        coff_section_flags__hla_3474

coff_section_settings_ok__hla_3476:
        cmpl       $0, 16(%ebx) 
        jne        instruction_assembled__hla_2891
        movl       $4, 16(%ebx) 
        bt         $0, format_flags__hla_94 
        jnc        instruction_assembled__hla_2891
        orl        $3145728, 20(%ebx) 
        jmp        instruction_assembled__hla_2891

pe_section__hla_3422:
        call       close_pe_section__hla_1943
        bts        $5, format_flags__hla_94 
        lea        40(%ebx), %ecx 
        addl       84(%edx), %edx 
        subl       stub_size__hla_98, %edx 
        cmpl       %edx, %ecx 
        jbe        new_section__hla_3478
        lea        -40(%edx), %ebx 
        orb        $-1, next_pass_needed__hla_115 
        pushl      %edi 
        movl       %ebx, %edi 
        mov        $2, %ecx 
        xorl       %eax, %eax 
        rep stosl
        popl       %edi 

new_section__hla_3478:
        mov        %eax, 12(%ebx) 
        lodsw
        cmpw       $40, %ax 
        jne        invalid_argument__hla_578
        lea        4(%esi), %edx 
        mov        (%esi), %ecx 
        lea        5(%esi,%ecx,1), %esi 
        cmpl       $8, %ecx 
        ja         name_too_long__hla_590
        xorl       %eax, %eax 
        mov        %eax, (%ebx) 
        mov        %eax, 4(%ebx) 
        pushl      %esi 
        pushl      %edi 
        movl       %ebx, %edi 
        movl       %edx, %esi 
        rep movsb
        popl       %edi 
        popl       %esi 
        movl       $0, 36(%ebx) 
        mov        %edi, 20(%ebx) 
        mov        code_start__hla_55, %edx 
        movl       %edi, %eax 
        xorl       %ecx, %ecx 
        subl       12(%ebx), %eax 
        sbbl       $0, %ecx 
        testl      $8, format_flags__hla_94 
        jnz        pe64_section_org__hla_3479
        subl       52(%edx), %eax 
        sbbl       $0, %ecx 
        movb       $2, labels_type__hla_119 
        movb       $32, code_type__hla_118 
        jmp        pe_section_org_ok__hla_3480

pe64_section_org__hla_3479:
        subl       48(%edx), %eax 
        sbbl       52(%edx), %ecx 
        movb       $4, labels_type__hla_119 
        movb       $64, code_type__hla_118 

pe_section_org_ok__hla_3480:
        mov        %eax, org_origin__hla_40 
        mov        %ecx, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 

get_section_flags__hla_3481:
        lodsb
        cmpb       $26, %al 
        je         set_directory__hla_3482
        cmpb       $25, %al 
        je         section_flag__hla_3483
        decl       %esi 
        jmp        instruction_assembled__hla_2891

set_directory__hla_3482:
        movzbl     (%esi), %eax 
        incl       %esi 
        movl       %ebx, %ecx 
        testl      $8, format_flags__hla_94 
        jnz        pe64_directory__hla_3484
        xchgl      %ecx, 120(%edx,%eax,8) 
        movl       $-1, 124(%edx,%eax,8) 
        jmp        pe_directory_set__hla_3485

pe64_directory__hla_3484:
        xchgl      %ecx, 136(%edx,%eax,8) 
        movl       $-1, 140(%edx,%eax,8) 

pe_directory_set__hla_3485:
        orl        %ecx, %ecx 
        jnz        data_already_defined__hla_569
        pushl      %ebx 
        pushl      %edx 
        call       generate_pe_data__hla_2040
        popl       %edx 
        popl       %ebx 
        jmp        get_section_flags__hla_3481

section_flag__hla_3483:
        lodsb
        cmpb       $9, %al 
        je         invalid_argument__hla_578
        cmpb       $11, %al 
        je         invalid_argument__hla_578
        movb       %al, %cl 
        mov        $1, %eax 
        shll       %cl, %eax 
        testl      %eax, 36(%ebx) 
        jnz        setting_already_specified__hla_599
        orl        36(%ebx), %eax 
        mov        %eax, 36(%ebx) 
        cmpb       $192, %al 
        jnae       get_section_flags__hla_3481
        andb       $127, %al 
        mov        %al, 36(%ebx) 
        jmp        get_section_flags__hla_3481

data_directive__hla_209:
        cmpb       $3, output_format__hla_117 
        jne        illegal_instruction__hla_574
        lodsb
        cmpb       $26, %al 
        je         predefined_data_type__hla_3486
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        call       get_byte_value__hla_1523
        cmpb       $16, %al 
        jb         data_type_ok__hla_3487
        jmp        invalid_value__hla_586

predefined_data_type__hla_3486:
        movzbl     (%esi), %eax 
        incl       %esi 

data_type_ok__hla_3487:
        mov        current_section__hla_100, %ebx 
        movl       %edi, %ecx 
        subl       20(%ebx), %ecx 
        addl       12(%ebx), %ecx 
        mov        code_start__hla_55, %edx 
        testl      $8, format_flags__hla_94 
        jnz        pe64_data__hla_3488
        xchgl      %ecx, 120(%edx,%eax,8) 
        jmp        init_pe_data__hla_3489

pe64_data__hla_3488:
        xchgl      %ecx, 136(%edx,%eax,8) 

init_pe_data__hla_3489:
        orl        %ecx, %ecx 
        jnz        data_already_defined__hla_569
        call       allocate_structure_data__hla_2008
        mov        data_directive_assembler__hla_378, %ax 
        mov        %ax, (%ebx) 
        mov        %al, 2(%ebx) 
        mov        current_line__hla_60, %edx 
        mov        %edx, 4(%ebx) 
        call       generate_pe_data__hla_2040
        jmp        instruction_assembled__hla_2891

pe_entry__hla_3414:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        testl      $8, format_flags__hla_94 
        jnz        pe64_entry__hla_3490
        call       get_dword_value__hla_1547
        cmpb       $2, value_type__hla_130 
        je         pe_entry_ok__hla_3491
        cmpl       $0, error_line__hla_84 
        jne        pe_entry_ok__hla_3491
        mov        current_line__hla_60, %edx 
        mov        %edx, error_line__hla_84 
        movl       $invalid_address__hla_576, error__hla_85 

pe_entry_ok__hla_3491:
        mov        code_start__hla_55, %edx 
        subl       52(%edx), %eax 
        mov        %eax, 40(%edx) 
        jmp        instruction_assembled__hla_2891

pe64_entry__hla_3490:
        call       get_qword_value__hla_1570
        cmpb       $4, value_type__hla_130 
        je         pe64_entry_type_ok__hla_3492
        cmpl       $0, error_line__hla_84 
        jne        pe64_entry_type_ok__hla_3492
        mov        current_line__hla_60, %edx 
        mov        %edx, error_line__hla_84 
        movl       $invalid_address__hla_576, error__hla_85 

pe64_entry_type_ok__hla_3492:
        mov        code_start__hla_55, %ecx 
        subl       48(%ecx), %eax 
        sbbl       52(%ecx), %edx 
        jz         pe64_entry_range_ok__hla_3493
        mov        current_line__hla_60, %edx 
        mov        %edx, error_line__hla_84 
        movl       $value_out_of_range__hla_607, error__hla_85 

pe64_entry_range_ok__hla_3493:
        mov        %eax, 40(%ecx) 
        jmp        instruction_assembled__hla_2891

pe_stack__hla_3417:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        testl      $8, format_flags__hla_94 
        jnz        pe64_stack__hla_3494
        call       get_dword_value__hla_1547
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        code_start__hla_55, %edx 
        mov        %eax, 96(%edx) 
        cmpb       $44, (%esi) 
        jne        default_stack_commit__hla_3495
        lodsb
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        code_start__hla_55, %edx 
        mov        %eax, 100(%edx) 
        cmpl       96(%edx), %eax 
        ja         value_out_of_range__hla_607
        jmp        instruction_assembled__hla_2891

default_stack_commit__hla_3495:
        movl       $4096, 100(%edx) 
        mov        96(%edx), %eax 
        cmpl       $4096, %eax 
        ja         instruction_assembled__hla_2891
        mov        %eax, 100(%edx) 
        jmp        instruction_assembled__hla_2891

pe64_stack__hla_3494:
        call       get_qword_value__hla_1570
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        code_start__hla_55, %ecx 
        mov        %eax, 96(%ecx) 
        mov        %edx, 100(%ecx) 
        cmpb       $44, (%esi) 
        jne        default_pe64_stack_commit__hla_3496
        lodsb
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_qword_value__hla_1570
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        code_start__hla_55, %ecx 
        mov        %eax, 104(%ecx) 
        mov        %edx, 108(%ecx) 
        cmpl       100(%ecx), %edx 
        ja         value_out_of_range__hla_607
        jb         instruction_assembled__hla_2891
        cmpl       96(%edx), %eax 
        ja         value_out_of_range__hla_607
        jmp        instruction_assembled__hla_2891

default_pe64_stack_commit__hla_3496:
        movl       $4096, 104(%edx) 
        cmpl       $0, 100(%edx) 
        jne        instruction_assembled__hla_2891
        mov        96(%edx), %eax 
        cmpl       $4096, %eax 
        ja         instruction_assembled__hla_2891
        mov        %eax, 104(%edx) 
        jmp        instruction_assembled__hla_2891

pe_heap__hla_3419:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        testl      $8, format_flags__hla_94 
        jnz        pe64_heap__hla_3497
        call       get_dword_value__hla_1547
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        code_start__hla_55, %edx 
        mov        %eax, 104(%edx) 
        cmpb       $44, (%esi) 
        jne        instruction_assembled__hla_2891
        lodsb
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_dword_value__hla_1547
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        code_start__hla_55, %edx 
        mov        %eax, 108(%edx) 
        cmpl       104(%edx), %eax 
        ja         value_out_of_range__hla_607
        jmp        instruction_assembled__hla_2891

pe64_heap__hla_3497:
        call       get_qword_value__hla_1570
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        code_start__hla_55, %ecx 
        mov        %eax, 112(%ecx) 
        mov        %edx, 116(%ecx) 
        cmpb       $44, (%esi) 
        jne        instruction_assembled__hla_2891
        lodsb
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        call       get_qword_value__hla_1570
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        code_start__hla_55, %ecx 
        mov        %eax, 120(%ecx) 
        mov        %edx, 124(%ecx) 
        cmpl       116(%ecx), %edx 
        ja         value_out_of_range__hla_607
        jb         instruction_assembled__hla_2891
        cmpl       112(%edx), %eax 
        ja         value_out_of_range__hla_607
        jmp        instruction_assembled__hla_2891

mz_segment__hla_3420:
        lodsb
        cmpb       $2, %al 
        jne        invalid_argument__hla_578
        lodsl
        cmpl       $15, %eax 
        jb         invalid_use_of_symbol__hla_585
        je         reserved_word_used_as_symbol__hla_597
        incl       %esi 
        movl       %eax, %ebx 
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        mov        $15, %ecx 
        addl       $15, %eax 
        andl       $15, %eax 
        subl       %eax, %ecx 
        movl       %edi, %edx 
        xorb       %al, %al 
        rep stosb
        mov        %edi, org_origin__hla_40 
        movl       $0, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        movl       %edx, %eax 
        call       undefined_data__hla_2030
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        shrl       $4, %eax 
        cmpl       $65536, %eax 
        jae        value_out_of_range__hla_607
        movl       %eax, %edx 
        mov        $16, %al 
        cmpb       $19, (%esi) 
        jne        segment_type_ok__hla_3498
        incl       %esi 
        lodsb

segment_type_ok__hla_3498:
        mov        %al, code_type__hla_118 
        movl       %edx, %eax 
        mov        $256, %cx 
        xorl       %edx, %edx 
        xorl       %ebp, %ebp 
        mov        %edx, address_symbol__hla_92 
        jmp        make_free_label__hla_2895

mz_entry__hla_3413:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        call       get_word_value__hla_1535
        cmpb       $1, value_type__hla_130 
        je         initial_cs_ok__hla_3499
        cmpl       $0, error_line__hla_84 
        jne        initial_cs_ok__hla_3499
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_address__hla_576, error__hla_85 

initial_cs_ok__hla_3499:
        mov        additional_memory__hla_47, %edx 
        mov        %ax, 22(%edx) 
        lodsb
        cmpb       $58, %al 
        jne        invalid_argument__hla_578
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        ja         invalid_address__hla_576
        call       get_word_value__hla_1535
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        additional_memory__hla_47, %edx 
        mov        %ax, 20(%edx) 
        jmp        instruction_assembled__hla_2891

mz_stack__hla_3416:
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        call       get_word_value__hla_1535
        cmpb       $58, (%esi) 
        je         stack_pointer__hla_3500
        cmpw       $16, %ax 
        jb         invalid_value__hla_586
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        additional_memory__hla_47, %edx 
        mov        %ax, 16(%edx) 
        jmp        instruction_assembled__hla_2891

stack_pointer__hla_3500:
        cmpb       $1, value_type__hla_130 
        je         initial_ss_ok__hla_3501
        cmpl       $0, error_line__hla_84 
        jne        initial_ss_ok__hla_3501
        mov        current_line__hla_60, %eax 
        mov        %eax, error_line__hla_84 
        movl       $invalid_address__hla_576, error__hla_85 

initial_ss_ok__hla_3501:
        mov        additional_memory__hla_47, %edx 
        mov        %ax, 14(%edx) 
        lodsb
        cmpb       $58, %al 
        jne        invalid_argument__hla_578
        lodsb
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        call       get_word_value__hla_1535
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        additional_memory__hla_47, %edx 
        mov        %ax, 16(%edx) 
        bts        $4, format_flags__hla_94 
        jmp        instruction_assembled__hla_2891

mz_heap__hla_3418:
        cmpb       $2, output_format__hla_117 
        jne        illegal_instruction__hla_574
        lodsb
        call       get_size_operator__hla_1591
        cmpb       $1, %ah 
        je         invalid_value__hla_586
        cmpb       $2, %ah 
        ja         invalid_value__hla_586
        cmpb       $40, %al 
        jne        invalid_argument__hla_578
        call       get_word_value__hla_1535
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        mov        additional_memory__hla_47, %edx 
        mov        %ax, 12(%edx) 
        jmp        instruction_assembled__hla_2891

format_pe__hla_3410:
        xorl       %edx, %edx 
        movw       $332, machine__hla_112 
        movw       $3, subsystem__hla_113 
        movl       $655363, subsystem_version__hla_101 
        movl       $4194304, image_base__hla_102 
        testl      $8, format_flags__hla_94 
        jz         pe_settings__hla_3502
        movw       $34404, machine__hla_112 
        movl       $5, subsystem_version__hla_101 
        movl       $0, image_base_high__hla_103 

pe_settings__hla_3502:
        cmpb       $132, (%esi) 
        je         get_stub_name__hla_3503
        cmpb       $128, (%esi) 
        je         get_pe_base__hla_3504
        cmpb       $27, (%esi) 
        jne        pe_settings_ok__hla_3505
        lodsb
        lodsb
        testb      $192, %al 
        jz         subsystem_setting__hla_3506
        cmpb       $128, %al 
        je         dll_flag__hla_3507
        cmpb       $129, %al 
        je         wdm_flag__hla_3508
        jmp        pe_settings__hla_3502

dll_flag__hla_3507:
        bts        $8, format_flags__hla_94 
        jc         setting_already_specified__hla_599
        jmp        pe_settings__hla_3502

wdm_flag__hla_3508:
        bts        $9, format_flags__hla_94 
        jc         setting_already_specified__hla_599
        jmp        pe_settings__hla_3502

subsystem_setting__hla_3506:
        bts        $7, format_flags__hla_94 
        jc         setting_already_specified__hla_599
        andw       $63, %ax 
        mov        %ax, subsystem__hla_113 
        cmpb       $40, (%esi) 
        jne        pe_settings__hla_3502
        incl       %esi 
        cmpb       $46, (%esi) 
        jne        invalid_value__hla_586
        incl       %esi 
        pushl      %edx 
        cmpb       $0, 11(%esi) 
        jne        invalid_value__hla_586
        cmpb       $2, 10(%esi) 
        ja         invalid_value__hla_586
        mov        8(%esi), %dx 
        cmpw       $32768, %dx 
        je         zero_version__hla_3509
        mov        4(%esi), %eax 
        cmpw       $7, %dx 
        jg         invalid_value__hla_586
        mov        $7, %cx 
        subw       %dx, %cx 
        mov        4(%esi), %eax 
        shrl       %cl, %eax 
        movl       %eax, %ebx 
        shrl       $24, %ebx 
        cmpb       $100, %bl 
        jae        invalid_value__hla_586
        andl       $16777215, %eax 
        mov        $100, %ecx 
        mull       %ecx 
        shrd       $24, %edx, %eax 
        jnc        version_value_ok__hla_3510
        incl       %eax 

version_value_ok__hla_3510:
        shll       $16, %eax 
        movw       %bx, %ax 
        jmp        subsystem_version_ok__hla_3511

zero_version__hla_3509:
        xorl       %eax, %eax 

subsystem_version_ok__hla_3511:
        popl       %edx 
        addl       $13, %esi 
        mov        %eax, subsystem_version__hla_101 
        jmp        pe_settings__hla_3502

get_pe_base__hla_3504:
        bts        $10, format_flags__hla_94 
        jc         setting_already_specified__hla_599
        lodsw
        cmpb       $40, %ah 
        jne        invalid_argument__hla_578
        cmpb       $46, (%esi) 
        je         invalid_value__hla_586
        pushl      %edx 
        pushl      %edi 
        addl       stub_size__hla_98, %edi 
        testl      $8, format_flags__hla_94 
        jnz        get_pe64_base__hla_3512
        call       get_dword_value__hla_1547
        mov        %eax, image_base__hla_102 
        jmp        pe_base_ok__hla_3513

get_pe64_base__hla_3512:
        call       get_qword_value__hla_1570
        mov        %eax, image_base__hla_102 
        mov        %edx, image_base_high__hla_103 

pe_base_ok__hla_3513:
        popl       %edi 
        popl       %edx 
        cmpb       $0, value_type__hla_130 
        jne        invalid_use_of_symbol__hla_585
        cmpb       $132, (%esi) 
        jne        pe_settings_ok__hla_3505

get_stub_name__hla_3503:
        lodsb
        lodsw
        cmpw       $40, %ax 
        jne        invalid_argument__hla_578
        lodsl
        movl       %esi, %edx 
        addl       %eax, %esi 
        incl       %esi 

pe_settings_ok__hla_3505:
        mov        stub_size__hla_98, %ebp 
        orl        %ebp, %ebp 
        jz         make_pe_stub__hla_3514
        cmpl       stub_file__hla_99, %edx 
        je         pe_stub_ok__hla_3515
        subl       stub_size__hla_98, %edi 
        mov        %edi, code_start__hla_55 

make_pe_stub__hla_3514:
        call       make_stub__hla_2654
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        mov        %eax, stub_size__hla_98 
        mov        %edi, code_start__hla_55 
        movl       %eax, %ebp 

pe_stub_ok__hla_3515:
        movl       %edi, %edx 
        mov        $248, %ecx 
        testl      $8, format_flags__hla_94 
        jz         zero_pe_header__hla_3516
        addl       $16, %ecx 

zero_pe_header__hla_3516:
        addl       %ecx, %ebp 
        shrl       $2, %ecx 
        xorl       %eax, %eax 
        rep stosl
        movw       $17744, (%edx) 
        mov        machine__hla_112, %ax 
        mov        %ax, 4(%edx) 
        movl       $4096, 56(%edx) 
        movl       $512, 60(%edx) 
        movw       $1, 64(%edx) 
        mov        subsystem_version__hla_101, %eax 
        mov        %eax, 72(%edx) 
        mov        subsystem__hla_113, %ax 
        mov        %ax, 92(%edx) 
        cmpw       $1, %ax 
        jne        pe_alignment_ok__hla_3519
        mov        $32, %eax 
        mov        %eax, 56(%edx) 
        mov        %eax, 60(%edx) 

pe_alignment_ok__hla_3519:
        movw       $16897, 26(%edx) 
        testl      $8, format_flags__hla_94 
        jnz        init_pe64_specific__hla_3520
        movl       $224, 20(%edx) 
        movl       $17498382, 22(%edx) 
        mov        image_base__hla_102, %eax 
        mov        %eax, 52(%edx) 
        movl       $4096, 96(%edx) 
        movl       $4096, 100(%edx) 
        movl       $65536, 104(%edx) 
        movl       $0, 108(%edx) 
        movl       $16, 116(%edx) 
        jmp        pe_header_ok__hla_3521

init_pe64_specific__hla_3520:
        movl       $240, 20(%edx) 
        movl       $34275374, 22(%edx) 
        mov        image_base__hla_102, %eax 
        mov        %eax, 48(%edx) 
        mov        image_base_high__hla_103, %eax 
        mov        %eax, 52(%edx) 
        movl       $4096, 96(%edx) 
        movl       $4096, 104(%edx) 
        movl       $65536, 112(%edx) 
        movl       $0, 120(%edx) 
        movl       $16, 132(%edx) 

pe_header_ok__hla_3521:
        bsf        60(%edx), %ecx 
        imul       $40, number_of_sections__hla_97, %ebx 
        orl        %ebx, %ebx 
        jnz        reserve_space_for_section_headers__hla_3522
        mov        $40, %ebx 

reserve_space_for_section_headers__hla_3522:
        addl       %ebp, %ebx 
        decl       %ebx 
        shrl       %cl, %ebx 
        incl       %ebx 
        shll       %cl, %ebx 
        subl       %ebp, %ebx 
        movl       %ebx, %ecx 
        mov        display_buffer__hla_86, %eax 
        subl       %ecx, %eax 
        cmpl       %eax, %edi 
        jae        out_of_memory__hla_593
        shrl       $2, %ecx 
        xorl       %eax, %eax 
        rep stosl
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        addl       stub_size__hla_98, %eax 
        mov        %eax, 84(%edx) 
        mov        56(%edx), %ecx 
        decl       %ecx 
        addl       %ecx, %eax 
        notl       %ecx 
        andl       %ecx, %eax 
        bt         $8, format_flags__hla_94 
        jc         pe_entry_init_ok__hla_3525
        mov        %eax, 40(%edx) 

pe_entry_init_ok__hla_3525:
        movl       $0, number_of_sections__hla_97 
        movzwl     20(%edx), %ebx 
        lea        24(%edx,%ebx,1), %ebx 
        mov        %ebx, current_section__hla_100 
        movl       $1634493998, (%ebx) 
        movl       $116, 4(%ebx) 
        mov        %edi, 20(%ebx) 
        mov        %eax, 12(%ebx) 
        movl       $-536870816, 36(%ebx) 
        xorl       %ecx, %ecx 
        notl       %eax 
        notl       %ecx 
        addl       $1, %eax 
        adcl       $0, %ecx 
        addl       %edi, %eax 
        adcl       $0, %ecx 
        testl      $8, format_flags__hla_94 
        jnz        pe64_org__hla_3528
        subl       52(%edx), %eax 
        sbbl       $0, %ecx 
        movb       $2, labels_type__hla_119 
        movb       $32, code_type__hla_118 
        jmp        pe_org_ok__hla_3529

pe64_org__hla_3528:
        subl       48(%edx), %eax 
        sbbl       52(%edx), %ecx 
        movb       $4, labels_type__hla_119 
        movb       $64, code_type__hla_118 

pe_org_ok__hla_3529:
        mov        %eax, org_origin__hla_40 
        mov        %ecx, org_origin__hla_40+4 
        movl       $0, org_registers__hla_77 
        mov        %edi, org_start__hla_78 
        bt         $8, format_flags__hla_94 
        jnc        dll_flag_ok__hla_3530
        orl        $8192, 22(%edx) 

dll_flag_ok__hla_3530:
        bt         $9, format_flags__hla_94 
        jnc        wdm_flag_ok__hla_3531
        orw        $8192, 94(%edx) 

wdm_flag_ok__hla_3531:
        jmp        instruction_assembled__hla_2891
xassemble_line:

/* procedure _0dcd__p____hla_3537 */

_0dcd__p____hla_3537:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "write_code"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0dcd__p____hla_3537:

/* procedure write_code__hla_3539 */

write_code__hla_3539:
        mov        written_size__hla_58, %eax 
        mov        %eax, headers_size__hla_59 
        mov        code_start__hla_55, %edx 
        mov        code_size__hla_56, %ecx 
        addl       %ecx, written_size__hla_58 
        call       write__hla_436
        ret
xwrite_code__hla_3539:

/* procedure _0dd5__p____hla_3545 */

_0dd5__p____hla_3545:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_symbol_name"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0dd5__p____hla_3545:

/* procedure store_symbol_name__hla_3547 */

store_symbol_name__hla_3547:
        pushl      %esi 
        mov        4(%esi), %esi 
        orl        %esi, %esi 
        jz         default_name__hla_3548
        lodsl
        movl       %eax, %ecx 
        cmpl       $8, %ecx 
        ja         add_string__hla_3549
        pushl      %edi 
        movl       %ebx, %edi 
        rep movsb
        popl       %edi 
        popl       %esi 
        ret

default_name__hla_3548:
        movl       $1634493998, (%ebx) 
        movl       $116, 4(%ebx) 
        popl       %esi 
        ret

add_string__hla_3549:
        movl       %edi, %eax 
        subl       %edx, %eax 
        mov        %eax, 4(%ebx) 
        incl       %ecx 
        rep movsb
        popl       %esi 
        ret
xstore_symbol_name__hla_3547:

/* procedure _0de1__p____hla_3557 */

_0de1__p____hla_3557:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_section_index"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0de1__p____hla_3557:

/* procedure store_section_index__hla_3559 */

store_section_index__hla_3559:
        incl       %ecx 
        movl       %ecx, %eax 
        shll       $8, %eax 
        mov        %eax, (%ebx) 
        incw       %dx 
        jz         format_limitations_exceeded__hla_573
        movl       %edx, %eax 
        shll       $16, %eax 
        mov        $3, %al 
        testb      $64, 20(%ebx) 
        jz         section_index_ok__hla_3560
        orb        $-1, %ah 
        incw       %dx 
        jz         format_limitations_exceeded__hla_573

section_index_ok__hla_3560:
        stosl
        ret
xstore_section_index__hla_3559:

/* procedure _0dea__p____hla_3566 */

_0dea__p____hla_3566:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "get_public_value"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0dea__p____hla_3566:

/* procedure get_public_value__hla_3568 */

get_public_value__hla_3568:
        mov        (%ebx), %eax 
        cmpl       $0, 4(%ebx) 
        je         public_value_ok__hla_3569
        cmpl       $-1, 4(%ebx) 
        jne        value_out_of_range__hla_607
        bt         $31, %eax 
        jnc        value_out_of_range__hla_607

public_value_ok__hla_3569:
        ret
xget_public_value__hla_3568:

/* procedure _0df3__p____hla_3575 */

_0df3__p____hla_3575:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "store_elf_machine_word"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0df3__p____hla_3575:

/* procedure store_elf_machine_word__hla_3577 */

store_elf_machine_word__hla_3577:
        stosl
        testl      $8, format_flags__hla_94 
        jz         elf_machine_word_ok__hla_3578
        movl       $0, (%edi) 
        addl       $4, %edi 

elf_machine_word_ok__hla_3578:
        ret
xstore_elf_machine_word__hla_3577:

/* procedure _0dfc__p____hla_3584 */

_0dfc__p____hla_3584:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "formatter"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0dfc__p____hla_3584:

/* procedure formatter__hla_3586 */

formatter__hla_3586:
        cmpl       $0, output_file__hla_51 
        jne        output_path_ok__hla_3587
        pushl      %edi 
        mov        input_file__hla_50, %esi 
        mov        free_additional_memory__hla_53, %edi 

copy_output_path__hla_3588:
        lodsb
        cmpl       structures_buffer__hla_87, %edi 
        jae        out_of_memory__hla_593
        stosb
        orb        %al, %al 
        jnz        copy_output_path__hla_3588
        decl       %edi 
        movl       %edi, %eax 

find_extension__hla_3591:
        decl       %eax 
        cmpl       free_additional_memory__hla_53, %eax 
        jb         extension_found__hla_3592
        cmpb       $92, (%eax) 
        je         extension_found__hla_3592
        cmpb       $47, (%eax) 
        je         extension_found__hla_3592
        cmpb       $46, (%eax) 
        jne        find_extension__hla_3591
        movl       %eax, %edi 

extension_found__hla_3592:
        lea        9(%edi), %eax 
        cmpl       structures_buffer__hla_87, %eax 
        jae        out_of_memory__hla_593
        cmpb       $2, output_format__hla_117 
        je         exe_extension__hla_3595
        jb         bin_extension__hla_3596
        cmpb       $4, output_format__hla_117 
        je         obj_extension__hla_3597
        cmpb       $5, output_format__hla_117 
        je         o_extension__hla_3598
        cmpb       $3, output_format__hla_117 
        jne        no_extension__hla_3599
        cmpw       $1, subsystem__hla_113 
        je         sys_extension__hla_3600
        bt         $8, format_flags__hla_94 
        jnc        exe_extension__hla_3595
        mov        $1819042862, %eax 
        jmp        make_extension__hla_3603

sys_extension__hla_3600:
        mov        $1937339182, %eax 
        jmp        make_extension__hla_3603

bin_extension__hla_3596:
        mov        $1852400174, %eax 
        bt         $0, format_flags__hla_94 
        jnc        make_extension__hla_3603
        mov        $1836016430, %eax 
        jmp        make_extension__hla_3603

obj_extension__hla_3597:
        mov        $1784835886, %eax 
        jmp        make_extension__hla_3603

o_extension__hla_3598:
        mov        $28462, %eax 
        bt         $0, format_flags__hla_94 
        jnc        make_extension__hla_3603

no_extension__hla_3599:
        xorl       %eax, %eax 
        jmp        make_extension__hla_3603

exe_extension__hla_3595:
        mov        $1702389038, %eax 

make_extension__hla_3603:
        xchgl      %eax, (%edi) 
        scasl
        movb       $0, (%edi) 
        scasb
        movl       %edi, %esi 
        stosl
        subl       $9, %edi 
        xorl       %eax, %eax 
        movl       $characters__hla_159, %ebx 

adapt_case__hla_3616:
        mov        (%esi), %al 
        orb        %al, %al 
        jz         adapt_next__hla_3617
        xlat
        cmpb       (%esi), %al 
        je         adapt_ok__hla_3618
        subb       $32, (%edi) 

adapt_ok__hla_3618:
        incl       %esi 

adapt_next__hla_3617:
        incl       %edi 
        cmpb       $0, (%edi) 
        jne        adapt_case__hla_3616
        movl       %edi, %esi 
        lea        1(%esi), %ecx 
        subl       free_additional_memory__hla_53, %ecx 
        mov        structures_buffer__hla_87, %edi 
        decl       %edi 
        std
        rep movsb
        cld
        incl       %edi 
        mov        %edi, structures_buffer__hla_87 
        mov        %edi, output_file__hla_51 
        popl       %edi 

output_path_ok__hla_3587:
        cmpb       $4, output_format__hla_117 
        je         coff_formatter__hla_3619
        cmpb       $5, output_format__hla_117 
        jne        common_formatter__hla_3620
        bt         $0, format_flags__hla_94 
        jnc        elf_formatter__hla_3621

common_formatter__hla_3620:
        movl       %edi, %eax 
        subl       code_start__hla_55, %eax 
        mov        %eax, real_code_size__hla_57 
        cmpl       undefined_data_end__hla_81, %edi 
        jne        calculate_code_size__hla_3622
        mov        undefined_data_start__hla_80, %edi 

calculate_code_size__hla_3622:
        subl       code_start__hla_55, %edi 
        mov        %edi, code_size__hla_56 
        movl       $0, written_size__hla_58 
        mov        output_file__hla_51, %edx 
        call       create__hla_426
        jc         write_failed__hla_608
        cmpb       $3, output_format__hla_117 
        jne        stub_written__hla_3623
        mov        code_start__hla_55, %edx 
        mov        stub_size__hla_98, %ecx 
        subl       %ecx, %edx 
        addl       %ecx, written_size__hla_58 
        call       write__hla_436

stub_written__hla_3623:
        cmpb       $2, output_format__hla_117 
        jne        write_output__hla_3624
        call       write_mz_header__hla_2153

write_output__hla_3624:
        call       write_code__hla_3539

output_written__hla_3625:
        call       close__hla_456
        ret

coff_formatter__hla_3619:
        subl       code_start__hla_55, %edi 
        mov        %edi, code_size__hla_56 
        call       prepare_default_section__hla_3626
        mov        free_additional_memory__hla_53, %edi 
        movl       %edi, %ebx 
        mov        $10, %ecx 
        imull      number_of_sections__hla_97, %ecx 
        addl       $5, %ecx 
        lea        (%edi,%ecx,4), %eax 
        cmpl       structures_buffer__hla_87, %eax 
        jae        out_of_memory__hla_593
        xorl       %eax, %eax 
        rep stosl
        movw       $332, (%ebx) 
        testl      $8, format_flags__hla_94 
        jz         coff_magic_ok__hla_3629
        movw       $34404, (%ebx) 

coff_magic_ok__hla_3629:
        movw       $260, 18(%ebx) 
        bt         $0, format_flags__hla_94 
        jnc        coff_flags_ok__hla_3630
        orb        $128, 18(%ebx) 

coff_flags_ok__hla_3630:
        pushl      %ebx 
        call       make_timestamp__hla_546
        popl       %ebx 
        mov        %eax, 4(%ebx) 
        mov        number_of_sections__hla_97, %eax 
        mov        %ax, 2(%ebx) 
        mov        symbols_stream__hla_95, %esi 
        xorl       %eax, %eax 
        xorl       %ecx, %ecx 

enumerate_symbols__hla_3631:
        cmpl       free_additional_memory__hla_53, %esi 
        je         symbols_enumerated__hla_3632
        mov        (%esi), %dl 
        orb        %dl, %dl 
        jz         enumerate_section__hla_3633
        cmpb       $128, %dl 
        je         enumerate_public__hla_3634
        ja         enumerate_extrn__hla_3635
        addl       $12, %esi 
        jmp        enumerate_symbols__hla_3631

enumerate_section__hla_3633:
        movl       %eax, %edx 
        shll       $8, %edx 
        mov        %edx, (%esi) 
        incl       %eax 
        incl       %ecx 
        mov        %cx, 30(%esi) 
        addl       $32, %esi 
        jmp        enumerate_symbols__hla_3631

enumerate_public__hla_3634:
        movl       %eax, %edx 
        shll       $8, %edx 
        mov        $128, %dl 
        mov        %edx, (%esi) 
        mov        8(%esi), %edx 
        addl       $16, %esi 
        incl       %eax 
        cmpb       $2, 11(%edx) 
        jne        enumerate_symbols__hla_3631
        mov        20(%edx), %edx 
        cmpb       $129, (%edx) 
        jne        enumerate_symbols__hla_3631
        incl       %eax 
        jmp        enumerate_symbols__hla_3631

enumerate_extrn__hla_3635:
        movl       %eax, %edx 
        shll       $8, %edx 
        mov        $129, %dl 
        mov        %edx, (%esi) 
        addl       $12, %esi 
        incl       %eax 
        jmp        enumerate_symbols__hla_3631

prepare_default_section__hla_3626:
        mov        symbols_stream__hla_95, %ebx 
        cmpl       $0, 12(%ebx) 
        jne        default_section_ok__hla_3636
        cmpl       $0, number_of_sections__hla_97 
        je         default_section_ok__hla_3636
        movl       %ebx, %edx 

find_references_to_default_section__hla_3637:
        cmpl       free_additional_memory__hla_53, %ebx 
        jne        check_reference__hla_3638
        addl       $32, symbols_stream__hla_95 
        ret

check_reference__hla_3638:
        mov        (%ebx), %al 
        orb        %al, %al 
        jz         skip_other_section__hla_3639
        cmpb       $128, %al 
        je         check_public_reference__hla_3640
        ja         next_reference__hla_3641
        cmpl       8(%ebx), %edx 
        je         default_section_ok__hla_3636

next_reference__hla_3641:
        addl       $12, %ebx 
        jmp        find_references_to_default_section__hla_3637

check_public_reference__hla_3640:
        mov        8(%ebx), %eax 
        addl       $16, %ebx 
        testb      $1, 8(%eax) 
        jz         find_references_to_default_section__hla_3637
        mov        current_pass__hla_111, %cx 
        cmpw       16(%eax), %cx 
        jne        find_references_to_default_section__hla_3637
        cmpl       20(%eax), %edx 
        je         default_section_ok__hla_3636
        jmp        find_references_to_default_section__hla_3637

skip_other_section__hla_3639:
        addl       $32, %ebx 
        jmp        find_references_to_default_section__hla_3637

default_section_ok__hla_3636:
        incl       number_of_sections__hla_97 
        ret

symbols_enumerated__hla_3632:
        mov        %eax, 12(%ebx) 
        movl       %edi, %ebp 
        subl       %ebx, %ebp 
        pushl      %ebp 
        lea        20(%ebx), %edi 
        mov        symbols_stream__hla_95, %esi 

find_section__hla_3642:
        cmpl       free_additional_memory__hla_53, %esi 
        je         sections_finished__hla_3643
        mov        (%esi), %al 
        orb        %al, %al 
        jz         section_found__hla_3644
        addl       $12, %esi 
        cmpb       $128, %al 
        jne        find_section__hla_3642
        addl       $4, %esi 
        jmp        find_section__hla_3642

section_found__hla_3644:
        pushl      %esi 
        pushl      %edi 
        mov        4(%esi), %esi 
        cmpl       $0, %esi 
        je         false__hla_3645
        mov        (%esi), %ecx 
        addl       $4, %esi 
        rep movsb
        jmp        endif__hla_3645
false__hla_3645:
        mov        $46, %al 
        stosb
        mov        $1952541798, %eax 
        stosl
endif__hla_3645:

section_name_ok__hla_3648:
        popl       %edi 
        popl       %esi 
        mov        12(%esi), %eax 
        mov        %eax, 16(%edi) 
        mov        20(%esi), %eax 
        mov        %eax, 36(%edi) 
        testb      $128, %al 
        jnz        false__hla_3649
        mov        8(%esi), %eax 
        subl       code_start__hla_55, %eax 
        addl       %ebp, %eax 
        mov        %eax, 20(%edi) 
false__hla_3649:
        mov        code_start__hla_55, %ebx 
        mov        code_size__hla_56, %edx 
        addl       %edx, %ebx 
        addl       %ebp, %edx 
        xorl       %ecx, %ecx 
        addl       $32, %esi 

find_relocations__hla_3650:
        cmpl       free_additional_memory__hla_53, %esi 
        je         section_relocations_done__hla_3651
        mov        (%esi), %al 
        orb        %al, %al 
        jz         section_relocations_done__hla_3651
        cmpb       $128, %al 
        jb         add_relocation__hla_3652
        ja         next_relocation__hla_3653
        addl       $16, %esi 
        jmp        find_relocations__hla_3650

add_relocation__hla_3652:
        lea        10(%ebx), %eax 
        cmpl       display_buffer__hla_86, %eax 
        ja         out_of_memory__hla_593
        mov        4(%esi), %eax 
        mov        %eax, (%ebx) 
        mov        8(%esi), %eax 
        mov        (%eax), %eax 
        shrl       $8, %eax 
        mov        %eax, 4(%ebx) 
        movzbw     (%esi), %ax 
        mov        %ax, 8(%ebx) 
        addl       $10, %ebx 
        incl       %ecx 

next_relocation__hla_3653:
        addl       $12, %esi 
        jmp        find_relocations__hla_3650

section_relocations_done__hla_3651:
        cmpl       $65536, %ecx 
        jb         section_relocations_count_16bit__hla_3656
        bt         $0, format_flags__hla_94 
        jnc        format_limitations_exceeded__hla_573
        movw       $65535, 32(%edi) 
        orl        $16777216, 36(%edi) 
        mov        %edx, 24(%edi) 
        pushl      %esi 
        pushl      %edi 
        pushl      %ecx 
        lea        -1(%ebx), %esi 
        addl       $10, %ebx 
        lea        -1(%ebx), %edi 
        imul       $10, %ecx, %ecx 
        std
        rep movsb
        cld
        popl       %ecx 
        incl       %esi 
        incl       %ecx 
        mov        %ecx, (%esi) 
        xorl       %eax, %eax 
        mov        %eax, 4(%esi) 
        mov        %ax, 8(%esi) 
        popl       %edi 
        popl       %esi 
        jmp        section_relocations_ok__hla_3657

section_relocations_count_16bit__hla_3656:
        mov        %cx, 32(%edi) 
        jcxz       section_relocations_ok__hla_3657
        mov        %edx, 24(%edi) 

section_relocations_ok__hla_3657:
        subl       code_start__hla_55, %ebx 
        mov        %ebx, code_size__hla_56 
        addl       $40, %edi 
        jmp        find_section__hla_3642

sections_finished__hla_3643:
        mov        free_additional_memory__hla_53, %edx 
        mov        code_size__hla_56, %ebx 
        addl       %ebx, %ebp 
        mov        %ebp, 8(%edx) 
        addl       code_start__hla_55, %ebx 
        movl       %ebx, %edi 
        mov        12(%edx), %ecx 
        imul       $9, %ecx, %ecx 
        xorl       %eax, %eax 
        shrl       $1, %ecx 
        jnc        zero_symbols_table__hla_3658
        stosw

zero_symbols_table__hla_3658:
        rep stosl
        movl       %edi, %edx 
        stosl
        mov        symbols_stream__hla_95, %esi 

make_symbols_table__hla_3659:
        cmpl       free_additional_memory__hla_53, %esi 
        je         symbols_table_ok__hla_3660
        mov        (%esi), %al 
        cmpb       $128, %al 
        je         add_public_symbol__hla_3661
        ja         add_extrn_symbol__hla_3662
        orb        %al, %al 
        jz         add_section_symbol__hla_3663
        addl       $12, %esi 
        jmp        make_symbols_table__hla_3659

add_section_symbol__hla_3663:
        call       store_symbol_name__hla_3547
        movzwl     30(%esi), %eax 
        mov        %ax, 12(%ebx) 
        movb       $3, 16(%ebx) 
        addl       $32, %esi 
        addl       $18, %ebx 
        jmp        make_symbols_table__hla_3659

add_extrn_symbol__hla_3662:
        call       store_symbol_name__hla_3547
        movb       $2, 16(%ebx) 
        addl       $12, %esi 
        addl       $18, %ebx 
        jmp        make_symbols_table__hla_3659

add_public_symbol__hla_3661:
        call       store_symbol_name__hla_3547
        mov        12(%esi), %eax 
        mov        %eax, current_line__hla_60 
        mov        8(%esi), %eax 
        testb      $1, 8(%eax) 
        jz         undefined_symbol__hla_603
        mov        current_pass__hla_111, %cx 
        cmpw       16(%eax), %cx 
        jne        undefined_symbol__hla_603
        mov        11(%eax), %cl 
        orb        %cl, %cl 
        jz         public_constant__hla_3664
        testl      $8, format_flags__hla_94 
        jnz        check_64bit_public_symbol__hla_3665
        cmpb       $2, %cl 
        je         public_symbol_type_ok__hla_3666
        jmp        invalid_use_of_symbol__hla_585

check_64bit_public_symbol__hla_3665:
        cmpb       $4, %cl 
        jne        invalid_use_of_symbol__hla_585

public_symbol_type_ok__hla_3666:
        mov        20(%eax), %ecx 
        cmpb       $129, (%ecx) 
        je         alias_symbol__hla_3667
        cmpb       $0, (%ecx) 
        jne        invalid_use_of_symbol__hla_585
        mov        30(%ecx), %cx 
        mov        %cx, 12(%ebx) 

public_symbol_section_ok__hla_3668:
        cmpl       $0, 4(%eax) 
        je         store_public_symbol__hla_3669
        cmpl       $-1, 4(%eax) 
        jne        value_out_of_range__hla_607
        bt         $31, (%eax) 
        jnc        value_out_of_range__hla_607

store_public_symbol__hla_3669:
        mov        (%eax), %eax 
        mov        %eax, 8(%ebx) 
        movb       $2, 16(%ebx) 
        addl       $16, %esi 
        addl       $18, %ebx 
        jmp        make_symbols_table__hla_3659

alias_symbol__hla_3667:
        bt         $0, format_flags__hla_94 
        jnc        invalid_use_of_symbol__hla_585
        mov        (%eax), %ecx 
        orl        4(%eax), %ecx 
        jnz        invalid_use_of_symbol__hla_585
        movb       $105, 16(%ebx) 
        movb       $1, 17(%ebx) 
        addl       $18, %ebx 
        mov        20(%eax), %ecx 
        mov        (%ecx), %ecx 
        shrl       $8, %ecx 
        mov        %ecx, (%ebx) 
        movb       $3, 4(%ebx) 
        addl       $16, %esi 
        addl       $18, %ebx 
        jmp        make_symbols_table__hla_3659

public_constant__hla_3664:
        movw       $65535, 12(%ebx) 
        jmp        public_symbol_section_ok__hla_3668

symbols_table_ok__hla_3660:
        movl       %edi, %eax 
        subl       %edx, %eax 
        mov        %eax, (%edx) 
        subl       code_start__hla_55, %edi 
        mov        %edi, code_size__hla_56 
        movl       $0, written_size__hla_58 
        mov        output_file__hla_51, %edx 
        call       create__hla_426
        jc         write_failed__hla_608
        mov        free_additional_memory__hla_53, %edx 
        popl       %ecx 
        addl       %ecx, written_size__hla_58 
        call       write__hla_436
        jc         write_failed__hla_608
        jmp        write_output__hla_3624

elf_formatter__hla_3621:
        pushl      %edi 
        call       prepare_default_section__hla_3626
        mov        symbols_stream__hla_95, %esi 
        mov        free_additional_memory__hla_53, %edi 
        xorl       %eax, %eax 
        mov        $4, %ecx 
        rep stosl
        testl      $8, format_flags__hla_94 
        jz         find_first_section__hla_3670
        mov        $2, %ecx 
        rep stosl

find_first_section__hla_3670:
        mov        (%esi), %al 
        orb        %al, %al 
        jz         first_section_found__hla_3671
        cmpb       $128, %al 
        jne        skip_other_symbol__hla_3672
        addl       $4, %esi 

skip_other_symbol__hla_3672:
        addl       $12, %esi 
        jmp        find_first_section__hla_3670

first_section_found__hla_3671:
        movl       %esi, %ebx 
        movl       %esi, %ebp 
        addl       $32, %esi 
        xorl       %ecx, %ecx 
        xorl       %edx, %edx 

find_next_section__hla_3673:
        cmpl       free_additional_memory__hla_53, %esi 
        je         make_section_symbol__hla_3674
        mov        (%esi), %al 
        orb        %al, %al 
        jz         make_section_symbol__hla_3674
        cmpb       $128, %al 
        je         skip_public__hla_3675
        ja         skip_extrn__hla_3676
        orb        $64, 20(%ebx) 

skip_extrn__hla_3676:
        addl       $12, %esi 
        jmp        find_next_section__hla_3673

skip_public__hla_3675:
        addl       $16, %esi 
        jmp        find_next_section__hla_3673

make_section_symbol__hla_3674:
        movl       %edi, %eax 
        xchgl      %eax, 4(%ebx) 
        stosl
        testl      $8, format_flags__hla_94 
        jnz        elf64_section_symbol__hla_3677
        xorl       %eax, %eax 
        stosl
        stosl
        call       store_section_index__hla_3559
        jmp        section_symbol_ok__hla_3678

elf64_section_symbol__hla_3677:
        call       store_section_index__hla_3559
        xorl       %eax, %eax 
        stosl
        stosl
        stosl
        stosl

section_symbol_ok__hla_3678:
        movl       %esi, %ebx 
        addl       $32, %esi 
        cmpl       free_additional_memory__hla_53, %ebx 
        jne        find_next_section__hla_3673
        incw       %dx 
        jz         format_limitations_exceeded__hla_573
        mov        %edx, current_section__hla_100 
        mov        symbols_stream__hla_95, %esi 

find_other_symbols__hla_3679:
        cmpl       free_additional_memory__hla_53, %esi 
        je         elf_symbol_table_ok__hla_3680
        mov        (%esi), %al 
        orb        %al, %al 
        jz         skip_section__hla_3681
        cmpb       $128, %al 
        je         make_public_symbol__hla_3682
        ja         make_extrn_symbol__hla_3683
        addl       $12, %esi 
        jmp        find_other_symbols__hla_3679

skip_section__hla_3681:
        addl       $32, %esi 
        jmp        find_other_symbols__hla_3679

make_public_symbol__hla_3682:
        mov        12(%esi), %eax 
        mov        %eax, current_line__hla_60 
        mov        8(%esi), %ebx 
        testb      $1, 8(%ebx) 
        jz         undefined_symbol__hla_603
        mov        current_pass__hla_111, %ax 
        cmpw       16(%ebx), %ax 
        jne        undefined_symbol__hla_603
        mov        11(%ebx), %dl 
        orb        %dl, %dl 
        jz         public_absolute__hla_3684
        mov        20(%ebx), %eax 
        cmpb       $0, (%eax) 
        jne        invalid_use_of_symbol__hla_585
        mov        4(%eax), %eax 
        testl      $8, format_flags__hla_94 
        jnz        elf64_public__hla_3685
        cmpb       $2, %dl 
        jne        invalid_use_of_symbol__hla_585
        mov        14(%eax), %dx 
        jmp        section_for_public_ok__hla_3686

elf64_public__hla_3685:
        cmpb       $4, %dl 
        jne        invalid_use_of_symbol__hla_585
        mov        6(%eax), %dx 
        jmp        section_for_public_ok__hla_3686

public_absolute__hla_3684:
        mov        $65521, %dx 

section_for_public_ok__hla_3686:
        mov        4(%esi), %eax 
        stosl
        testl      $8, format_flags__hla_94 
        jnz        elf64_public_symbol__hla_3687
        call       get_public_value__hla_3568
        stosl
        xorl       %eax, %eax 
        mov        10(%ebx), %al 
        stosl
        movl       %edx, %eax 
        shll       $16, %eax 
        mov        $16, %al 
        cmpb       $0, 10(%ebx) 
        je         elf_public_function__hla_3688
        orb        $1, %al 
        jmp        store_elf_public_info__hla_3689

elf_public_function__hla_3688:
        orb        $2, %al 

store_elf_public_info__hla_3689:
        stosl
        jmp        public_symbol_ok__hla_3690

elf64_public_symbol__hla_3687:
        movl       %edx, %eax 
        shll       $16, %eax 
        mov        $16, %al 
        cmpb       $0, 10(%ebx) 
        je         elf64_public_function__hla_3691
        orb        $1, %al 
        jmp        store_elf64_public_info__hla_3692

elf64_public_function__hla_3691:
        orb        $2, %al 

store_elf64_public_info__hla_3692:
        stosl
        call       get_public_value__hla_3568
        stosl
        xorl       %eax, %eax 
        stosl
        mov        10(%ebx), %al 
        stosl
        xorb       %al, %al 
        stosl

public_symbol_ok__hla_3690:
        incl       %ecx 
        movl       %ecx, %eax 
        shll       $8, %eax 
        mov        $128, %al 
        mov        %eax, (%esi) 
        addl       $16, %esi 
        jmp        find_other_symbols__hla_3679

make_extrn_symbol__hla_3683:
        mov        4(%esi), %eax 
        stosl
        testl      $8, format_flags__hla_94 
        jnz        elf64_extrn_symbol__hla_3693
        xorl       %eax, %eax 
        stosl
        mov        8(%esi), %eax 
        stosl
        mov        $16, %eax 
        stosl
        jmp        extrn_symbol_ok__hla_3694

elf64_extrn_symbol__hla_3693:
        mov        $16, %eax 
        stosl
        xorb       %al, %al 
        stosl
        stosl
        mov        8(%esi), %eax 
        stosl
        xorl       %eax, %eax 
        stosl

extrn_symbol_ok__hla_3694:
        incl       %ecx 
        movl       %ecx, %eax 
        shll       $8, %eax 
        mov        $129, %al 
        mov        %eax, (%esi) 
        addl       $12, %esi 
        jmp        find_other_symbols__hla_3679

elf_symbol_table_ok__hla_3680:
        movl       %edi, %edx 
        mov        free_additional_memory__hla_53, %ebx 
        xorb       %al, %al 
        stosb
        addl       $16, %edi 
        mov        %edx, 1(%edx) 
        addl       $16, %ebx 
        testl      $8, format_flags__hla_94 
        jz         make_string_table__hla_3695
        addl       $8, %ebx 

make_string_table__hla_3695:
        cmpl       %edx, %ebx 
        je         elf_string_table_ok__hla_3696
        testl      $8, format_flags__hla_94 
        jnz        make_elf64_string__hla_3697
        cmpb       $0, 13(%ebx) 
        je         rel_prefix_ok__hla_3698
        movb       $0, 13(%ebx) 
        mov        $1818587694, %eax 
        stosl

rel_prefix_ok__hla_3698:
        movl       %edi, %esi 
        subl       %edx, %esi 
        xchgl      %esi, (%ebx) 
        addl       $16, %ebx 

make_elf_string__hla_3701:
        orl        %esi, %esi 
        jz         default_string__hla_3702
        lodsl
        movl       %eax, %ecx 
        rep movsb
        xorb       %al, %al 
        stosb
        jmp        make_string_table__hla_3695

make_elf64_string__hla_3697:
        cmpb       $0, 5(%ebx) 
        je         elf64_rel_prefix_ok__hla_3703
        movb       $0, 5(%ebx) 
        mov        $1818587694, %eax 
        stosl
        mov        $97, %al 
        stosb

elf64_rel_prefix_ok__hla_3703:
        movl       %edi, %esi 
        subl       %edx, %esi 
        xchgl      %esi, (%ebx) 
        addl       $24, %ebx 
        jmp        make_elf_string__hla_3701

default_string__hla_3702:
        mov        $1634493998, %eax 
        stosl
        mov        $116, %ax 
        stosw
        jmp        make_string_table__hla_3695

elf_string_table_ok__hla_3696:
        mov        %edi, 9(%edx) 
        mov        code_start__hla_55, %ebx 
        movl       %edi, %eax 
        subl       free_additional_memory__hla_53, %eax 
        testl      $8, format_flags__hla_94 
        jnz        finish_elf64_header__hla_3708
        mov        %eax, 32(%ebx) 
        mov        current_section__hla_100, %eax 
        incw       %ax 
        jz         format_limitations_exceeded__hla_573
        mov        %ax, 50(%ebx) 
        incw       %ax 
        jz         format_limitations_exceeded__hla_573
        mov        %ax, 48(%ebx) 
        jmp        elf_header_finished__hla_3709

finish_elf64_header__hla_3708:
        mov        %eax, 40(%ebx) 
        mov        current_section__hla_100, %eax 
        incw       %ax 
        jz         format_limitations_exceeded__hla_573
        mov        %ax, 62(%ebx) 
        incw       %ax 
        jz         format_limitations_exceeded__hla_573
        mov        %ax, 60(%ebx) 

elf_header_finished__hla_3709:
        xorl       %eax, %eax 
        mov        $10, %ecx 
        rep stosl
        testl      $8, format_flags__hla_94 
        jz         elf_null_section_ok__hla_3710
        mov        $6, %ecx 
        rep stosl

elf_null_section_ok__hla_3710:
        movl       %ebp, %esi 
        xorl       %ecx, %ecx 

make_section_entry__hla_3711:
        movl       %edi, %ebx 
        mov        4(%esi), %eax 
        mov        (%eax), %eax 
        stosl
        mov        $1, %eax 
        cmpl       $0, 12(%esi) 
        je         bss_section__hla_3712
        testb      $128, 20(%esi) 
        jz         section_type_ok__hla_3713

bss_section__hla_3712:
        mov        $8, %al 

section_type_ok__hla_3713:
        stosl
        mov        20(%esi), %eax 
        andb       $63, %al 
        call       store_elf_machine_word__hla_3577
        xorl       %eax, %eax 
        call       store_elf_machine_word__hla_3577
        mov        8(%esi), %eax 
        mov        %eax, image_base__hla_102 
        subl       code_start__hla_55, %eax 
        call       store_elf_machine_word__hla_3577
        mov        12(%esi), %eax 
        call       store_elf_machine_word__hla_3577
        xorl       %eax, %eax 
        stosl
        stosl
        mov        16(%esi), %eax 
        call       store_elf_machine_word__hla_3577
        xorl       %eax, %eax 
        call       store_elf_machine_word__hla_3577
        incl       %ecx 
        addl       $32, %esi 
        xchgl      %edi, (%esp) 
        movl       %edi, %ebp 

convert_relocations__hla_3714:
        cmpl       free_additional_memory__hla_53, %esi 
        je         relocations_converted__hla_3715
        mov        (%esi), %al 
        orb        %al, %al 
        jz         relocations_converted__hla_3715
        cmpb       $128, %al 
        jb         make_relocation_entry__hla_3716
        ja         relocation_entry_ok__hla_3717
        addl       $16, %esi 
        jmp        convert_relocations__hla_3714

make_relocation_entry__hla_3716:
        testl      $8, format_flags__hla_94 
        jnz        make_elf64_relocation_entry__hla_3718
        mov        4(%esi), %eax 
        stosl
        mov        8(%esi), %eax 
        mov        (%eax), %eax 
        mov        (%esi), %al 
        stosl
        jmp        relocation_entry_ok__hla_3717

make_elf64_relocation_entry__hla_3718:
        mov        4(%esi), %eax 
        stosl
        xorl       %eax, %eax 
        stosl
        movzbl     (%esi), %eax 
        stosl
        mov        8(%esi), %eax 
        mov        (%eax), %eax 
        shrl       $8, %eax 
        stosl
        xorl       %eax, %eax 
        stosl
        stosl

relocation_entry_ok__hla_3717:
        addl       $12, %esi 
        jmp        convert_relocations__hla_3714

relocations_converted__hla_3715:
        cmpl       %ebp, %edi 
        xchgl      %edi, (%esp) 
        je         rel_section_ok__hla_3719
        mov        (%ebx), %eax 
        subl       $4, %eax 
        testl      $8, format_flags__hla_94 
        jz         store_relocations_name_offset__hla_3720
        decl       %eax 

store_relocations_name_offset__hla_3720:
        stosl
        testl      $8, format_flags__hla_94 
        jnz        rela_section__hla_3721
        mov        $9, %eax 
        jmp        store_relocations_type__hla_3722

rela_section__hla_3721:
        mov        $4, %eax 

store_relocations_type__hla_3722:
        stosl
        xorb       %al, %al 
        call       store_elf_machine_word__hla_3577
        call       store_elf_machine_word__hla_3577
        movl       %ebp, %eax 
        subl       code_start__hla_55, %eax 
        call       store_elf_machine_word__hla_3577
        mov        (%esp), %eax 
        subl       %ebp, %eax 
        call       store_elf_machine_word__hla_3577
        mov        current_section__hla_100, %eax 
        stosl
        movl       %ecx, %eax 
        stosl
        incl       %ecx 
        testl      $8, format_flags__hla_94 
        jnz        finish_elf64_rela_section__hla_3723
        mov        $4, %eax 
        stosl
        mov        $8, %al 
        stosl
        jmp        rel_section_ok__hla_3719

finish_elf64_rela_section__hla_3723:
        mov        $8, %eax 
        stosl
        xorb       %al, %al 
        stosl
        mov        $24, %al 
        stosl
        xorb       %al, %al 
        stosl

rel_section_ok__hla_3719:
        cmpl       free_additional_memory__hla_53, %esi 
        jne        make_section_entry__hla_3711
        popl       %eax 
        mov        code_start__hla_55, %ebx 
        subl       %ebx, %eax 
        mov        %eax, code_size__hla_56 
        mov        $32, %ecx 
        testl      $8, format_flags__hla_94 
        jz         adjust_elf_section_headers_offset__hla_3724
        mov        $40, %ecx 

adjust_elf_section_headers_offset__hla_3724:
        addl       %eax, (%ebx,%ecx,1) 
        mov        $1, %eax 
        stosl
        mov        $2, %al 
        stosl
        xorb       %al, %al 
        call       store_elf_machine_word__hla_3577
        call       store_elf_machine_word__hla_3577
        mov        code_size__hla_56, %eax 
        call       store_elf_machine_word__hla_3577
        mov        1(%edx), %eax 
        subl       free_additional_memory__hla_53, %eax 
        call       store_elf_machine_word__hla_3577
        mov        current_section__hla_100, %eax 
        incl       %eax 
        stosl
        mov        number_of_sections__hla_97, %eax 
        incl       %eax 
        stosl
        testl      $8, format_flags__hla_94 
        jnz        finish_elf64_sym_section__hla_3725
        mov        $4, %eax 
        stosl
        mov        $16, %al 
        stosl
        jmp        sym_section_ok__hla_3726

finish_elf64_sym_section__hla_3725:
        mov        $8, %eax 
        stosl
        xorb       %al, %al 
        stosl
        mov        $24, %al 
        stosl
        xorb       %al, %al 
        stosl

sym_section_ok__hla_3726:
        mov        $9, %al 
        stosl
        mov        $3, %al 
        stosl
        xorb       %al, %al 
        call       store_elf_machine_word__hla_3577
        call       store_elf_machine_word__hla_3577
        mov        1(%edx), %eax 
        subl       free_additional_memory__hla_53, %eax 
        addl       code_size__hla_56, %eax 
        call       store_elf_machine_word__hla_3577
        mov        9(%edx), %eax 
        subl       1(%edx), %eax 
        call       store_elf_machine_word__hla_3577
        xorl       %eax, %eax 
        stosl
        stosl
        mov        $1, %al 
        call       store_elf_machine_word__hla_3577
        xorl       %eax, %eax 
        call       store_elf_machine_word__hla_3577
        mov        $6447476, %eax 
        movl       $1836675886, 1(%edx) 
        mov        %eax, 5(%edx) 
        movl       $1920234286, 9(%edx) 
        mov        %eax, 13(%edx) 
        movl       $0, written_size__hla_58 
        mov        output_file__hla_51, %edx 
        call       create__hla_426
        jc         write_failed__hla_608
        call       write_code__hla_3539
        movl       %edi, %ecx 
        mov        free_additional_memory__hla_53, %edx 
        subl       %edx, %ecx 
        addl       %ecx, written_size__hla_58 
        call       write__hla_436
        jmp        output_written__hla_3625
xformatter__hla_3586:

/* procedure HWexcept__hla_ */

HWexcept__hla_:
        jmp        shorthwExcept__hla_
xHWexcept__hla_:

/* procedure DfltExHndlr__hla_ */

DfltExHndlr__hla_:
        jmp        shortDfltExcept__hla_
xDfltExHndlr__hla_:

/* procedure _0e9f__p____hla_3747 */

_0e9f__p____hla_3747:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "Raise__hla_"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0e9f__p____hla_3747:

/* procedure Raise__hla_ */

Raise__hla_:
        mov        ExceptionPtr__hla_, %ebp 

Unstack__hla_3749:
        cmpl       $HWexcept__hla_, 4(%ebp) 
        je         DoThisOne__hla_3750
        mov        (%ebp), %ebp 
        jmp        Unstack__hla_3749

DoThisOne__hla_3750:
        movl       %ebp, %esp 
        popl       ExceptionPtr__hla_ 
        addl       $8, %esp 
        popl       %ebp 
        ret
xRaise__hla_:

/* procedure _0ea8__p____hla_3756 */

_0ea8__p____hla_3756:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "shortDfltExcept__hla_"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0ea8__p____hla_3756:

/* procedure shortDfltExcept__hla_ */

shortDfltExcept__hla_:
        pushl      %eax 
        pushl      $str__hla_3758 
        call       puts__hla_23
        popl       %eax 
        pushl      %eax 
        call       puthex32__hla_27
        call       put_newln__hla_29
        pushl      $1 
        call       exitProcess__hla_14
xshortDfltExcept__hla_:

/* procedure _0eb0__p____hla_3764 */

_0eb0__p____hla_3764:
        int        $3 
        int        $3 
        int        $3 
        int        $3 

 .ascii "shorthwExcept__hla_"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
        int        $3 
x_0eb0__p____hla_3764:

/* procedure shorthwExcept__hla_ */

shorthwExcept__hla_:
        mov        $1, %eax 
        ret
xshorthwExcept__hla_:

/* procedure fasmDebug__hla_3768 */

fasmDebug__hla_3768:
        int        $3 
        int        $3 
        int        $3 

 .ascii "fasmMain"
        .byte      0x0
        int        $3 
        int        $3 
        int        $3 
xfasmDebug__hla_3768:

/* procedure _fasmMain */

_fasmMain:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        mov        %esp, saved_Stack_Pointer__hla_36 
        cmpb       $0, clearedBSS__hla_158 
        jne        false__hla_3770
        lea        startOfBSS__hla_33, %edi 
        lea        endOfBSS__hla_147, %ecx 
        subl       %edi, %ecx 
        addl       $3, %ecx 
        shrl       $2, %ecx 
        xorl       %eax, %eax 
        cld
        rep stosl
false__hla_3770:
        movb       $0, clearedBSS__hla_158 
        mov        8(%ebp), %eax 
        mov        %eax, input_file__hla_50 
        mov        12(%ebp), %eax 
        mov        %eax, output_file__hla_51 
        mov        16(%ebp), %eax 
        mov        %eax, C_memory__hla_37 
        mov        20(%ebp), %eax 
        mov        %eax, C_memsize__hla_38 
        mov        24(%ebp), %eax 
        mov        %ax, passes_limit__hla_110 
        mov        28(%ebp), %al 
        mov        %al, g_verbose__hla_114 
        lea        stack__hla_35+65536, %esp 
        lea        stack__hla_35+4096, %eax 
        mov        %eax, stack_limit__hla_49 
        pushl      $DfltExHndlr__hla_ 
        pushl      %ebp 
        pushl      $MainPgmCoroutine__hla_ 
        pushl      $HWexcept__hla_ 
        pushl      $0 
        mov        %esp, ExceptionPtr__hla_ 
        mov        %esp, MainPgmCoroutine__hla_+12 
        pushl      $0 
        movl       %esp, %ebp 
        pushl      %ebp 
        pushl      $exception__hla_3772 
        pushl      %ebp 
        .byte      0x64
        mov        0, %ebp 
        pushl      8(%ebp) 
        mov        4(%esp), %ebp 
        pushl      $HWexcept__hla_ 
        .byte      0x64
        pushl      0 
        .byte      0x64
        mov        %esp, 0 
        cmpb       $0, g_verbose__hla_114 
        je         false__hla_3773
        pushl      $str__hla_3774 
        call       puts__hla_23
        call       put_newln__hla_29
false__hla_3773:
        call       init_memory__hla_510
        call       preprocessor__hla_1291
        call       parser__hla_1865
        call       fasmAssembler
        call       formatter__hla_3586
        call       display_user_messages__hla_744
        cmpb       $0, g_verbose__hla_114 
        je         false__hla_3775
        movzwl     current_pass__hla_111, %eax 
        incl       %eax 
        pushl      %eax 
        call       putu32__hla_25
        pushl      $str__hla_3776 
        call       puts__hla_23
        pushl      written_size__hla_58 
        call       putu32__hla_25
        pushl      $str__hla_3777 
        call       puts__hla_23
        call       put_newln__hla_29
false__hla_3775:
        .byte      0x64
        mov        0, %esp 
        .byte      0x64
        popl       0 
        addl       $8, %esp 
        popl       %ebp 
        addl       $4, %esp 
        jmp        endtry__hla_3771
exception__hla_3772:
        cmpl       $12296, %eax 
        jne        exception__hla_3778
        call       fatal_error__hla_754

 .ascii "source file not found"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3778:
        cmpl       $12289, %eax 
        jne        exception__hla_3779
        call       fatal_error__hla_754

 .ascii "Ran out of memory while reading file"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3779:
        cmpl       $12290, %eax 
        jne        exception__hla_3780
        call       fatal_error__hla_754

 .ascii "Insufficient system memory - could not allocate heap"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3780:
        cmpl       $12288, %eax 
        jne        exception__hla_3781
        call       fatal_error__hla_754

 .ascii "out of memory"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3781:
        cmpl       $12291, %eax 
        jne        exception__hla_3782
        call       fatal_error__hla_754

 .ascii "out of stack space"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3782:
        cmpl       $12292, %eax 
        jne        exception__hla_3783
        call       fatal_error__hla_754

 .ascii "unexpected end of file"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3783:
        cmpl       $12293, %eax 
        jne        exception__hla_3784
        call       fatal_error__hla_754

 .ascii "code cannot be generated"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3784:
        cmpl       $12294, %eax 
        jne        exception__hla_3785
        call       fatal_error__hla_754

 .ascii "format limitations exceeded"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3785:
        cmpl       $12295, %eax 
        jne        exception__hla_3786
        call       fatal_error__hla_754

 .ascii "write failed"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3786:
        cmpl       $16388, %eax 
        jne        exception__hla_3787
        call       assembler_error__hla_763

 .ascii "file not found"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3787:
        cmpl       $16386, %eax 
        jne        exception__hla_3788
        call       assembler_error__hla_763

 .ascii "error reading file"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3788:
        cmpl       $16395, %eax 
        jne        exception__hla_3789
        call       assembler_error__hla_763

 .ascii "invalid file format"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3789:
        cmpl       $16396, %eax 
        jne        exception__hla_3790
        call       assembler_error__hla_763

 .ascii "invalid macro arguments"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3790:
        cmpl       $16416, %eax 
        jne        exception__hla_3791
        call       assembler_error__hla_763

 .ascii "unexpected characters"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3791:
        cmpl       $16393, %eax 
        jne        exception__hla_3792
        call       assembler_error__hla_763

 .ascii "invalid argument"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3792:
        cmpl       $16389, %eax 
        jne        exception__hla_3793
        call       assembler_error__hla_763

 .ascii "illegal instruction"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3793:
        cmpl       $16398, %eax 
        jne        exception__hla_3794
        call       assembler_error__hla_763

 .ascii "invalid operand"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3794:
        cmpl       $16399, %eax 
        jne        exception__hla_3795
        call       assembler_error__hla_763

 .ascii "invalid size of operand"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3795:
        cmpl       $16406, %eax 
        jne        exception__hla_3796
        call       assembler_error__hla_763

 .ascii "operand size not specified"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3796:
        cmpl       $16407, %eax 
        jne        exception__hla_3797
        call       assembler_error__hla_763

 .ascii "operand sizes do not match"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3797:
        cmpl       $16392, %eax 
        jne        exception__hla_3798
        call       assembler_error__hla_763

 .ascii "invalid size of address value"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3798:
        cmpl       $16384, %eax 
        jne        exception__hla_3799
        call       assembler_error__hla_763

 .ascii "address sizes do not agree"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3799:
        cmpl       $16408, %eax 
        jne        exception__hla_3800
        call       assembler_error__hla_763

 .ascii "disallowed combination of registers"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3800:
        cmpl       $16402, %eax 
        jne        exception__hla_3801
        call       assembler_error__hla_763

 .ascii "not encodable with long immediate"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3801:
        cmpl       $16409, %eax 
        jne        exception__hla_3802
        call       assembler_error__hla_763

 .ascii "relative jump out of range"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3802:
        cmpl       $16394, %eax 
        jne        exception__hla_3803
        call       assembler_error__hla_763

 .ascii "invalid expression"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3803:
        cmpl       $16391, %eax 
        jne        exception__hla_3804
        call       assembler_error__hla_763

 .ascii "invalid address"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3804:
        cmpl       $16401, %eax 
        jne        exception__hla_3805
        call       assembler_error__hla_763

 .ascii "invalid value"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3805:
        cmpl       $16418, %eax 
        jne        exception__hla_3806
        call       assembler_error__hla_763

 .ascii "value out of range"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3806:
        cmpl       $16415, %eax 
        jne        exception__hla_3807
        call       assembler_error__hla_763

 .ascii "undefined symbol"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3807:
        cmpl       $16400, %eax 
        jne        exception__hla_3808
        call       assembler_error__hla_763

 .ascii "invalid use of symbol"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3808:
        cmpl       $16405, %eax 
        jne        exception__hla_3809
        call       assembler_error__hla_763

 .ascii "name too long"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3809:
        cmpl       $16397, %eax 
        jne        exception__hla_3810
        call       assembler_error__hla_763

 .ascii "invalid name"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3810:
        cmpl       $16410, %eax 
        jne        exception__hla_3811
        call       assembler_error__hla_763

 .ascii "reserved word used as symbol"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3811:
        cmpl       $16413, %eax 
        jne        exception__hla_3812
        call       assembler_error__hla_763

 .ascii "symbol already defined"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3812:
        cmpl       $16404, %eax 
        jne        exception__hla_3813
        call       assembler_error__hla_763

 .ascii "missing end quote"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3813:
        cmpl       $16403, %eax 
        jne        exception__hla_3814
        call       assembler_error__hla_763

 .ascii "missing end directive"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3814:
        cmpl       $16417, %eax 
        jne        exception__hla_3815
        call       assembler_error__hla_763

 .ascii "unexpected instruction"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3815:
        cmpl       $16387, %eax 
        jne        exception__hla_3816
        call       assembler_error__hla_763

 .ascii "extra characters on line"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3816:
        cmpl       $16411, %eax 
        jne        exception__hla_3817
        call       assembler_error__hla_763

 .ascii "section is not aligned enough"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3817:
        cmpl       $16412, %eax 
        jne        exception__hla_3818
        call       assembler_error__hla_763

 .ascii "setting already specified"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3818:
        cmpl       $16385, %eax 
        jne        exception__hla_3819
        call       assembler_error__hla_763

 .ascii "data already defined"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3819:
        cmpl       $16414, %eax 
        jne        exception__hla_3820
        call       assembler_error__hla_763

 .ascii "too many repeats"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3820:
        cmpl       $16390, %eax 
        jne        exception__hla_3821
        call       assembler_error__hla_763

 .ascii "incomplete macro"
        .byte      0x0
        jmp        endtry__hla_3771
exception__hla_3821:
        pushl      $str__hla_3822 
        call       puts__hla_23
        pushl      %eax 
        call       puthex32__hla_27
        call       put_newln__hla_29
endtry__hla_3771:

QuitMain__hla___hla_3736:
        mov        saved_Stack_Pointer__hla_36, %esp 
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        popl       %ebp 
        ret
        pushl      $0 
        call       exitProcess__hla_14
x_fasmMain:




