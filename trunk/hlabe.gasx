// Assembly code emitted by HLA compiler
// Version 2.106 build 21552 (prototype)
// HLA compiler written by Randall Hyde
// GAS compatible output






  .text


        .globl     numCodeRelocs
        .globl     dataSize
        .globl     QuitMain__hla_
        .globl     numDataRelocs
        .globl     _hlabe_compile
        .globl     compileMACHO
        .globl     DfltExHndlr__hla_
        .globl     bssSize
        .globl     compileELF
        .globl     symbolTable
        .globl     codeSize
        .globl     hlabe_compile
        .globl     currentSection
        .globl     lexer
        .globl     equatesTable
        .globl     compileCOFF
        .globl     printLineNumberChain
        .globl     optimizeDisps






  .data

        .align (2)
        .align (2)
COFFsyms__hla_3311 :.space     4
numCOFFsyms__hla_3312 :.space     4
coffSymSize__hla_3313 :.space     4
ELFsyms__hla_3314 :.space     4
numELFsyms__hla_3315 :.space     4
elfSymSize__hla_3316 :.space     4
stringTable__hla_3317 :.space     4
strTblOffset__hla_3318 :.space     4
strTblSize__hla_3319 :.space     4
codeSize :.space     4
numCodeRelocs :.space     4
dataSize :.space     4
numDataRelocs :.space     4
bssSize :.space     4
symbolTable :.space     160
equatesTable :.space     160
currentSection :.byte  0x1
verboseDebug__hla_3320 :.byte  0x0
        .align (2)
MainPgmVMT__hla_3328 :.long      QuitMain__hla_
MainPgmCoroutine__hla_3329:
        .long      MainPgmVMT__hla_3328
        .long      0x0
        .long      0x0
SaveSEHPointer__hla_3330 :.long  0x0
        .long      0x0
        .long      0x0
saveESP__hla_3331 :.space     4
lineNumber__hla_3349 :.long  0x1
tknListTail__hla_3350 :.space     4
lastTailPtr__hla_3351 :.space     4
codeListTail__hla_3352 :.space     4
dataListTail__hla_3353 :.space     4
bssListTail__hla_3354 :.space     4
end_source__hla_3355 :.space     4
start_stmt__hla_3356 :.space     4
CodeAuxSection__hla_4027:
        .long      0x0
        .word      0x0
        .word      0x0
        .long      0x0
        .long      0x1
        .byte      0x0
DataAuxSection__hla_4028:
        .long      0x0
        .word      0x0
        .word      0x0
        .long      0x0
        .long      0x2
        .byte      0x0
BssAuxSection__hla_4029:
        .long      0x0
        .word      0x0
        .word      0x0
        .long      0x0
        .long      0x3
        .byte      0x0
NULLsection__hla_4101:
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
shstrtabSection__hla_4102:
        .long      0x1
        .long      0x3
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x1
        .long      0x0
symtabSection__hla_4103:
        .long      0x0
        .long      0x2
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x3
        .long      0x0
        .long      0x4
        .long      0x10
strtabSection__hla_4104:
        .long      0x0
        .long      0x3
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x1
        .long      0x0
textSection__hla_4105:
        .long      0x0
        .long      0x1
        .long      0x6
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x4
        .long      0x0
dataSection__hla_4106:
        .long      0x0
        .long      0x1
        .long      0x3
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x4
        .long      0x0
bssSection__hla_4107:
        .long      0x0
        .long      0x8
        .long      0x3
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x4
        .long      0x0
relTextSection__hla_4108:
        .long      0x0
        .long      0x9
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x2
        .long      0x4
        .long      0x4
        .long      0x8
relDataSection__hla_4109:
        .long      0x0
        .long      0x9
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x0
        .long      0x2
        .long      0x5
        .long      0x4
        .long      0x8




  .text


        .align (2)
len__hla_3343 :.long      0x2
        .long      0x2
str__hla_3343:

 .ascii ", "
 .byte 0

 .byte 0

        .align (2)
len__hla_3385 :.long      0x2e
        .long      0x2e
str__hla_3385:

 .ascii "Attempted to scan beyond the end of the file"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0

        .align (2)
len__hla_3409 :.long      0x13
        .long      0x13
str__hla_3409:

 .ascii "Unknown statement: "
 .byte 0


        .align (2)
len__hla_3431 :.long      0x23
        .long      0x23
str__hla_3431:

 .ascii "Expected ')' in expression at line "
 .byte 0


        .align (2)
len__hla_3432 :.long      0x25
        .long      0x25
str__hla_3432:

 .ascii "Unexpected character in expression: '"
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_3433 :.long      0xa
        .long      0xa
str__hla_3433:

 .ascii "' at line "
 .byte 0

 .byte 0
jmpTbl__hla_3424:
        .long      (case__hla_3425+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (case__hla_3429+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (case__hla_3426+0)
        .long      (case__hla_3426+0)
        .long      (case__hla_3426+0)
        .long      (case__hla_3426+0)
        .long      (case__hla_3426+0)
        .long      (case__hla_3426+0)
        .long      (case__hla_3426+0)
        .long      (case__hla_3426+0)
        .long      (case__hla_3426+0)
        .long      (case__hla_3426+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (default__hla_3424+0)
        .long      (case__hla_3427+0)
        .long      (default__hla_3424+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)
        .long      (case__hla_3427+0)

        .align (2)
len__hla_3444 :.long      0x23
        .long      0x23
str__hla_3444:

 .ascii "Illegal relocatable object at line "
 .byte 0


        .align (2)
len__hla_3456 :.long      0x34
        .long      0x34
str__hla_3456:

 .ascii "Expression cannot contain relocatable items at line "
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3470 :.long      0x19
        .long      0x19
str__hla_3470:

 .ascii ".b operand out of range"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_3481 :.long      0x19
        .long      0x19
str__hla_3481:

 .ascii ".w operand out of range"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_3523 :.long      0x1a
        .long      0x1a
str__hla_3523:

 .ascii "TByte value out of range"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0

        .align (2)
len__hla_3576 :.long      0x1a
        .long      0x1a
str__hla_3576:

 .ascii "Filename too long at line "
 .byte 0

 .byte 0

        .align (2)
len__hla_3612 :.long      0x1c
        .long      0x1c
str__hla_3612:

 .ascii "ecx <> NULL hlabe.hla (1961)"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3621 :.long      0x1c
        .long      0x1c
str__hla_3621:

 .ascii "ecx <> NULL hlabe.hla (2028)"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3627 :.long      0x15
        .long      0x15
str__hla_3627:

 .ascii "Syntax error at line "
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_3628 :.long      0x13
        .long      0x13
str__hla_3628:

 .ascii ", expected at ','"
 .byte 0xd
 .byte 0xa
 .byte 0


        .align (2)
len__hla_3629 :.long      0x2e
        .long      0x2e
str__hla_3629:

 .ascii "Equate attempted to redefine a symbol at line "
 .byte 0

 .byte 0

        .align (2)
len__hla_3634 :.long      0x1c
        .long      0x1c
str__hla_3634:

 .ascii "ecx <> NULL hlabe.hla (2110)"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3640 :.long      0x2c
        .long      0x2c
str__hla_3640:

 .ascii "Public symbol cannot also be extern at line "
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3645 :.long      0x1c
        .long      0x1c
str__hla_3645:

 .ascii "ecx <> NULL hlabe.hla (2202)"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3654 :.long      0x1c
        .long      0x1c
str__hla_3654:

 .ascii "ecx <> NULL hlabe.hla (2294)"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3660 :.long      0x2a
        .long      0x2a
str__hla_3660:

 .ascii ".ub expected a ',' -- Syntax error at line"
 .byte 0

 .byte 0

        .align (2)
len__hla_3663 :.long      0x2b
        .long      0x2b
str__hla_3663:

 .ascii ".uw expected a ',' -- Syntax error at line "
 .byte 0


        .align (2)
len__hla_3666 :.long      0x2b
        .long      0x2b
str__hla_3666:

 .ascii ".ud expected a ',' -- Syntax error at line "
 .byte 0


        .align (2)
len__hla_3672 :.long      0x1c
        .long      0x1c
str__hla_3672:

 .ascii "ecx <> NULL hlabe.hla (2485)"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3678 :.long      0x31
        .long      0x31
str__hla_3678:

 .ascii "External symbol is already defined. Error at line"
 .byte 0

 .byte 0
 .byte 0
jmpTbl__hla_3606:
        .long      (case__hla_3607+0)
        .long      (case__hla_3608+0)
        .long      (case__hla_3615+0)
        .long      (case__hla_3616+0)
        .long      (case__hla_3624+0)
        .long      (default__hla_3606+0)
        .long      (default__hla_3606+0)
        .long      (default__hla_3606+0)
        .long      (default__hla_3606+0)
        .long      (default__hla_3606+0)
        .long      (default__hla_3606+0)
        .long      (case__hla_3630+0)
        .long      (default__hla_3606+0)
        .long      (default__hla_3606+0)
        .long      (default__hla_3606+0)
        .long      (case__hla_3637+0)
        .long      (case__hla_3641+0)
        .long      (case__hla_3648+0)
        .long      (case__hla_3649+0)
        .long      (case__hla_3650+0)
        .long      (case__hla_3657+0)
        .long      (case__hla_3667+0)
        .long      (case__hla_3668+0)
        .long      (case__hla_3675+0)
        .long      (case__hla_3615+0)
        .long      (case__hla_3679+0)

        .align (2)
len__hla_3683 :.long      0x7
        .long      0x7
str__hla_3683:

 .ascii "Symbol "
 .byte 0


        .align (2)
len__hla_3684 :.long      0x23
        .long      0x23
str__hla_3684:

 .ascii " is already defined. Error at line "
 .byte 0


        .align (2)
len__hla_3803 :.long      0x40
        .long      0x40
str__hla_3803:

 .ascii "Error: Unexpected bss directive encountered in non-bss section"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3808 :.long      0x42
        .long      0x42
str__hla_3808:

 .ascii "Error: Unexpected code directive encountered in non-code section"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0

        .align (2)
len__hla_3811 :.long      0x42
        .long      0x42
str__hla_3811:

 .ascii "Error: Unexpected data directive encountered in non-data section"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0

        .align (2)
len__hla_3825 :.long      0x23
        .long      0x23
str__hla_3825:

 .ascii "Object code type is not supported"
 .byte 0xd
 .byte 0xa
 .byte 0


        .align (2)
len__hla_3845 :.long      0x24
        .long      0x24
str__hla_3845:

 .ascii "Internal error: illegal token value:"
 .byte 0

 .byte 0
 .byte 0
 .byte 0
jmpTbl__hla_3788:
        .long      (case__hla_3789+0)
        .long      (case__hla_3790+0)
        .long      (case__hla_3804+0)
        .long      (case__hla_3789+0)
        .long      (case__hla_3839+0)
        .long      (case__hla_3843+0)
        .long      (case__hla_3812+0)
        .long      (case__hla_3812+0)
        .long      (case__hla_3812+0)
        .long      (case__hla_3806+0)
        .long      (default__hla_3788+0)
        .long      (case__hla_3809+0)
        .long      (case__hla_3801+0)
        .long      (case__hla_3816+0)
        .long      (case__hla_3817+0)
        .long      (case__hla_3818+0)
        .long      (case__hla_3833+0)
        .long      (case__hla_3826+0)
        .long      (case__hla_3789+0)
        .long      (case__hla_3789+0)
        .long      (case__hla_3789+0)

        .align (2)
len__hla_3875 :.long      0x31
        .long      0x31
str__hla_3875:

 .ascii "Instruction cannot reference an external symbol ("
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_3876 :.long      0x3
        .long      0x3
str__hla_3876:

 .ascii ")"
 .byte 0xd
 .byte 0xa
 .byte 0

jmpTbl__hla_3861:
        .long      (case__hla_3862+0)
        .long      (case__hla_3866+0)
        .long      (case__hla_3867+0)
        .long      (case__hla_3868+0)
        .long      (case__hla_3882+0)
        .long      (case__hla_3869+0)
        .long      (case__hla_3870+0)
        .long      (case__hla_3870+0)
        .long      (case__hla_3870+0)
        .long      (case__hla_3863+0)
        .long      (default__hla_3861+0)
        .long      (case__hla_3864+0)
        .long      (case__hla_3865+0)
        .long      (case__hla_3871+0)
        .long      (case__hla_3880+0)
        .long      (case__hla_3877+0)
        .long      (case__hla_3881+0)
        .long      (case__hla_3879+0)
        .long      (case__hla_3862+0)
        .long      (case__hla_3862+0)
        .long      (case__hla_3862+0)

        .align (2)
len__hla_3900 :.long      0x11
        .long      0x11
str__hla_3900:

 .ascii "Undefined symbol:"
 .byte 0

 .byte 0
 .byte 0
jmpTbl__hla_3916:
        .long      (case__hla_3917+0)
        .long      (case__hla_3923+0)
        .long      (case__hla_3925+0)
        .long      (case__hla_3917+0)
        .long      (case__hla_3938+0)
        .long      (case__hla_3926+0)
        .long      (case__hla_3927+0)
        .long      (case__hla_3927+0)
        .long      (case__hla_3927+0)
        .long      (case__hla_3918+0)
        .long      (default__hla_3916+0)
        .long      (case__hla_3919+0)
        .long      (case__hla_3920+0)
        .long      (case__hla_3928+0)
        .long      (case__hla_3936+0)
        .long      (case__hla_3929+0)
        .long      (case__hla_3937+0)
        .long      (case__hla_3933+0)
        .long      (case__hla_3917+0)
        .long      (case__hla_3917+0)
        .long      (case__hla_3921+0)

        .align (2)
len__hla_3967 :.long      0x8
        .long      0x8
str__hla_3967:

 .ascii "Symbol '"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3968 :.long      0x10
        .long      0x10
str__hla_3968:

 .ascii "' is undefined"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_3972 :.long      0x2f
        .long      0x2f
str__hla_3972:

 .ascii "Branch target is out of range. "
 .byte 0xd
 .byte 0xa

 .ascii "(displacement="
 .byte 0


        .align (2)
len__hla_3973 :.long      0x28
        .long      0x28
str__hla_3973:

 .ascii " and must be in the range -128..+127)."
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0
 .byte 0
jmpTbl__hla_3963:
        .long      (case__hla_3964+0)
        .long      (case__hla_3964+0)
        .long      (case__hla_3964+0)
        .long      (case__hla_3965+0)
        .long      (case__hla_3991+0)
        .long      (case__hla_3964+0)
        .long      (case__hla_3964+0)
        .long      (case__hla_3964+0)
        .long      (case__hla_3964+0)
        .long      (case__hla_3964+0)
        .long      (default__hla_3963+0)
        .long      (case__hla_3964+0)
        .long      (case__hla_3964+0)
        .long      (case__hla_3969+0)
        .long      (case__hla_3974+0)
        .long      (case__hla_3977+0)
        .long      (case__hla_3987+0)
        .long      (case__hla_3982+0)
        .long      (case__hla_3964+0)
        .long      (case__hla_3964+0)
        .long      (case__hla_3964+0)

        .align (2)
len__hla_3998 :.long      0x2d
        .long      0x2d
str__hla_3998:

 .ascii "Internal error (relocations in BSS section)"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_4003 :.long      0x1c
        .long      0x1c
str__hla_4003:

 .ascii "ebx <> NULL hlabe.hla (5044)"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4006 :.long      0x12
        .long      0x12
str__hla_4006:

 .ascii "Undefined symbol: "
 .byte 0

 .byte 0

        .align (2)
len__hla_4013 :.long      0x10
        .long      0x10
str__hla_4013:

 .ascii "optimizeDisps:"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4015 :.long      0x5e
        .long      0x5e
str__hla_4015:

 .ascii "Could not optimize (small->large) in 16,384 passes."
 .byte 0xd
 .byte 0xa

 .ascii "Reverting to large->small optimization."
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0

        .align (2)
len__hla_4017 :.long      0x15
        .long      0x15
str__hla_4017:

 .ascii "Optimization passes: "
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_4018 :.long      0x8
        .long      0x8
str__hla_4018:

 .ascii "+16386"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4020 :.long      0x4
        .long      0x4
str__hla_4020:

 .ascii "+2"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4044 :.long      0x4
        .long      0x4
str__hla_4044:
 .byte 0xd
 .byte 0xa
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4046 :.long      0x2
        .long      0x2
str__hla_4046:

 .ascii ": "
 .byte 0

 .byte 0

        .align (2)
len__hla_4047 :.long      0x3
        .long      0x3
str__hla_4047:

 .ascii ", '"
 .byte 0


        .align (2)
len__hla_4048 :.long      0x3
        .long      0x3
str__hla_4048:

 .ascii "', "
 .byte 0


        .align (2)
len__hla_4051 :.long      0x17
        .long      0x17
str__hla_4051:

 .ascii "IMAGE_REL_I386_ABSOLUTE"
 .byte 0


        .align (2)
len__hla_4053 :.long      0x14
        .long      0x14
str__hla_4053:

 .ascii "IMAGE_REL_I386_DIR32"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4055 :.long      0x16
        .long      0x16
str__hla_4055:

 .ascii "IMAGE_REL_I386_DIR32NB"
 .byte 0

 .byte 0

        .align (2)
len__hla_4057 :.long      0x14
        .long      0x14
str__hla_4057:

 .ascii "IMAGE_REL_I386_REL32"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4058 :.long      0x18
        .long      0x18
str__hla_4058:

 .ascii "???? relocation type = $"
 .byte 0

 .byte 0
 .byte 0
 .byte 0
jmpTbl__hla_4049:
        .long      (case__hla_4050+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (case__hla_4052+0)
        .long      (case__hla_4054+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (default__hla_4049+0)
        .long      (case__hla_4056+0)

        .align (2)
len__hla_4065 :.long      0x20
        .long      0x20
str__hla_4065:

 .ascii "generateCOFF:"
 .byte 0xd
 .byte 0xa

 .ascii "Input filename:  "
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4066 :.long      0x13
        .long      0x13
str__hla_4066:
 .byte 0xd
 .byte 0xa

 .ascii "Output filename: "
 .byte 0

divisor__hla_4067: .long 18

        .align (2)
len__hla_4069 :.long      0x5
        .long      0x5
str__hla_4069:

 .ascii ".text"
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_4071 :.long      0x5
        .long      0x5
str__hla_4071:

 .ascii ".data"
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_4072 :.long      0x4
        .long      0x4
str__hla_4072:

 .ascii ".bss"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4079 :.long      0x1c
        .long      0x1c
str__hla_4079:
 .byte 0xd
 .byte 0xa

 .ascii "COFF Symbol table (#syms: "
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4080 :.long      0x5
        .long      0x5
str__hla_4080:

 .ascii ")"
 .byte 0xd
 .byte 0xa
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_4084 :.long      0x2
        .long      0x2
str__hla_4084:

 .ascii " :"
 .byte 0

 .byte 0

        .align (2)
len__hla_4087 :.long      0x6
        .long      0x6
str__hla_4087:

 .ascii "static"
 .byte 0

 .byte 0

        .align (2)
len__hla_4090 :.long      0x8
        .long      0x8
str__hla_4090:

 .ascii "external"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4091 :.long      0x6
        .long      0x6
str__hla_4091:

 .ascii "public"
 .byte 0

 .byte 0

        .align (2)
len__hla_4092 :.long      0x4
        .long      0x4
str__hla_4092:

 .ascii "????"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4093 :.long      0x19
        .long      0x19
str__hla_4093:

 .ascii "Code Section Relocations:"
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_4094 :.long      0x19
        .long      0x19
str__hla_4094:

 .ascii "Data Section Relocations:"
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_4113 :.long      0x1f
        .long      0x1f
str__hla_4113:

 .ascii "generateELF:"
 .byte 0xd
 .byte 0xa

 .ascii "Input filename:  "
 .byte 0


        .align (2)
len__hla_4114 :.long      0x9
        .long      0x9
str__hla_4114:

 .ascii ".shstrtab"
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_4115 :.long      0x7
        .long      0x7
str__hla_4115:

 .ascii ".symtab"
 .byte 0


        .align (2)
len__hla_4116 :.long      0x7
        .long      0x7
str__hla_4116:

 .ascii ".strtab"
 .byte 0


        .align (2)
len__hla_4117 :.long      0x9
        .long      0x9
str__hla_4117:

 .ascii ".rel.text"
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_4118 :.long      0x9
        .long      0x9
str__hla_4118:

 .ascii ".rel.data"
 .byte 0

 .byte 0
 .byte 0

        .align (2)
len__hla_4141 :.long      0x1f
        .long      0x1f
str__hla_4141:

 .ascii "Unknown ELF format specified!"
 .byte 0xd
 .byte 0xa
 .byte 0


        .align (2)
len__hla_4165 :.long      0x3f
        .long      0x3f
str__hla_4165:

 .ascii "Mach-O output is not yet supported by HLABE -- compile failed"
 .byte 0xd
 .byte 0xa
 .byte 0


        .align (2)
len__hla_4171 :.long      0x48
        .long      0x48
str__hla_4171:

 .ascii "------------"
 .byte 0xd
 .byte 0xa

 .ascii "HLA Back Engine Object code formatter"
 .byte 0xd
 .byte 0xa
 .byte 0xd
 .byte 0xa

 .ascii "HLABE compiling '"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .align (2)
len__hla_4172 :.long      0x6
        .long      0x6
str__hla_4172:

 .ascii "' to '"
 .byte 0

 .byte 0

        .align (2)
len__hla_4173 :.long      0x3
        .long      0x3
str__hla_4173:

 .ascii "'"
 .byte 0xd
 .byte 0xa
 .byte 0


        .align (2)
len__hla_4182 :.long      0x38
        .long      0x38
str__hla_4182:

 .ascii "Illegal object-code format specified -- compile failed"
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0
 .byte 0
 .byte 0
jmpTbl__hla_4176:
        .long      (case__hla_4177+0)
        .long      (case__hla_4178+0)
        .long      (case__hla_4179+0)
        .long      (case__hla_4180+0)
        .long      (case__hla_4181+0)

        .align (2)
len__hla_4184 :.long      0x12
        .long      0x12
str__hla_4184:

 .ascii "Symbol table: "
 .byte 0xd
 .byte 0xa
 .byte 0xd
 .byte 0xa
 .byte 0

 .byte 0

        .align (2)
len__hla_4190 :.long      0x3
        .long      0x3
str__hla_4190:

 .ascii "  $"
 .byte 0


        .align (2)
len__hla_4191 :.long      0x6
        .long      0x6
str__hla_4191:

 .ascii ", sec:"
 .byte 0

 .byte 0
idSet__hla_3392 :.byte  0x0,0x0,0x0,0x0,0x10,0x40,0xff,0x83,0xff,0xff,0xff,0x87,0xfe,0xff,0xff,0x7
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
        .byte      0x0
filenameDelims__hla_3570 :.byte  0xff,0xff,0xff,0xff,0x1,0x10,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
_0e1a_msg___hla_3611 :.long  str__hla_3612
_0e23_msg___hla_3620 :.long  str__hla_3621
_0e30_msg___hla_3633 :.long  str__hla_3634
_0e3b_msg___hla_3644 :.long  str__hla_3645
_0e44_msg___hla_3653 :.long  str__hla_3654
_0e56_msg___hla_3671 :.long  str__hla_3672
_0fa1_msg___hla_4002 :.long  str__hla_4003

/* procedure DfltExHndlr__hla_ */

DfltExHndlr__hla_:
        pushl      %ebp 
        movl       %esp, %ebp 
        jmp        DefaultExceptionHandler__hla_
xDfltExHndlr__hla___hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure freeTableRecord__hla_3332 */

freeTableRecord__hla_3332:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      4(%ebx) 
        call       MEM_FREE
xfreeTableRecord__hla_3332__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure printLineNumberChain */

printLineNumberChain:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        mov        25(%ebx), %ebx 
        jmp        continue__hla_3340
while__hla_3340:
        pushl      $9 
        call       STDERR_PUTC
        pushl      4(%ebx) 
        call       STDERR_PUTS
        pushl      $58 
        call       STDERR_PUTC
        pushl      8(%ebx) 
        call       STDERR_PUTU32
        mov        (%ebx), %ebx 
        cmpl       $0, %ebx 
        je         false__hla_3342
        pushl      $str__hla_3343 
        call       STDERR_PUTS
false__hla_3342:
continue__hla_3340:
        cmpl       $0, %ebx 
        jne        while__hla_3340
exitloop__hla_3340:

        call       STDERR_NEWLN
        popl       %ebx 
xprintLineNumberChain__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure skipToEoln__hla_3359 */

skipToEoln__hla_3359:
        jmp        continue__hla_3362
while__hla_3362:
        incl       %ebx 
continue__hla_3362:
        cmpl       end_source__hla_3355, %ebx 
        jnb        L3364__hla_
        cmpb       $10, (%ebx) 
        jne        while__hla_3362
L3364__hla_:
exitloop__hla_3362:

        incl       %ebx 
        incl       lineNumber__hla_3349 
        ret

/* procedure skipSpaces__hla_3370 */

skipSpaces__hla_3370:
        decl       %ebx 

skipSpcs__hla_3373:
        incl       %ebx 
        cmpl       end_source__hla_3355, %ebx 
        jae        skippedSpaces__hla_3374
        mov        (%ebx), %al 
        cmpb       $32, %al 
        je         skipSpcs__hla_3373
        cmpb       $9, %al 
        je         skipSpcs__hla_3373
        cmpb       $13, %al 
        je         skipSpcs__hla_3373

skippedSpaces__hla_3374:
        ret

/* procedure skipSpaces2__hla_3380 */

skipSpaces2__hla_3380:
        decl       %ebx 

skipSpcs__hla_3383:
        incl       %ebx 
        cmpl       end_source__hla_3355, %ebx 
        jae        skippedSpaces__hla_3384
        mov        (%ebx), %al 
        cmpb       $32, %al 
        je         skipSpcs__hla_3383
        cmpb       $9, %al 
        je         skipSpcs__hla_3383
        cmpb       $13, %al 
        je         skipSpcs__hla_3383
        ret

skippedSpaces__hla_3384:
        pushl      $str__hla_3385 
        call       STDOUT_PUTS
        mov        $20, %eax 
        jmp        Raise__hla_

/* procedure grabID__hla_3391 */

grabID__hla_3391:
        mov        4(%esp), %ecx 
forever__hla_3396:
continue__hla_3395:
        cmpl       end_source__hla_3355, %ebx 
        jae        exitloop__hla_3395
        movzbl     (%ebx), %eax 
        btl        %eax, idSet__hla_3392 
        jnc        exitloop__hla_3395
        mov        %al, (%ecx) 
        incl       %ebx 
        incl       %ecx 
        jmp        forever__hla_3396
exitloop__hla_3395:

        movb       $0, (%ecx) 
        mov        4(%esp), %edx 
        subl       %edx, %ecx 
        mov        %ecx, -4(%edx) 
        pushl      %esi 
        pushl      %edi 
false__hla_3399:
repeat__hla_3399:
        pushl      %edx 
        movl       $equatesTable, %esi 
        mov        (%esi), %edi 
        call *     8(%edi) 
        cmpl       $0, %eax 
        je         false__hla_3400
        mov        4(%eax), %eax 
        pushl      %eax 
        pushl      %edx 
        call       STR_CPY
false__hla_3400:
continue__hla_3399:
        cmpl       $0, %eax 
        jne        repeat__hla_3399
exitloop__hla_3399:

        popl       %edi 
        popl       %esi 
        cmpl       end_source__hla_3355, %ebx 
        setb       %al 
        movzbl     %al, %eax 
        ret        $4

/* procedure unknownStmt__hla_3406 */

unknownStmt__hla_3406:
        pushl      $str__hla_3409 
        call       STDOUT_PUTS
        mov        start_stmt__hla_3356, %ebx 
        jmp        continue__hla_3410
while__hla_3410:
        pushl      (%ebx) 
        call       STDOUT_PUTC
        incl       %ebx 
continue__hla_3410:
        cmpl       end_source__hla_3355, %ebx 
        jnb        L3412__hla_
        cmpb       $10, (%ebx) 
        jne        while__hla_3410
L3412__hla_:
exitloop__hla_3410:

        incl       %ebx 
        incl       lineNumber__hla_3349 
        call       STDOUT_NEWLN
        ret

/* procedure getOperand__hla_3421 */

getOperand__hla_3421:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $1028, %esp 
        pushl      %esi 
        call       skipSpaces2__hla_3380
        movzbl     (%ebx), %eax 
        cmpl       $36, %eax 
        jl         default__hla_3424
        cmpl       $122, %eax 
        jg         default__hla_3424
        jmp *      jmpTbl__hla_3424-144(,%eax,4) 
case__hla_3425:
        lea        1(%ebx), %esi 
        call       CONV_ATOH32
        movl       %esi, %ebx 
        xorl       %edx, %edx 
        jmp        endswitch__hla_3424
case__hla_3426:
        lea        (%ebx), %esi 
        call       CONV_ATOU32
        movl       %esi, %ebx 
        xorl       %edx, %edx 
        jmp        endswitch__hla_3424
case__hla_3427:
        pushl      %ebp 
        addl       $-1028, (%esp) 
        pushl      $1024 
        call       STR_INIT
        mov        %eax, -4(%ebp) 
        pushl      -4(%ebp) 
        call       grabID__hla_3391
        pushl      -4(%ebp) 
        movl       $symbolTable, %esi 
        mov        (%esi), %edi 
        call *     4(%edi) 
        cmpl       $0, 4(%eax) 
        jne        false__hla_3428
        movl       %eax, %edx 
        pushl      $20 
        call       MEM_ALLOC
        mov        %eax, 4(%edx) 
        movb       $4, 17(%eax) 
        mov        8(%edx), %ecx 
        mov        %ecx, 4(%eax) 
        movl       $0, 12(%eax) 
        movl       $0, (%eax) 
        movb       $0, 16(%eax) 
        jmp        endif__hla_3428
false__hla_3428:
        mov        4(%eax), %edx 
        orb        $4, 17(%edx) 
        movl       %eax, %edx 
endif__hla_3428:
        xorl       %eax, %eax 
        jmp        endswitch__hla_3424
case__hla_3429:
        addl       $1, %ebx 
        call       RelExpr__hla_3418
        pushl      %eax 
        call       skipSpaces2__hla_3380
        cmpb       $41, %al 
        je         false__hla_3430
        pushl      $str__hla_3431 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $9, %eax 
        jmp        Raise__hla_
false__hla_3430:
        addl       $1, %ebx 
        popl       %eax 
        jmp        endswitch__hla_3424
default__hla_3424:
        pushl      $str__hla_3432 
        call       STDOUT_PUTS
        pushl      %eax 
        call       STDOUT_PUTC
        pushl      $str__hla_3433 
        call       STDOUT_PUTS
        pushl      lineNumber__hla_3349 
        call       STDOUT_PUTU32
        call       STDOUT_NEWLN
        mov        $20, %eax 
        jmp        Raise__hla_
endswitch__hla_3424:
        popl       %esi 
xgetOperand__hla_3421__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure RelExpr__hla_3418 */

RelExpr__hla_3418:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $8, %esp 
        call       getOperand__hla_3421
        mov        %eax, -4(%ebp) 
        mov        %edx, -8(%ebp) 
forever__hla_3440:
continue__hla_3439:
        movzbl     (%ebx), %eax 
        cmpl       $43, %eax 
        je         case__hla_3442
        cmpl       $45, %eax 
        je         case__hla_3445
        jmp        default__hla_3441
case__hla_3442:
        addl       $1, %ebx 
        call       getOperand__hla_3421
        cmpl       $0, %edx 
        je         false__hla_3443
        pushl      $str__hla_3444 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3443:
        addl       %eax, -4(%ebp) 
        jmp        endswitch__hla_3441
case__hla_3445:
        addl       $1, %ebx 
        call       getOperand__hla_3421
        cmpl       $0, %edx 
        je         false__hla_3446
        pushl      $str__hla_3444 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3446:
        negl       %eax 
        addl       %eax, -4(%ebp) 
        jmp        endswitch__hla_3441
default__hla_3441:
        jmp        exitloop__hla_3439
endswitch__hla_3441:
        jmp        forever__hla_3440
exitloop__hla_3439:

        mov        -4(%ebp), %eax 
        mov        -8(%ebp), %edx 
xRelExpr__hla_3418__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure EvalExpr__hla_3452 */

EvalExpr__hla_3452:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %edx 
        call       RelExpr__hla_3418
        cmpl       $0, %edx 
        je         false__hla_3455
        pushl      $str__hla_3456 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3455:
        popl       %edx 
xEvalExpr__hla_3452__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure parseBytes__hla_3462 */

parseBytes__hla_3462:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $12, %esp 
        call       skipSpaces2__hla_3380
        cmpb       $34, (%ebx) 
        jne        false__hla_3465
        addl       $1, %ebx 
        mov        %ebx, -4(%ebp) 
        jmp        continue__hla_3466
while__hla_3466:
        addl       $1, %ebx 
continue__hla_3466:
        cmpb       $34, (%ebx) 
        jne        while__hla_3466
exitloop__hla_3466:

        mov        %ebx, -8(%ebp) 
        call       skipSpaces2__hla_3380
        cmpb       $44, (%ebx) 
        jne        false__hla_3468
        addl       $1, %ebx 
        mov        -8(%ebp), %eax 
        subl       -4(%ebp), %eax 
        addl       8(%ebp), %eax 
        pushl      %eax 
        call       parseBytes__hla_3462
        jmp        endif__hla_3468
false__hla_3468:
        mov        -8(%ebp), %ecx 
        subl       -4(%ebp), %ecx 
        addl       8(%ebp), %ecx 
        addl       $17, %ecx 
        pushl      %ecx 
        call       MEM_ALLOC
        subl       $17, %ecx 
        pushl      %edx 
        mov        tknListTail__hla_3350, %edx 
        movb       $2, 8(%eax) 
        movl       $0, 4(%eax) 
        mov        %edx, (%eax) 
        mov        %eax, 4(%edx) 
        mov        %ecx, 13(%eax) 
        mov        %eax, tknListTail__hla_3350 
        popl       %edx 
        addl       $17, %eax 
endif__hla_3468:
        pushl      %esi 
        pushl      %edi 
        pushl      %ecx 
        cld
        mov        -4(%ebp), %esi 
        movl       %eax, %edi 
        addl       8(%ebp), %edi 
        mov        -8(%ebp), %ecx 
        subl       %esi, %ecx 
        rep movsb
        popl       %ecx 
        popl       %edi 
        popl       %esi 
        jmp        endif__hla_3465
false__hla_3465:
        call       EvalExpr__hla_3452
        cmpl       $256, %eax 
        jnae       false__hla_3469
        pushl      $str__hla_3470 
        call       STDOUT_PUTS
        mov        $8, %eax 
        jmp        Raise__hla_
false__hla_3469:
        mov        %al, -9(%ebp) 
        call       skipSpaces2__hla_3380
        cmpb       $44, (%ebx) 
        jne        false__hla_3471
        addl       $1, %ebx 
        mov        8(%ebp), %eax 
        addl       $1, %eax 
        pushl      %eax 
        call       parseBytes__hla_3462
        jmp        endif__hla_3471
false__hla_3471:
        mov        8(%ebp), %ecx 
        addl       $18, %ecx 
        pushl      %ecx 
        call       MEM_ALLOC
        subl       $17, %ecx 
        pushl      %edx 
        mov        tknListTail__hla_3350, %edx 
        movb       $2, 8(%eax) 
        movl       $0, 4(%eax) 
        mov        %edx, (%eax) 
        mov        %eax, 4(%edx) 
        mov        %ecx, 13(%eax) 
        mov        %eax, tknListTail__hla_3350 
        popl       %edx 
        addl       $17, %eax 
endif__hla_3471:
        pushl      %ebx 
        pushl      %edx 
        mov        -9(%ebp), %bl 
        mov        8(%ebp), %edx 
        mov        %bl, (%eax,%edx,1) 
        popl       %edx 
        popl       %ebx 
endif__hla_3465:
xparseBytes__hla_3462__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $4

/* procedure parseWords__hla_3477 */

parseWords__hla_3477:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $12, %esp 
        pushl      %edx 
        call       skipSpaces2__hla_3380
        call       EvalExpr__hla_3452
        cmpl       $65536, %eax 
        jnae       false__hla_3480
        pushl      $str__hla_3481 
        call       STDOUT_PUTS
        mov        $8, %eax 
        jmp        Raise__hla_
false__hla_3480:
        mov        %ax, -10(%ebp) 
        call       skipSpaces2__hla_3380
        cmpb       $44, (%ebx) 
        jne        false__hla_3482
        addl       $1, %ebx 
        mov        8(%ebp), %eax 
        addl       $2, %eax 
        pushl      %eax 
        call       parseWords__hla_3477
        jmp        endif__hla_3482
false__hla_3482:
        mov        8(%ebp), %ecx 
        addl       $19, %ecx 
        pushl      %ecx 
        call       MEM_ALLOC
        subl       $17, %ecx 
        mov        tknListTail__hla_3350, %edx 
        movb       $2, 8(%eax) 
        movl       $0, 4(%eax) 
        mov        %edx, (%eax) 
        mov        %eax, 4(%edx) 
        mov        %ecx, 13(%eax) 
        mov        %eax, tknListTail__hla_3350 
        addl       $17, %eax 
        pushl      %ebx 
        mov        -10(%ebp), %bx 
        mov        8(%ebp), %edx 
        mov        %bx, (%eax,%edx,1) 
        popl       %ebx 
endif__hla_3482:
        popl       %edx 
xparseWords__hla_3477__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $4

/* procedure parseDwords__hla_3488 */

parseDwords__hla_3488:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $16, %esp 
        pushl      %edx 
        call       skipSpaces2__hla_3380
        call       RelExpr__hla_3418
        mov        %eax, -12(%ebp) 
        cmpl       $0, %edx 
        jne        false__hla_3491
        pushl      $21 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %edx 
        movb       $2, 8(%eax) 
        movl       $0, 4(%eax) 
        mov        %edx, (%eax) 
        mov        %eax, 4(%edx) 
        movl       $4, 13(%eax) 
        mov        %eax, tknListTail__hla_3350 
        mov        -12(%ebp), %edx 
        mov        %edx, 17(%eax) 
        clc
        jmp        endif__hla_3491
false__hla_3491:
        pushl      $21 
        call       MEM_ALLOC
        pushl      %edx 
        mov        tknListTail__hla_3350, %edx 
        movb       $4, 8(%eax) 
        movl       $0, 4(%eax) 
        mov        %edx, (%eax) 
        mov        %eax, 4(%edx) 
        mov        %eax, tknListTail__hla_3350 
        popl       %edx 
        mov        %edx, 13(%eax) 
        mov        -12(%ebp), %edx 
        mov        %edx, 17(%eax) 
        stc
endif__hla_3491:
        popl       %edx 
xparseDwords__hla_3488__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $4

/* procedure EvalQWord__hla_3500 */

EvalQWord__hla_3500:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        mov        (%ebx), %al 
        cmpb       $36, %al 
        jne        false__hla_3503
        addl       $1, %ebx 
        lea        (%ebx), %esi 
        call       CONV_ATOH64
        movl       %esi, %ebx 
        jmp        endif__hla_3503
false__hla_3503:
        lea        (%ebx), %esi 
        call       CONV_ATOU64
        movl       %esi, %ebx 
endif__hla_3503:
        popl       %esi 
xEvalQWord__hla_3500__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure parseQWords__hla_3497 */

parseQWords__hla_3497:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $16, %esp 
        pushl      %edx 
        call       skipSpaces2__hla_3380
        call       EvalQWord__hla_3500
        mov        %eax, -16(%ebp) 
        mov        %edx, -12(%ebp) 
        call       skipSpaces2__hla_3380
        cmpb       $44, (%ebx) 
        jne        false__hla_3509
        addl       $1, %ebx 
        mov        8(%ebp), %eax 
        addl       $8, %eax 
        pushl      %eax 
        call       parseQWords__hla_3497
        jmp        endif__hla_3509
false__hla_3509:
        mov        8(%ebp), %ecx 
        addl       $25, %ecx 
        pushl      %ecx 
        call       MEM_ALLOC
        subl       $17, %ecx 
        mov        tknListTail__hla_3350, %edx 
        movb       $2, 8(%eax) 
        movl       $0, 4(%eax) 
        mov        %edx, (%eax) 
        mov        %eax, 4(%edx) 
        mov        %ecx, 13(%eax) 
        mov        %eax, tknListTail__hla_3350 
        addl       $17, %eax 
        pushl      %ebx 
        mov        -16(%ebp), %ebx 
        mov        8(%ebp), %edx 
        mov        %ebx, (%eax,%edx,1) 
        mov        -12(%ebp), %ebx 
        mov        %ebx, 4(%eax,%edx,1) 
        popl       %ebx 
endif__hla_3509:
        popl       %edx 
xparseQWords__hla_3497__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $4

/* procedure EvalTByte__hla_3518 */

EvalTByte__hla_3518:
        pushl      %esi 
        mov        (%ebx), %al 
        cmpb       $36, %al 
        jne        false__hla_3521
        addl       $1, %ebx 
        lea        (%ebx), %esi 
        pushl      %ebp 
        addl       $-24, (%esp) 
        call       CONV_ATOH80
        movl       %esi, %ebx 
        jmp        endif__hla_3521
false__hla_3521:
        lea        (%ebx), %esi 
        pushl      %ebp 
        addl       $-24, (%esp) 
        call       CONV_ATOU128
        movl       %esi, %ebx 
        movzwl     -14(%ebp), %eax 
        orl        -12(%ebp), %eax 
        testl      %eax, %eax 
        je         false__hla_3522
        pushl      $str__hla_3523 
        call       STDOUT_PUTS
        mov        $8, %eax 
        jmp        Raise__hla_
false__hla_3522:
endif__hla_3521:
        popl       %esi 
        ret

/* procedure parseTBytes__hla_3515 */

parseTBytes__hla_3515:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $24, %esp 
        pushl      %edx 
        call       skipSpaces2__hla_3380
        call       EvalTByte__hla_3518
        call       skipSpaces2__hla_3380
        cmpb       $44, (%ebx) 
        jne        false__hla_3529
        addl       $1, %ebx 
        mov        8(%ebp), %eax 
        addl       $10, %eax 
        pushl      %eax 
        call       parseTBytes__hla_3515
        jmp        endif__hla_3529
false__hla_3529:
        mov        8(%ebp), %ecx 
        addl       $27, %ecx 
        pushl      %ecx 
        call       MEM_ALLOC
        subl       $17, %ecx 
        mov        tknListTail__hla_3350, %edx 
        movb       $2, 8(%eax) 
        movl       $0, 4(%eax) 
        mov        %edx, (%eax) 
        mov        %eax, 4(%edx) 
        mov        %ecx, 13(%eax) 
        mov        %eax, tknListTail__hla_3350 
        addl       $17, %eax 
        pushl      %ebx 
        mov        -24(%ebp), %ebx 
        mov        8(%ebp), %edx 
        mov        %ebx, (%eax,%edx,1) 
        mov        -20(%ebp), %ebx 
        mov        %ebx, 4(%eax,%edx,1) 
        mov        -16(%ebp), %bx 
        mov        %bx, 8(%eax,%edx,1) 
        popl       %ebx 
endif__hla_3529:
        popl       %edx 
xparseTBytes__hla_3515__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $4

/* procedure EvalLWord__hla_3538 */

EvalLWord__hla_3538:
        pushl      %esi 
        mov        (%ebx), %al 
        cmpb       $36, %al 
        jne        false__hla_3541
        addl       $1, %ebx 
        lea        (%ebx), %esi 
        pushl      %ebp 
        addl       $-24, (%esp) 
        call       CONV_ATOH128
        movl       %esi, %ebx 
        jmp        endif__hla_3541
false__hla_3541:
        lea        (%ebx), %esi 
        pushl      %ebp 
        addl       $-24, (%esp) 
        call       CONV_ATOU128
        movl       %esi, %ebx 
endif__hla_3541:
        popl       %esi 
        ret

/* procedure parseLWords__hla_3535 */

parseLWords__hla_3535:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $24, %esp 
        pushl      %edx 
        call       skipSpaces2__hla_3380
        call       EvalLWord__hla_3538
        call       skipSpaces2__hla_3380
        cmpb       $44, (%ebx) 
        jne        false__hla_3547
        addl       $1, %ebx 
        mov        8(%ebp), %eax 
        addl       $16, %eax 
        pushl      %eax 
        call       parseTBytes__hla_3515
        jmp        endif__hla_3547
false__hla_3547:
        mov        8(%ebp), %ecx 
        addl       $33, %ecx 
        pushl      %ecx 
        call       MEM_ALLOC
        subl       $17, %ecx 
        mov        tknListTail__hla_3350, %edx 
        movb       $2, 8(%eax) 
        movl       $0, 4(%eax) 
        mov        %edx, (%eax) 
        mov        %eax, 4(%edx) 
        mov        %ecx, 13(%eax) 
        mov        %eax, tknListTail__hla_3350 
        addl       $17, %eax 
        pushl      %ebx 
        mov        -24(%ebp), %ebx 
        mov        8(%ebp), %edx 
        mov        %ebx, (%eax,%edx,1) 
        mov        -20(%ebp), %ebx 
        mov        %ebx, 4(%eax,%edx,1) 
        mov        -16(%ebp), %ebx 
        mov        %ebx, 8(%eax,%edx,1) 
        mov        -12(%ebp), %ebx 
        mov        %ebx, 12(%eax,%edx,1) 
        popl       %ebx 
endif__hla_3547:
        popl       %edx 
xparseLWords__hla_3535__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $4

/* procedure coalesce__hla_3553 */

coalesce__hla_3553:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $32, %esp 
        mov        %eax, -16(%ebp) 
        mov        %ecx, -20(%ebp) 
        mov        %edx, -24(%ebp) 
        mov        %esi, -28(%ebp) 
        mov        %edi, -32(%ebp) 
        cld
        mov        8(%ebp), %edx 
        mov        (%edx), %esi 
        mov        %esi, -8(%ebp) 
        mov        (%esi), %eax 
        mov        %eax, -4(%ebp) 
        mov        13(%edx), %ecx 
        addl       13(%esi), %ecx 
        mov        %ecx, -12(%ebp) 
        addl       $17, %ecx 
        pushl      %ecx 
        call       MEM_ALLOC
        mov        13(%esi), %ecx 
        addl       $17, %ecx 
        movl       %eax, %edi 
        rep movsb
        mov        -12(%ebp), %ecx 
        mov        %ecx, 13(%eax) 
        mov        8(%ebp), %esi 
        mov        13(%esi), %ecx 
        addl       $17, %esi 
        rep movsb
        mov        -4(%ebp), %edx 
        mov        %eax, 4(%edx) 
        mov        %edx, (%eax) 
        movl       $0, 4(%eax) 
        mov        %eax, tknListTail__hla_3350 
        pushl      8(%ebp) 
        call       MEM_FREE
        pushl      -8(%ebp) 
        call       MEM_FREE
        mov        -16(%ebp), %eax 
        mov        -20(%ebp), %ecx 
        mov        -24(%ebp), %edx 
        mov        -28(%ebp), %esi 
        mov        -32(%ebp), %edi 
xcoalesce__hla_3553__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $4

/* procedure initStmt__hla_3561 */

initStmt__hla_3561:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ecx 
        pushl      8(%ebp) 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %ecx 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        mov        %eax, 4(%ecx) 
        mov        %eax, tknListTail__hla_3350 
        popl       %ecx 
xinitStmt__hla_3561__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $4

/* procedure parseSourceFileList__hla_3569 */

parseSourceFileList__hla_3569:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %edx 
        call       skipSpaces2__hla_3380
        cmpb       $59, (%ebx) 
        jne        false__hla_3573
        pushl      %ecx 
        pushl      %esi 
        pushl      %edi 
        addl       $1, %ebx 
        call       skipSpaces2__hla_3380
        movl       %ebx, %ecx 
        subl       $1, %ebx 
false__hla_3574:
repeat__hla_3574:
        addl       $1, %ebx 
        movzbl     (%ebx), %eax 
        btl        %eax, filenameDelims__hla_3570 
continue__hla_3574:
        jnc        repeat__hla_3574
exitloop__hla_3574:

        movl       %ebx, %eax 
        subl       %ecx, %eax 
        cmpl       $512, %eax 
        jna        false__hla_3575
        pushl      $str__hla_3576 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $8, %eax 
        jmp        Raise__hla_
false__hla_3575:
        pushl      $12 
        call       MEM_ALLOC
        mov        8(%ebp), %edx 
        mov        %eax, (%edx) 
        movl       %eax, %edx 
        pushl      %ecx 
        pushl      %ebx 
        call       STR_A_BUFTOSTR2
        addl       $1, %ebx 
        mov        %eax, 4(%edx) 
        cmpb       $44, (%ebx) 
        jne        false__hla_3577
        addl       $1, %ebx 
false__hla_3577:
        call       skipSpaces2__hla_3380
        movl       %ebx, %esi 
        call       CONV_ATOU32
        movl       %esi, %ebx 
        mov        %eax, 8(%edx) 
        movl       $0, (%edx) 
        lea        (%edx), %eax 
        popl       %edi 
        popl       %esi 
        popl       %ecx 
        pushl      %eax 
        call       parseSourceFileList__hla_3569
        jmp        endif__hla_3573
false__hla_3573:
        mov        8(%ebp), %edx 
        movl       $0, (%edx) 
endif__hla_3573:
        popl       %edx 
xparseSourceFileList__hla_3569__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $4

/* procedure getDisp__hla_3583 */

getDisp__hla_3583:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %eax 
        call       skipSpaces__hla_3370
        call       RelExpr__hla_3418
        popl       %ecx 
        mov        %eax, 21(%ecx) 
        mov        %edx, 17(%ecx) 
        movl       $0, 13(%ecx) 
        lea        25(%ecx), %eax 
        pushl      %eax 
        call       parseSourceFileList__hla_3569
        call       skipToEoln__hla_3359
xgetDisp__hla_3583__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure emitDummy__hla_3591 */

emitDummy__hla_3591:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %eax 
        pushl      %ecx 
        pushl      $13 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 4(%ecx) 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        movb       $20, 8(%eax) 
        mov        %eax, tknListTail__hla_3350 
        popl       %ecx 
        popl       %eax 
xemitDummy__hla_3591__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure lexer */

lexer:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $5144, %esp 
        movl       $0, -12(%ebp) 
        movl       $0, -4(%ebp) 
        pushl      %ebp 
        addl       $-1036, (%esp) 
        pushl      $1024 
        call       STR_INIT
        mov        %eax, -8(%ebp) 
        mov        20(%ebp), %eax 
        mov        %eax, end_source__hla_3355 
        pushl      $13 
        call       MEM_ALLOC
        movl       $0, 4(%eax) 
        movl       $0, (%eax) 
        movb       $0, 8(%eax) 
        mov        %eax, -5136(%ebp) 
        mov        %eax, codeListTail__hla_3352 
        mov        %eax, tknListTail__hla_3350 
        movl       $codeListTail__hla_3352, lastTailPtr__hla_3351 
        movb       $1, currentSection 
        pushl      $13 
        call       MEM_ALLOC
        movl       $0, 4(%eax) 
        movl       $0, (%eax) 
        movb       $0, 8(%eax) 
        mov        %eax, -5140(%ebp) 
        mov        %eax, dataListTail__hla_3353 
        pushl      $13 
        call       MEM_ALLOC
        movl       $0, 4(%eax) 
        movl       $0, (%eax) 
        movb       $0, 8(%eax) 
        mov        %eax, -5144(%ebp) 
        mov        %eax, bssListTail__hla_3354 
        mov        24(%ebp), %ebx 
forever__hla_3600:
continue__hla_3599:
        mov        %ebx, start_stmt__hla_3356 
        decl       %ebx 

skipSpcs__hla_3601:
        incl       %ebx 
        cmpl       end_source__hla_3355, %ebx 
        jae        exitloop__hla_3599
        mov        (%ebx), %al 
        cmpb       $32, %al 
        je         skipSpcs__hla_3601
        cmpb       $9, %al 
        je         skipSpcs__hla_3601
        cmpb       $13, %al 
        je         skipSpcs__hla_3601
        cmpb       $10, %al 
        jne        false__hla_3603
        incl       %ebx 
        incl       lineNumber__hla_3349 
        jmp        continue__hla_3599
false__hla_3603:
        cmpb       $59, %al 
        jne        false__hla_3604
        call       skipToEoln__hla_3359
        jmp        continue__hla_3599
false__hla_3604:
        cmpb       $46, %al 
        jne        false__hla_3605
        addl       $1, %ebx 
        movzbl     (%ebx), %eax 
        cmpl       $97, %eax 
        jl         default__hla_3606
        cmpl       $122, %eax 
        jg         default__hla_3606
        jmp *      jmpTbl__hla_3606-388(,%eax,4) 
case__hla_3607:
        pushl      $17 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 4(%ecx) 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        movb       $1, 8(%eax) 
        mov        %eax, tknListTail__hla_3350 
        addl       $1, %ebx 
        call       EvalExpr__hla_3452
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 13(%ecx) 
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3608:
        addl       $1, %ebx 
        pushl      $0 
        call       parseBytes__hla_3462
        subl       $17, %eax 
        mov        (%eax), %ecx 
        cmpl       $0, %ecx 
        jne        _0e19_skipAssertion___hla_3613
        pushl      _0e1a_msg___hla_3611 
        popl       AssertionStr 
        mov        $12, %eax 
        jmp        Raise__hla_

_0e19_skipAssertion___hla_3613:
        cmpb       $2, 8(%ecx) 
        jne        false__hla_3614
        pushl      %eax 
        call       coalesce__hla_3553
false__hla_3614:
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3615:
        call       emitDummy__hla_3591
        movb       $1, currentSection 
        mov        lastTailPtr__hla_3351, %eax 
        mov        tknListTail__hla_3350, %ecx 
        mov        %ecx, (%eax) 
        movl       $codeListTail__hla_3352, lastTailPtr__hla_3351 
        mov        codeListTail__hla_3352, %eax 
        mov        %eax, tknListTail__hla_3350 
        pushl      $13 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 4(%ecx) 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        movb       $9, 8(%eax) 
        mov        %eax, tknListTail__hla_3350 
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3616:
        addl       $1, %ebx 
        pushl      $0 
        call       parseDwords__hla_3488
        jc         false__hla_3617
        mov        (%eax), %ecx 
        cmpl       $0, %ecx 
        jne        _0e22_skipAssertion___hla_3622
        pushl      _0e23_msg___hla_3620 
        popl       AssertionStr 
        mov        $12, %eax 
        jmp        Raise__hla_

_0e22_skipAssertion___hla_3622:
        cmpb       $2, 8(%ecx) 
        jne        false__hla_3623
        pushl      %eax 
        call       coalesce__hla_3553
false__hla_3623:
false__hla_3617:
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3624:
        addl       $1, %ebx 
        call       skipSpaces2__hla_3380
        pushl      -8(%ebp) 
        call       grabID__hla_3391
        pushl      -8(%ebp) 
        movl       $equatesTable, %esi 
        mov        (%esi), %edi 
        call *     4(%edi) 
        cmpl       $0, 4(%eax) 
        jne        false__hla_3625
        pushl      %eax 
        call       skipSpaces2__hla_3380
        cmpb       $44, (%ebx) 
        je         false__hla_3626
        pushl      $str__hla_3627 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        pushl      $str__hla_3628 
        call       STDERR_PUTS
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3626:
        addl       $1, %ebx 
        call       skipSpaces2__hla_3380
        pushl      -8(%ebp) 
        call       grabID__hla_3391
        pushl      -8(%ebp) 
        call       STR_A_CPY
        popl       %edx 
        mov        %eax, 4(%edx) 
        jmp        endif__hla_3625
false__hla_3625:
        pushl      $str__hla_3629 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
endif__hla_3625:
        jmp        endswitch__hla_3606
case__hla_3630:
        addl       $1, %ebx 
        pushl      $0 
        call       parseLWords__hla_3535
        subl       $17, %eax 
        mov        (%eax), %ecx 
        cmpl       $0, %ecx 
        jne        _0e2f_skipAssertion___hla_3635
        pushl      _0e30_msg___hla_3633 
        popl       AssertionStr 
        mov        $12, %eax 
        jmp        Raise__hla_

_0e2f_skipAssertion___hla_3635:
        cmpb       $2, 8(%ecx) 
        jne        false__hla_3636
        pushl      %eax 
        call       coalesce__hla_3553
false__hla_3636:
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3637:
        addl       $1, %ebx 
        call       skipSpaces2__hla_3380
        pushl      -8(%ebp) 
        call       grabID__hla_3391
        pushl      -8(%ebp) 
        movl       $symbolTable, %esi 
        mov        (%esi), %edi 
        call *     4(%edi) 
        cmpl       $0, 4(%eax) 
        jne        false__hla_3638
        movl       %eax, %ecx 
        pushl      $20 
        call       MEM_ALLOC
        mov        %eax, 4(%ecx) 
        movb       $2, 17(%eax) 
        movl       $0, 12(%eax) 
        movl       $0, (%eax) 
        mov        8(%ecx), %ecx 
        mov        %ecx, 4(%eax) 
        mov        currentSection, %cl 
        mov        %cl, 16(%eax) 
        jmp        endif__hla_3638
false__hla_3638:
        mov        4(%eax), %ecx 
        testb      $1, 17(%ecx) 
        jz         false__hla_3639
        pushl      $str__hla_3640 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3639:
        orb        $2, 17(%ecx) 
        mov        currentSection, %al 
        mov        %al, 16(%ecx) 
endif__hla_3638:
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3641:
        addl       $1, %ebx 
        pushl      $0 
        call       parseQWords__hla_3497
        subl       $17, %eax 
        mov        (%eax), %ecx 
        cmpl       $0, %ecx 
        jne        _0e3a_skipAssertion___hla_3646
        pushl      _0e3b_msg___hla_3644 
        popl       AssertionStr 
        mov        $12, %eax 
        jmp        Raise__hla_

_0e3a_skipAssertion___hla_3646:
        cmpb       $2, 8(%ecx) 
        jne        false__hla_3647
        pushl      %eax 
        call       coalesce__hla_3553
false__hla_3647:
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3648:
        pushl      $17 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 4(%ecx) 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        movb       $5, 8(%eax) 
        mov        %eax, tknListTail__hla_3350 
        addl       $1, %ebx 
        call       EvalExpr__hla_3452
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 13(%ecx) 
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3649:
        call       emitDummy__hla_3591
        movb       $2, currentSection 
        mov        lastTailPtr__hla_3351, %eax 
        mov        tknListTail__hla_3350, %ecx 
        mov        %ecx, (%eax) 
        movl       $dataListTail__hla_3353, lastTailPtr__hla_3351 
        mov        dataListTail__hla_3353, %eax 
        mov        %eax, tknListTail__hla_3350 
        pushl      $13 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 4(%ecx) 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        movb       $11, 8(%eax) 
        mov        %eax, tknListTail__hla_3350 
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3650:
        addl       $1, %ebx 
        pushl      $0 
        call       parseTBytes__hla_3515
        subl       $17, %eax 
        mov        (%eax), %ecx 
        cmpl       $0, %ecx 
        jne        _0e43_skipAssertion___hla_3655
        pushl      _0e44_msg___hla_3653 
        popl       AssertionStr 
        mov        $12, %eax 
        jmp        Raise__hla_

_0e43_skipAssertion___hla_3655:
        cmpb       $2, 8(%ecx) 
        jne        false__hla_3656
        pushl      %eax 
        call       coalesce__hla_3553
false__hla_3656:
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3657:
        addl       $1, %ebx 
        mov        (%ebx), %al 
        cmpb       $98, %al 
        jne        false__hla_3658
        pushl      $25 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 4(%ecx) 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        movb       $6, 8(%eax) 
        mov        %eax, tknListTail__hla_3350 
        addl       $1, %ebx 
        call       EvalExpr__hla_3452
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 17(%ecx) 
        call       skipSpaces2__hla_3380
        cmpb       $44, (%ebx) 
        je         false__hla_3659
        pushl      $str__hla_3660 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3659:
        addl       $1, %ebx 
        call       EvalExpr__hla_3452
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 21(%ecx) 
        movl       $1, 13(%ecx) 
        jmp        endif__hla_3658
false__hla_3658:
        cmpb       $119, %al 
        jne        false__hla_3661
        pushl      $25 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 4(%ecx) 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        movb       $7, 8(%eax) 
        mov        %eax, tknListTail__hla_3350 
        addl       $1, %ebx 
        call       EvalExpr__hla_3452
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 17(%ecx) 
        call       skipSpaces2__hla_3380
        cmpb       $44, (%ebx) 
        je         false__hla_3662
        pushl      $str__hla_3663 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3662:
        addl       $1, %ebx 
        call       EvalExpr__hla_3452
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 21(%ecx) 
        movl       $2, 13(%ecx) 
        jmp        endif__hla_3658
false__hla_3661:
        cmpb       $100, %al 
        jne        false__hla_3664
        pushl      $25 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 4(%ecx) 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        movb       $8, 8(%eax) 
        mov        %eax, tknListTail__hla_3350 
        addl       $1, %ebx 
        call       EvalExpr__hla_3452
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 17(%ecx) 
        call       skipSpaces2__hla_3380
        cmpb       $44, (%ebx) 
        je         false__hla_3665
        pushl      $str__hla_3666 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3665:
        addl       $1, %ebx 
        call       EvalExpr__hla_3452
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 21(%ecx) 
        movl       $4, 13(%ecx) 
        jmp        endif__hla_3658
false__hla_3664:
        call       unknownStmt__hla_3406
endif__hla_3658:
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3667:
        call       emitDummy__hla_3591
        movb       $3, currentSection 
        mov        lastTailPtr__hla_3351, %eax 
        mov        tknListTail__hla_3350, %ecx 
        mov        %ecx, (%eax) 
        movl       $bssListTail__hla_3354, lastTailPtr__hla_3351 
        mov        bssListTail__hla_3354, %eax 
        mov        %eax, tknListTail__hla_3350 
        pushl      $13 
        call       MEM_ALLOC
        mov        tknListTail__hla_3350, %ecx 
        mov        %eax, 4(%ecx) 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        movb       $12, 8(%eax) 
        mov        %eax, tknListTail__hla_3350 
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3668:
        addl       $1, %ebx 
        pushl      $0 
        call       parseWords__hla_3477
        subl       $17, %eax 
        mov        (%eax), %ecx 
        cmpl       $0, %ecx 
        jne        _0e55_skipAssertion___hla_3673
        pushl      _0e56_msg___hla_3671 
        popl       AssertionStr 
        mov        $12, %eax 
        jmp        Raise__hla_

_0e55_skipAssertion___hla_3673:
        cmpb       $2, 8(%ecx) 
        jne        false__hla_3674
        pushl      %eax 
        call       coalesce__hla_3553
false__hla_3674:
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3675:
        addl       $1, %ebx 
        call       skipSpaces2__hla_3380
        pushl      -8(%ebp) 
        call       grabID__hla_3391
        pushl      -8(%ebp) 
        movl       $symbolTable, %esi 
        mov        (%esi), %edi 
        call *     4(%edi) 
        cmpl       $0, 4(%eax) 
        jne        false__hla_3676
        movl       %eax, %ecx 
        pushl      $20 
        call       MEM_ALLOC
        mov        %eax, 4(%ecx) 
        movb       $1, 17(%eax) 
        movl       $0, 12(%eax) 
        movl       $0, (%eax) 
        mov        8(%ecx), %ecx 
        mov        %ecx, 4(%eax) 
        mov        currentSection, %cl 
        mov        %cl, 16(%eax) 
        jmp        endif__hla_3676
false__hla_3676:
        mov        4(%eax), %eax 
        testb      $10, 17(%eax) 
        jz         false__hla_3677
        pushl      $str__hla_3678 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3677:
        orb        $1, 17(%eax) 
        mov        currentSection, %cl 
        mov        %cl, 16(%eax) 
endif__hla_3676:
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
case__hla_3679:
        call       skipToEoln__hla_3359
        jmp        endswitch__hla_3606
default__hla_3606:
        call       unknownStmt__hla_3406
endswitch__hla_3606:
        jmp        endif__hla_3605
false__hla_3605:
        cmpb       $58, %al 
        jne        false__hla_3680
        addl       $1, %ebx 
        call       skipSpaces2__hla_3380
        pushl      -8(%ebp) 
        call       grabID__hla_3391
        pushl      $17 
        call       MEM_ALLOC
        movl       %eax, %edx 
        pushl      -8(%ebp) 
        movl       $symbolTable, %esi 
        mov        (%esi), %edi 
        call *     4(%edi) 
        cmpl       $0, 4(%eax) 
        jne        false__hla_3681
        movl       %eax, %ecx 
        pushl      $20 
        call       MEM_ALLOC
        mov        %eax, 4(%ecx) 
        movb       $8, 17(%eax) 
        movl       $0, 12(%eax) 
        movl       $0, (%eax) 
        mov        8(%ecx), %edx 
        mov        %edx, 4(%eax) 
        mov        currentSection, %dl 
        mov        %dl, 16(%eax) 
        movl       %ecx, %eax 
        jmp        endif__hla_3681
false__hla_3681:
        mov        4(%eax), %ecx 
        testb      $8, 17(%ecx) 
        jz         false__hla_3682
        pushl      $str__hla_3683 
        call       STDERR_PUTS
        pushl      8(%eax) 
        call       STDERR_PUTS
        pushl      $str__hla_3684 
        call       STDERR_PUTS
        pushl      lineNumber__hla_3349 
        call       STDERR_PUTU32
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3682:
        testb      $1, 17(%ecx) 
        jz         false__hla_3685
        andb       $254, 17(%ecx) 
        orb        $2, 17(%ecx) 
false__hla_3685:
        orb        $8, 17(%ecx) 
        mov        currentSection, %dl 
        mov        %dl, 16(%ecx) 
endif__hla_3681:
        movl       %eax, %edx 
        pushl      $17 
        call       MEM_ALLOC
        movb       $3, 8(%eax) 
        mov        %edx, 13(%eax) 
        mov        tknListTail__hla_3350, %ecx 
        mov        %ecx, (%eax) 
        movl       $0, 4(%eax) 
        mov        %eax, 4(%ecx) 
        mov        %eax, tknListTail__hla_3350 
        call       skipToEoln__hla_3359
        jmp        endif__hla_3605
false__hla_3680:
        lea        10(%ebx), %ecx 
        cmpl       end_source__hla_3355, %ecx 
        jna        false__hla_3686
        call       unknownStmt__hla_3406
        jmp        endif__hla_3686
false__hla_3686:
        cmpb       $106, %al 
        jne        false__hla_3687
        mov        1(%ebx), %eax 
        movl       %eax, %edx 
        bswap      %edx 
        cmpb       $32, %ah 
        jne        false__hla_3688
        cmpb       $97, %al 
        je         ja_instr__hla_3689
        cmpb       $98, %al 
        je         jb_instr__hla_3690
        cmpb       $99, %al 
        je         jc_instr__hla_3691
        cmpb       $101, %al 
        je         je_instr__hla_3692
        cmpb       $103, %al 
        je         jg_instr__hla_3693
        cmpb       $108, %al 
        je         jl_instr__hla_3694
        cmpb       $111, %al 
        je         jo_instr__hla_3695
        cmpb       $112, %al 
        je         jp_instr__hla_3696
        cmpb       $115, %al 
        je         js_instr__hla_3697
        cmpb       $122, %al 
        je         jz_instr__hla_3698
        call       unknownStmt__hla_3406
        jmp        Done__hla_3699

jnbe_instr__hla_3700:
        addl       $2, %ebx 

ja_instr__hla_3689:
        addl       $2, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $119, 29(%eax) 
        movw       $34575, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jnae_instr__hla_3701:
        addl       $2, %ebx 

jb_instr__hla_3690:

jc_instr__hla_3691:
        addl       $2, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $114, 29(%eax) 
        movw       $33295, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

je_instr__hla_3692:

jz_instr__hla_3698:
        addl       $2, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $116, 29(%eax) 
        movw       $33807, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jnle_instr__hla_3702:
        addl       $2, %ebx 

jg_instr__hla_3693:
        addl       $2, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $127, 29(%eax) 
        movw       $36623, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jnge_instr__hla_3703:
        addl       $2, %ebx 

jl_instr__hla_3694:
        addl       $2, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $124, 29(%eax) 
        movw       $35855, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jo_instr__hla_3695:
        addl       $2, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $112, 29(%eax) 
        movw       $32783, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jpe_instr__hla_3704:
        addl       $1, %ebx 

jp_instr__hla_3696:
        addl       $2, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $122, 29(%eax) 
        movw       $35343, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

js_instr__hla_3697:
        addl       $2, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $120, 29(%eax) 
        movw       $34831, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699
        jmp        endif__hla_3688
false__hla_3688:
        cmpb       $32, %dh 
        jne        false__hla_3705
        cmpw       $28781, %ax 
        je         jmp_instr__hla_3706
        cmpw       $25953, %ax 
        je         jae_instr__hla_3707
        cmpw       $25954, %ax 
        je         jbe_instr__hla_3708
        cmpw       $25959, %ax 
        je         jge_instr__hla_3709
        cmpw       $25964, %ax 
        je         jle_instr__hla_3710
        cmpw       $24942, %ax 
        je         jna_instr__hla_3711
        cmpw       $25198, %ax 
        je         jnb_instr__hla_3712
        cmpw       $25454, %ax 
        je         jnc_instr__hla_3713
        cmpw       $25966, %ax 
        je         jne_instr__hla_3714
        cmpw       $26478, %ax 
        je         jng_instr__hla_3715
        cmpw       $27758, %ax 
        je         jnl_instr__hla_3716
        cmpw       $28526, %ax 
        je         jno_instr__hla_3717
        cmpw       $28782, %ax 
        je         jnp_instr__hla_3718
        cmpw       $29550, %ax 
        je         jns_instr__hla_3719
        cmpw       $31342, %ax 
        je         jnz_instr__hla_3720
        cmpw       $25968, %ax 
        je         jpe_instr__hla_3704
        cmpw       $28528, %ax 
        je         jpo_instr__hla_3721
        call       unknownStmt__hla_3406
        jmp        Done__hla_3699

jmp_instr__hla_3706:
        pushl      $32 
        call       initStmt__hla_3561
        movb       $17, 8(%eax) 
        movb       $235, 29(%eax) 
        movb       $233, 30(%eax) 
        movb       $1, 31(%eax) 
        addl       $3, %ebx 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jnc_instr__hla_3713:

jnb_instr__hla_3712:

jae_instr__hla_3707:
        addl       $3, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $115, 29(%eax) 
        movw       $33551, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jna_instr__hla_3711:

jbe_instr__hla_3708:
        addl       $3, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $118, 29(%eax) 
        movw       $34319, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jnl_instr__hla_3716:

jge_instr__hla_3709:
        addl       $3, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $125, 29(%eax) 
        movw       $36111, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jng_instr__hla_3715:

jle_instr__hla_3710:
        addl       $3, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $126, 29(%eax) 
        movw       $36367, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jne_instr__hla_3714:

jnz_instr__hla_3720:
        addl       $3, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $117, 29(%eax) 
        movw       $34063, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jno_instr__hla_3717:
        addl       $3, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $113, 29(%eax) 
        movw       $33039, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jnp_instr__hla_3718:

jpo_instr__hla_3721:
        addl       $3, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $123, 29(%eax) 
        movw       $35599, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699

jns_instr__hla_3719:
        addl       $3, %ebx 
        pushl      $33 
        call       initStmt__hla_3561
        movb       $15, 8(%eax) 
        movb       $121, 29(%eax) 
        movw       $35087, 30(%eax) 
        movb       $1, 32(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699
        jmp        endif__hla_3688
false__hla_3705:
        cmpb       $32, %dl 
        jne        false__hla_3722
        cmpl       $543514990, %eax 
        je         jnae_instr__hla_3701
        cmpl       $543515246, %eax 
        je         jnbe_instr__hla_3700
        cmpl       $543516526, %eax 
        je         jnge_instr__hla_3703
        cmpl       $543517806, %eax 
        je         jnle_instr__hla_3702
        cmpl       $544897123, %eax 
        je         jcxz_instr__hla_3723
        call       unknownStmt__hla_3406
        jmp        Done__hla_3699

jcxz_instr__hla_3723:
        addl       $4, %ebx 
        pushl      $31 
        call       initStmt__hla_3561
        movb       $14, 8(%eax) 
        movw       $58215, 29(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699
        jmp        endif__hla_3688
false__hla_3722:
        cmpl       $2054710117, %eax 
        jne        false__hla_3724
        cmpb       $32, 5(%ebx) 
        jne        false__hla_3724
        addl       $5, %ebx 
        pushl      $30 
        call       initStmt__hla_3561
        movb       $13, 8(%eax) 
        movb       $227, 29(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699
        jmp        endif__hla_3688
false__hla_3724:
        call       unknownStmt__hla_3406
endif__hla_3688:
        jmp        endif__hla_3686
false__hla_3687:
        cmpb       $108, %al 
        jne        false__hla_3726
        lea        7(%ebx), %ecx 
        cmpl       end_source__hla_3355, %ecx 
        jnb        false__hla_3726
        cmpb       $111, 1(%ebx) 
        jne        false__hla_3726
        cmpb       $111, 2(%ebx) 
        jne        false__hla_3726
        cmpb       $112, 3(%ebx) 
        jne        false__hla_3726
        mov        4(%ebx), %al 
        cmpb       $32, %al 
        je         L3732__hla_
        cmpb       $101, %al 
        jne        L3735__hla_
        cmpb       $32, 5(%ebx) 
        je         L3732__hla_
L3735__hla_:
        cmpb       $122, %al 
        jne        L3736__hla_
        cmpb       $32, 5(%ebx) 
        je         L3732__hla_
L3736__hla_:
        mov        5(%ebx), %ah 
        cmpb       $110, %al 
        jne        false__hla_3726
        cmpb       $101, %ah 
        jne        L3739__hla_
        cmpb       $32, 6(%ebx) 
        je         L3738__hla_
L3739__hla_:
        cmpb       $122, %ah 
        jne        false__hla_3726
        cmpb       $32, 6(%ebx) 
        jne        false__hla_3726
L3738__hla_:
L3732__hla_:
        cmpb       $32, %al 
        jne        false__hla_3741
        addl       $4, %ebx 
        pushl      $30 
        call       initStmt__hla_3561
        movb       $13, 8(%eax) 
        movb       $226, 29(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699
        jmp        endif__hla_3741
false__hla_3741:
        cmpb       $101, %al 
        je         L3743__hla_
        cmpb       $122, %al 
        jne        false__hla_3742
L3743__hla_:
        addl       $5, %ebx 
        pushl      $30 
        call       initStmt__hla_3561
        movb       $13, 8(%eax) 
        movb       $225, 29(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699
        jmp        endif__hla_3741
false__hla_3742:
        cmpb       $110, %al 
        jne        false__hla_3744
        cmpb       $101, %ah 
        je         L3746__hla_
        cmpb       $122, %ah 
        jne        false__hla_3744
L3746__hla_:
        addl       $6, %ebx 
        pushl      $30 
        call       initStmt__hla_3561
        movb       $13, 8(%eax) 
        movb       $224, 29(%eax) 
        call       getDisp__hla_3583
        jmp        Done__hla_3699
        jmp        endif__hla_3741
false__hla_3744:
        call       skipToEoln__hla_3359
endif__hla_3741:
        jmp        endif__hla_3686
false__hla_3726:
        cmpb       $99, %al 
        jne        false__hla_3747
        addl       $5, %ebx 
        cmpl       end_source__hla_3355, %ebx 
        jnb        false__hla_3747
        cmpb       $97, -4(%ebx) 
        jne        false__hla_3747
        cmpb       $108, -3(%ebx) 
        jne        false__hla_3747
        cmpb       $108, -2(%ebx) 
        jne        false__hla_3747
        cmpb       $32, -1(%ebx) 
        jne        false__hla_3747
        pushl      $30 
        call       initStmt__hla_3561
        movb       $16, 8(%eax) 
        movb       $232, 29(%eax) 
        call       getDisp__hla_3583
        jmp        endif__hla_3686
false__hla_3747:
        call       unknownStmt__hla_3406
endif__hla_3686:

Done__hla_3699:
endif__hla_3605:
        jmp        forever__hla_3600
exitloop__hla_3599:

        call       emitDummy__hla_3591
xlexer__hla_:
        pushl      %edi 
        pushl      %ecx 
        mov        16(%ebp), %edi 
        mov        -5136(%ebp), %ecx 
        mov        %ecx, (%edi) 
        mov        12(%ebp), %edi 
        mov        -5140(%ebp), %ecx 
        mov        %ecx, (%edi) 
        mov        8(%ebp), %edi 
        mov        -5144(%ebp), %ecx 
        mov        %ecx, (%edi) 
        popl       %ecx 
        popl       %edi 
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $20

/* procedure addCOFFsym__hla_3758 */

addCOFFsym__hla_3758:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %esi 
        pushl      %edi 
        cld
        pushl      numCOFFsyms__hla_3312 
        imul       $18, numCOFFsyms__hla_3312, %ebx 
        movzbl     12(%ebp), %eax 
        addl       $1, %eax 
        imul       $18, %eax, %eax 
        addl       %ebx, %eax 
        cmpl       coffSymSize__hla_3313, %eax 
        jna        false__hla_3761
        shll       $1, coffSymSize__hla_3313 
        pushl      COFFsyms__hla_3311 
        pushl      coffSymSize__hla_3313 
        call       MEM_REALLOC
        mov        %eax, COFFsyms__hla_3311 
false__hla_3761:
        addl       COFFsyms__hla_3311, %ebx 
        mov        32(%ebp), %esi 
        pushl      %esi 
        call       STR_LENGTH
        movl       %eax, %ecx 
        cmpl       $8, %eax 
        jnbe       false__hla_3762
        movl       $0, (%ebx) 
        movl       $0, 4(%ebx) 
        lea        (%ebx), %edi 
        rep movsb
        jmp        endif__hla_3762
false__hla_3762:
        mov        strTblOffset__hla_3318, %edx 
        lea        1(%edx,%ecx,1), %eax 
        mov        %eax, strTblOffset__hla_3318 
        cmpl       strTblSize__hla_3319, %eax 
        jna        false__hla_3763
        pushl      %eax 
        shll       $1, strTblSize__hla_3319 
        pushl      stringTable__hla_3317 
        pushl      strTblSize__hla_3319 
        call       MEM_REALLOC
        mov        %eax, stringTable__hla_3317 
        popl       %eax 
false__hla_3763:
        movl       %edx, %edi 
        addl       stringTable__hla_3317, %edi 
        rep movsb
        movb       $0, (%edi) 
        movl       $0, (%ebx) 
        mov        %edx, 4(%ebx) 
endif__hla_3762:
        mov        28(%ebp), %eax 
        mov        %eax, 8(%ebx) 
        mov        24(%ebp), %ax 
        mov        %ax, 12(%ebx) 
        mov        20(%ebp), %ax 
        mov        %ax, 14(%ebx) 
        mov        16(%ebp), %al 
        mov        %al, 16(%ebx) 
        movzbl     12(%ebp), %eax 
        mov        %al, 17(%ebx) 
        testb      %al, %al 
        je         false__hla_3764
        mov        8(%ebp), %esi 
        imul       $18, numCOFFsyms__hla_3312, %edi 
        addl       $18, %edi 
        addl       COFFsyms__hla_3311, %edi 
        imul       $18, %eax, %ecx 
        rep movsb
false__hla_3764:
        movzbl     12(%ebp), %eax 
        addl       $1, %eax 
        addl       %eax, numCOFFsyms__hla_3312 
        popl       %eax 
        popl       %edi 
        popl       %esi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
xaddCOFFsym__hla_3758__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $28

/* procedure addELFsym__hla_3770 */

addELFsym__hla_3770:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %esi 
        pushl      %edi 
        cld
        imul       $16, numELFsyms__hla_3315, %ebx 
        lea        16(%ebx), %eax 
        cmpl       elfSymSize__hla_3316, %eax 
        jna        false__hla_3773
        shll       $1, elfSymSize__hla_3316 
        pushl      ELFsyms__hla_3314 
        pushl      elfSymSize__hla_3316 
        call       MEM_REALLOC
        mov        %eax, ELFsyms__hla_3314 
false__hla_3773:
        addl       ELFsyms__hla_3314, %ebx 
        xorl       %edx, %edx 
        mov        28(%ebp), %esi 
        cmpl       $0, %esi 
        je         false__hla_3774
        pushl      %esi 
        call       STR_LENGTH
        movl       %eax, %ecx 
        mov        strTblOffset__hla_3318, %edx 
        lea        1(%edx,%ecx,1), %eax 
        mov        %eax, strTblOffset__hla_3318 
        cmpl       strTblSize__hla_3319, %eax 
        jna        false__hla_3775
        shll       $1, strTblSize__hla_3319 
        pushl      stringTable__hla_3317 
        pushl      strTblSize__hla_3319 
        call       MEM_REALLOC
        mov        %eax, stringTable__hla_3317 
false__hla_3775:
        movl       %edx, %edi 
        addl       stringTable__hla_3317, %edi 
        rep movsb
        movb       $0, (%edi) 
false__hla_3774:
        mov        %edx, (%ebx) 
        mov        24(%ebp), %eax 
        mov        %eax, 4(%ebx) 
        mov        20(%ebp), %eax 
        mov        %eax, 8(%ebx) 
        mov        16(%ebp), %al 
        mov        %al, 12(%ebx) 
        mov        8(%ebp), %al 
        andb       $3, %al 
        mov        %al, 13(%ebx) 
        mov        12(%ebp), %ax 
        mov        %ax, 14(%ebx) 
        popl       %edi 
        popl       %esi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
xaddELFsym__hla_3770__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $24

/* procedure buildRaw__hla_3781 */

buildRaw__hla_3781:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $4, %esp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        movl       $0, -4(%ebp) 
        mov        24(%ebp), %esi 
        cmpb       $0, 8(%ebp) 
        jne        false__hla_3784
        cmpl       $65535, 20(%ebp) 
        jnae       false__hla_3785
        movl       $1, -4(%ebp) 
        addl       $10, %esi 
false__hla_3785:
false__hla_3784:
        mov        28(%ebp), %ebx 
        mov        16(%ebp), %edi 
        jmp        continue__hla_3786
while__hla_3786:
        movzbl     8(%ebx), %eax 
        cmpl       $20, %eax 
        jg         default__hla_3788
        jmp *      jmpTbl__hla_3788(,%eax,4) 
case__hla_3789:
        jmp        endswitch__hla_3788
case__hla_3790:
        mov        9(%ebx), %ecx 
        movl       %ecx, %edx 
        mov        13(%ebx), %eax 
        subl       $1, %eax 
        addl       %eax, %ecx 
        notl       %eax 
        andl       %eax, %ecx 
        subl       %edx, %ecx 
        jz         false__hla_3791
        cmpb       $1, 12(%ebp) 
        jne        false__hla_3792
        jmp        continue__hla_3793
while__hla_3793:
        mov        $2401421, %eax 
        stosl
        mov        $0, %ax 
        stosw
        stosb
        subl       $7, %ecx 
continue__hla_3793:
        cmpl       $7, %ecx 
        jae        while__hla_3793
exitloop__hla_3793:

        cmpl       $6, %ecx 
        jne        false__hla_3795
        mov        $39821, %eax 
        stosl
        mov        $0, %ax 
        stosw
false__hla_3795:
        cmpl       $5, %ecx 
        jne        false__hla_3796
        mov        $2385037, %eax 
        stosl
        mov        $144, %al 
        stosb
false__hla_3796:
        cmpl       $4, %ecx 
        jne        false__hla_3797
        mov        $2385037, %eax 
        stosl
false__hla_3797:
        cmpl       $3, %ecx 
        jne        false__hla_3798
        mov        $18829, %ax 
        stosw
        mov        $0, %al 
        stosb
false__hla_3798:
        cmpl       $2, %ecx 
        jne        false__hla_3799
        mov        $65419, %ax 
        stosw
false__hla_3799:
        cmpl       $1, %ecx 
        jne        false__hla_3800
        mov        $144, %al 
        stosb
false__hla_3800:
        jmp        endif__hla_3792
false__hla_3792:
        xorl       %eax, %eax 
        rep stosb
endif__hla_3792:
false__hla_3791:
        jmp        endswitch__hla_3788
case__hla_3801:
        cmpb       $3, 12(%ebp) 
        je         false__hla_3802
        pushl      $str__hla_3803 
        call       STDERR_PUTS
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3802:
        jmp        endswitch__hla_3788
case__hla_3804:
        pushl      %esi 
        mov        13(%ebx), %ecx 
        testl      %ecx, %ecx 
        je         false__hla_3805
        lea        17(%ebx), %esi 
        rep movsb
false__hla_3805:
        popl       %esi 
        jmp        endswitch__hla_3788
case__hla_3806:
        cmpb       $1, 12(%ebp) 
        je         false__hla_3807
        pushl      $str__hla_3808 
        call       STDERR_PUTS
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3807:
        jmp        endswitch__hla_3788
case__hla_3809:
        cmpb       $2, 12(%ebp) 
        je         false__hla_3810
        pushl      $str__hla_3811 
        call       STDERR_PUTS
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3810:
        jmp        endswitch__hla_3788
case__hla_3812:
        mov        17(%ebx), %ecx 
        mov        21(%ebx), %eax 
        cmpl       $2, 13(%ebx) 
        jb         byteDup__hla_3813
        ja         dwordDup__hla_3814
        rep stosw
        jmp        done__hla_3815

byteDup__hla_3813:
        rep stosb
        jmp        done__hla_3815

dwordDup__hla_3814:
        rep stosl

done__hla_3815:
        jmp        endswitch__hla_3788
case__hla_3816:
        mov        29(%ebx), %al 
        stosb
        mov        13(%ebx), %eax 
        stosb
        jmp        endswitch__hla_3788
case__hla_3817:
        mov        29(%ebx), %ax 
        stosw
        mov        13(%ebx), %eax 
        stosb
        jmp        endswitch__hla_3788
case__hla_3818:
        cmpb       $1, 32(%ebx) 
        jne        false__hla_3819
        mov        29(%ebx), %al 
        stosb
        mov        13(%ebx), %eax 
        stosb
        jmp        endif__hla_3819
false__hla_3819:
        mov        30(%ebx), %ax 
        stosw
        mov        13(%ebx), %eax 
        stosl
        cmpl       $0, 17(%ebx) 
        je         false__hla_3820
        mov        17(%ebx), %eax 
        mov        4(%eax), %eax 
        mov        16(%eax), %dl 
        testb      $1, 17(%eax) 
        jnz        L3822__hla_
        cmpb       12(%ebp), %dl 
        je         false__hla_3821
L3822__hla_:
        cmpb       $0, 8(%ebp) 
        jne        false__hla_3823
        mov        8(%eax), %eax 
        mov        %eax, 4(%esi) 
        mov        9(%ebx), %eax 
        addl       $2, %eax 
        mov        %eax, (%esi) 
        movw       $20, 8(%esi) 
        addl       $10, %esi 
        jmp        endif__hla_3823
false__hla_3823:
        cmpb       $3, 8(%ebp) 
        jnbe       false__hla_3824
        mov        9(%ebx), %edx 
        addl       $2, %edx 
        mov        %edx, (%esi) 
        mov        8(%eax), %eax 
        shll       $8, %eax 
        orl        $2, %eax 
        mov        %eax, 4(%esi) 
        addl       $8, %esi 
        jmp        endif__hla_3823
false__hla_3824:
        pushl      $str__hla_3825 
        call       STDERR_PUTS
endif__hla_3823:
        mov        21(%ebx), %eax 
        mov        %eax, -4(%edi) 
false__hla_3821:
false__hla_3820:
endif__hla_3819:
        jmp        endswitch__hla_3788
case__hla_3826:
        cmpb       $1, 31(%ebx) 
        jne        false__hla_3827
        mov        29(%ebx), %al 
        stosb
        mov        13(%ebx), %eax 
        stosb
        jmp        endif__hla_3827
false__hla_3827:
        mov        30(%ebx), %al 
        stosb
        mov        13(%ebx), %eax 
        stosl
        cmpl       $0, 17(%ebx) 
        je         false__hla_3828
        mov        17(%ebx), %eax 
        mov        4(%eax), %eax 
        mov        16(%eax), %dl 
        testb      $1, 17(%eax) 
        jnz        L3830__hla_
        cmpb       12(%ebp), %dl 
        je         false__hla_3829
L3830__hla_:
        cmpb       $0, 8(%ebp) 
        jne        false__hla_3831
        mov        8(%eax), %eax 
        mov        %eax, 4(%esi) 
        mov        9(%ebx), %eax 
        addl       $1, %eax 
        mov        %eax, (%esi) 
        movw       $20, 8(%esi) 
        addl       $10, %esi 
        mov        21(%ebx), %eax 
        mov        %eax, -4(%edi) 
        jmp        endif__hla_3831
false__hla_3831:
        cmpb       $3, 8(%ebp) 
        jnbe       false__hla_3832
        mov        9(%ebx), %edx 
        addl       $1, %edx 
        mov        %edx, (%esi) 
        mov        8(%eax), %edx 
        shll       $8, %edx 
        orl        $2, %edx 
        mov        %edx, 4(%esi) 
        addl       $8, %esi 
        mov        $-4, %eax 
        mov        %eax, -4(%edi) 
        jmp        endif__hla_3831
false__hla_3832:
        pushl      $str__hla_3825 
        call       STDERR_PUTS
endif__hla_3831:
false__hla_3829:
false__hla_3828:
endif__hla_3827:
        jmp        endswitch__hla_3788
case__hla_3833:
        mov        29(%ebx), %al 
        stosb
        mov        13(%ebx), %eax 
        stosl
        cmpl       $0, 17(%ebx) 
        je         false__hla_3834
        mov        17(%ebx), %eax 
        mov        4(%eax), %eax 
        mov        16(%eax), %dl 
        testb      $1, 17(%eax) 
        jnz        L3836__hla_
        cmpb       12(%ebp), %dl 
        je         false__hla_3835
L3836__hla_:
        cmpb       $0, 8(%ebp) 
        jne        false__hla_3837
        mov        8(%eax), %eax 
        mov        %eax, 4(%esi) 
        mov        9(%ebx), %eax 
        addl       $1, %eax 
        mov        %eax, (%esi) 
        movw       $20, 8(%esi) 
        addl       $10, %esi 
        mov        21(%ebx), %eax 
        mov        %eax, -4(%edi) 
        jmp        endif__hla_3837
false__hla_3837:
        cmpb       $3, 8(%ebp) 
        jnbe       false__hla_3838
        mov        9(%ebx), %edx 
        addl       $1, %edx 
        mov        %edx, (%esi) 
        mov        8(%eax), %eax 
        shll       $8, %eax 
        orl        $2, %eax 
        mov        %eax, 4(%esi) 
        addl       $8, %esi 
        mov        $-4, %eax 
        mov        %eax, -4(%edi) 
        jmp        endif__hla_3837
false__hla_3838:
        pushl      $str__hla_3825 
        call       STDERR_PUTS
endif__hla_3837:
false__hla_3835:
false__hla_3834:
        jmp        endswitch__hla_3788
case__hla_3839:
        mov        17(%ebx), %eax 
        stosl
        cmpl       $0, 13(%ebx) 
        je         false__hla_3840
        cmpb       $0, 8(%ebp) 
        jne        false__hla_3841
        mov        13(%ebx), %eax 
        mov        4(%eax), %eax 
        mov        8(%eax), %eax 
        mov        %eax, 4(%esi) 
        mov        9(%ebx), %eax 
        mov        %eax, (%esi) 
        movw       $6, 8(%esi) 
        addl       $10, %esi 
        jmp        endif__hla_3841
false__hla_3841:
        cmpb       $3, 8(%ebp) 
        jnbe       false__hla_3842
        mov        9(%ebx), %edx 
        mov        %edx, (%esi) 
        mov        13(%ebx), %eax 
        mov        4(%eax), %eax 
        mov        8(%eax), %edx 
        shll       $8, %edx 
        orl        $1, %edx 
        mov        %edx, 4(%esi) 
        addl       $8, %esi 
        jmp        endif__hla_3841
false__hla_3842:
        pushl      $str__hla_3825 
        call       STDERR_PUTS
endif__hla_3841:
false__hla_3840:
        jmp        endswitch__hla_3788
case__hla_3843:
        mov        13(%ebx), %ecx 
        testl      %ecx, %ecx 
        je         false__hla_3844
        xorl       %eax, %eax 
        rep stosb
false__hla_3844:
        jmp        endswitch__hla_3788
default__hla_3788:
        pushl      $str__hla_3845 
        call       STDERR_PUTS
        pushl      %eax 
        call       STDERR_PUTU8
        call       STDERR_NEWLN
endswitch__hla_3788:
        mov        4(%ebx), %ebx 
continue__hla_3786:
        cmpl       $0, %ebx 
        jne        while__hla_3786
exitloop__hla_3786:

        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
xbuildRaw__hla_3781__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $24

/* procedure sectionPass__hla_3856 */

sectionPass__hla_3856:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        xorl       %ecx, %ecx 
        mov        12(%ebp), %ebx 
        jmp        continue__hla_3859
while__hla_3859:
        mov        %ecx, 9(%ebx) 
        movzbl     8(%ebx), %eax 
        cmpl       $20, %eax 
        jg         default__hla_3861
        jmp *      jmpTbl__hla_3861(,%eax,4) 
case__hla_3862:
        jmp        endswitch__hla_3861
case__hla_3863:
        movb       $1, currentSection 
        jmp        endswitch__hla_3861
case__hla_3864:
        movb       $2, currentSection 
        jmp        endswitch__hla_3861
case__hla_3865:
        movb       $3, currentSection 
        jmp        endswitch__hla_3861
case__hla_3866:
        mov        13(%ebx), %eax 
        subl       $1, %eax 
        addl       %eax, %ecx 
        notl       %eax 
        andl       %eax, %ecx 
        jmp        endswitch__hla_3861
case__hla_3867:
        addl       13(%ebx), %ecx 
        jmp        endswitch__hla_3861
case__hla_3868:
        mov        13(%ebx), %eax 
        mov        4(%eax), %eax 
        mov        %ecx, 12(%eax) 
        mov        currentSection, %dl 
        mov        %dl, 16(%eax) 
        jmp        endswitch__hla_3861
case__hla_3869:
        addl       13(%ebx), %ecx 
        jmp        endswitch__hla_3861
case__hla_3870:
        mov        13(%ebx), %eax 
        imull      17(%ebx), %eax 
        addl       %eax, %ecx 
        jmp        endswitch__hla_3861
case__hla_3871:
        addl       $2, %ecx 
        mov        17(%ebx), %eax 
        cmpl       $0, %eax 
        je         false__hla_3872
        mov        4(%eax), %edx 
        cmpl       $0, %edx 
        je         false__hla_3873
        mov        17(%edx), %dl 
        testb      $1, %dl 
        jz         false__hla_3874
        pushl      $str__hla_3875 
        call       STDERR_PUTS
        pushl      8(%eax) 
        call       STDERR_PUTS
        pushl      $str__hla_3876 
        call       STDERR_PUTS
        call       printLineNumberChain
        mov        $8, %eax 
        jmp        Raise__hla_
false__hla_3874:
false__hla_3873:
false__hla_3872:
        jmp        endswitch__hla_3861
case__hla_3877:
        addl       $1, %ecx 
        mov        8(%ebp), %eax 
        addl       %eax, %ecx 
        mov        %al, 32(%ebx) 
        cmpb       $1, %al 
        jna        false__hla_3878
        addl       $1, %ecx 
false__hla_3878:
        jmp        endswitch__hla_3861
case__hla_3879:
        mov        8(%ebp), %eax 
        lea        1(%ecx,%eax,1), %ecx 
        mov        %al, 31(%ebx) 
        jmp        endswitch__hla_3861
case__hla_3880:
        addl       $3, %ecx 
        jmp        endswitch__hla_3861
case__hla_3881:
        addl       $5, %ecx 
        jmp        endswitch__hla_3861
case__hla_3882:
        addl       $4, %ecx 
        jmp        endswitch__hla_3861
default__hla_3861:
        pushl      $str__hla_3845 
        call       STDERR_PUTS
        pushl      %eax 
        call       STDERR_PUTU8
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
endswitch__hla_3861:
        mov        4(%ebx), %ebx 
continue__hla_3859:
        cmpl       $0, %ebx 
        jne        while__hla_3859
exitloop__hla_3859:

        popl       %edx 
        popl       %ecx 
        popl       %ebx 
xsectionPass__hla_3856__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $8

/* procedure firstPass__hla_3853 */

firstPass__hla_3853:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $8, %esp 
        movb       $1, currentSection 
        pushl      20(%ebp) 
        pushl      8(%ebp) 
        call       sectionPass__hla_3856
        movb       $2, currentSection 
        pushl      16(%ebp) 
        pushl      8(%ebp) 
        call       sectionPass__hla_3856
        movb       $3, currentSection 
        pushl      12(%ebp) 
        pushl      8(%ebp) 
        call       sectionPass__hla_3856
xfirstPass__hla_3853__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $16

/* procedure computeDisplacement__hla_3896 */

computeDisplacement__hla_3896:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        mov        12(%ebp), %ecx 
        mov        8(%ebp), %ebx 
        mov        17(%ebx), %eax 
        mov        4(%eax), %edx 
        testb      $9, 17(%edx) 
        jnz        false__hla_3899
        pushl      $str__hla_3900 
        call       STDERR_PUTS
        pushl      8(%eax) 
        call       STDERR_PUTS
        call       STDERR_NEWLN
        call       printLineNumberChain
        mov        $8, %eax 
        jmp        Raise__hla_
false__hla_3899:
        mov        16(%edx), %al 
        mov        17(%edx), %ah 
        andb       $3, %ah 
        testb      %al, %al 
        jne        false__hla_3901
        mov        $1, %eax 
        jmp        endif__hla_3901
false__hla_3901:
        cmpb       $1, %ah 
        jne        false__hla_3902
        mov        $4, %eax 
        jmp        endif__hla_3901
false__hla_3902:
        cmpb       currentSection, %al 
        je         false__hla_3903
        mov        $4, %eax 
        jmp        endif__hla_3901
false__hla_3903:
        mov        12(%edx), %eax 
        subl       %ecx, %eax 
        mov        %eax, 13(%ebx) 
        cmpl       $-128, %eax 
        jnge       false__hla_3904
        cmpl       $127, %eax 
        jnle       false__hla_3904
        mov        $1, %eax 
        jmp        endif__hla_3904
false__hla_3904:
        mov        $4, %eax 
endif__hla_3904:
endif__hla_3901:
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
xcomputeDisplacement__hla_3896__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $8

/* procedure doPhase__hla_3911 */

doPhase__hla_3911:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $4, %esp 
        xorl       %ecx, %ecx 
        mov        16(%ebp), %ebx 
        jmp        continue__hla_3914
while__hla_3914:
        mov        9(%ebx), %eax 
        mov        %eax, -4(%ebp) 
        mov        %ecx, 9(%ebx) 
        movzbl     8(%ebx), %eax 
        cmpl       $20, %eax 
        jg         default__hla_3916
        jmp *      jmpTbl__hla_3916(,%eax,4) 
case__hla_3917:
        jmp        endswitch__hla_3916
case__hla_3918:
        movb       $1, currentSection 
        jmp        endswitch__hla_3916
case__hla_3919:
        movb       $2, currentSection 
        jmp        endswitch__hla_3916
case__hla_3920:
        movb       $3, currentSection 
        jmp        endswitch__hla_3916
case__hla_3921:
        mov        -4(%ebp), %eax 
        cmpl       9(%ebx), %eax 
        je         false__hla_3922
        mov        12(%ebp), %eax 
        movb       $1, (%eax) 
false__hla_3922:
        jmp        endswitch__hla_3916
case__hla_3923:
        mov        13(%ebx), %eax 
        subl       $1, %eax 
        addl       %eax, %ecx 
        notl       %eax 
        andl       %eax, %ecx 
        mov        4(%ebx), %eax 
        cmpl       9(%eax), %ecx 
        je         false__hla_3924
        mov        12(%ebp), %edx 
        movb       $1, (%edx) 
false__hla_3924:
        jmp        endswitch__hla_3916
case__hla_3925:
        addl       13(%ebx), %ecx 
        jmp        endswitch__hla_3916
case__hla_3926:
        addl       13(%ebx), %ecx 
        jmp        endswitch__hla_3916
case__hla_3927:
        mov        13(%ebx), %eax 
        imull      17(%ebx), %eax 
        addl       %eax, %ecx 
        jmp        endswitch__hla_3916
case__hla_3928:
        addl       $2, %ecx 
        mov        -4(%ebp), %eax 
        addl       $2, %eax 
        pushl      %eax 
        pushl      %ebx 
        call       computeDisplacement__hla_3896
        jmp        endswitch__hla_3916
case__hla_3929:
        mov        $2, %eax 
        mov        $1, %edx 
        cmpb       $4, 32(%ebx) 
        jne        false__hla_3930
        addl       $3, %edx 
        addl       $4, %eax 
false__hla_3930:
        addl       %eax, %ecx 
        addl       -4(%ebp), %eax 
        pushl      %eax 
        pushl      %ebx 
        call       computeDisplacement__hla_3896
        cmpb       %dl, %al 
        je         false__hla_3931
        cmpb       8(%ebp), %al 
        jne        false__hla_3931
        mov        %al, 32(%ebx) 
        mov        12(%ebp), %edx 
        movb       $1, (%edx) 
false__hla_3931:
        jmp        endswitch__hla_3916
case__hla_3933:
        addl       $1, %ecx 
        movzbl     31(%ebx), %edx 
        addl       %edx, %ecx 
        mov        -4(%ebp), %eax 
        addl       $1, %eax 
        addl       %edx, %eax 
        pushl      %eax 
        pushl      %ebx 
        call       computeDisplacement__hla_3896
        cmpb       %dl, %al 
        je         false__hla_3934
        cmpb       8(%ebp), %al 
        jne        false__hla_3934
        mov        8(%ebp), %al 
        mov        %al, 31(%ebx) 
        mov        12(%ebp), %edx 
        movb       $1, (%edx) 
false__hla_3934:
        jmp        endswitch__hla_3916
case__hla_3936:
        addl       $3, %ecx 
        mov        -4(%ebp), %eax 
        addl       $3, %eax 
        pushl      %eax 
        pushl      %ebx 
        call       computeDisplacement__hla_3896
        jmp        endswitch__hla_3916
case__hla_3937:
        addl       $5, %ecx 
        mov        -4(%ebp), %eax 
        addl       $5, %eax 
        pushl      %eax 
        pushl      %ebx 
        call       computeDisplacement__hla_3896
        jmp        endswitch__hla_3916
case__hla_3938:
        addl       $4, %ecx 
        jmp        endswitch__hla_3916
default__hla_3916:
        pushl      $str__hla_3845 
        call       STDERR_PUTS
        pushl      %eax 
        call       STDERR_PUTU8
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
endswitch__hla_3916:
        mov        4(%ebx), %ebx 
continue__hla_3914:
        cmpl       $0, %ebx 
        jne        while__hla_3914
exitloop__hla_3914:

        mov        16(%ebp), %ebx 
        jmp        continue__hla_3939
while__hla_3939:
        cmpb       $3, 8(%ebx) 
        jne        false__hla_3941
        mov        9(%ebx), %edx 
        mov        13(%ebx), %eax 
        mov        4(%eax), %eax 
        cmpl       12(%eax), %edx 
        je         false__hla_3942
        mov        %edx, 12(%eax) 
        mov        12(%ebp), %edx 
        movb       $1, (%edx) 
false__hla_3942:
false__hla_3941:
        mov        4(%ebx), %ebx 
continue__hla_3939:
        cmpl       $0, %ebx 
        jne        while__hla_3939
exitloop__hla_3939:

xdoPhase__hla_3911__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $12

/* procedure dispPhase__hla_3893 */

dispPhase__hla_3893:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $20, %esp 
        mov        %ebx, -4(%ebp) 
        mov        %ecx, -8(%ebp) 
        mov        %edx, -12(%ebp) 
        movl       $0, -16(%ebp) 
false__hla_3948:
repeat__hla_3948:
        movb       $0, -17(%ebp) 
        pushl      16(%ebp) 
        pushl      %ebp 
        addl       $-17, (%esp) 
        pushl      8(%ebp) 
        call       doPhase__hla_3911
        pushl      12(%ebp) 
        pushl      %ebp 
        addl       $-17, (%esp) 
        pushl      8(%ebp) 
        call       doPhase__hla_3911
        addl       $1, -16(%ebp) 
        cmpl       $16384, -16(%ebp) 
        ja         exitloop__hla_3948
continue__hla_3948:
        cmpb       $0, -17(%ebp) 
        jne        repeat__hla_3948
exitloop__hla_3948:

        mov        -16(%ebp), %eax 
        mov        -4(%ebp), %ebx 
        mov        -8(%ebp), %ecx 
        mov        -12(%ebp), %edx 
xdispPhase__hla_3893__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $12

/* procedure cleanupPass__hla_3958 */

cleanupPass__hla_3958:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %esi 
        mov        12(%ebp), %ebx 
        xorl       %esi, %esi 
        jmp        continue__hla_3961
while__hla_3961:
        mov        9(%ebx), %ecx 
        movzbl     8(%ebx), %eax 
        cmpl       $20, %eax 
        jg         default__hla_3963
        jmp *      jmpTbl__hla_3963(,%eax,4) 
case__hla_3964:
        jmp        endswitch__hla_3963
case__hla_3965:
        mov        13(%ebx), %edx 
        mov        4(%edx), %eax 
        mov        %ecx, 12(%eax) 
        testb      $9, 17(%eax) 
        jnz        false__hla_3966
        pushl      $str__hla_3967 
        call       STDERR_PUTS
        pushl      8(%edx) 
        call       STDERR_PUTS
        pushl      $str__hla_3968 
        call       STDERR_PUTS
        call       printLineNumberChain
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_3966:
        jmp        endswitch__hla_3963
case__hla_3969:
        mov        13(%ebx), %eax 
        cmpl       $-128, %eax 
        jl         L3971__hla_
        cmpl       $127, %eax 
        jng        false__hla_3970
L3971__hla_:
        pushl      $str__hla_3972 
        call       STDERR_PUTS
        pushl      %eax 
        call       STDERR_PUTI32
        pushl      $str__hla_3973 
        call       STDERR_PUTS
        call       printLineNumberChain
        mov        $8, %eax 
        jmp        Raise__hla_
false__hla_3970:
        jmp        endswitch__hla_3963
case__hla_3974:
        mov        13(%ebx), %eax 
        cmpl       $-128, %eax 
        jl         L3976__hla_
        cmpl       $127, %eax 
        jng        false__hla_3975
L3976__hla_:
        pushl      $str__hla_3972 
        call       STDERR_PUTS
        pushl      %eax 
        call       STDERR_PUTI32
        pushl      $str__hla_3973 
        call       STDERR_PUTS
        call       printLineNumberChain
        mov        $8, %eax 
        jmp        Raise__hla_
false__hla_3975:
        jmp        endswitch__hla_3963
case__hla_3977:
        cmpb       $4, 32(%ebx) 
        jne        false__hla_3978
        cmpl       $0, 17(%ebx) 
        je         false__hla_3979
        mov        17(%ebx), %eax 
        mov        4(%eax), %eax 
        mov        16(%eax), %dl 
        mov        17(%eax), %dh 
        andb       $3, %dh 
        cmpb       $1, %dh 
        je         L3981__hla_
        cmpb       8(%ebp), %dl 
        je         false__hla_3980
L3981__hla_:
        addl       $1, %esi 
false__hla_3980:
false__hla_3979:
false__hla_3978:
        jmp        endswitch__hla_3963
case__hla_3982:
        cmpb       $4, 31(%ebx) 
        jne        false__hla_3983
        cmpl       $0, 17(%ebx) 
        je         false__hla_3984
        mov        17(%ebx), %eax 
        mov        4(%eax), %eax 
        mov        16(%eax), %dl 
        mov        17(%eax), %dh 
        andb       $3, %dh 
        cmpb       $1, %dh 
        je         L3986__hla_
        cmpb       8(%ebp), %dl 
        je         false__hla_3985
L3986__hla_:
        addl       $1, %esi 
false__hla_3985:
false__hla_3984:
false__hla_3983:
        jmp        endswitch__hla_3963
case__hla_3987:
        cmpl       $0, 17(%ebx) 
        je         false__hla_3988
        mov        17(%ebx), %eax 
        mov        4(%eax), %eax 
        mov        16(%eax), %dl 
        testb      $1, 17(%eax) 
        jnz        L3990__hla_
        cmpb       8(%ebp), %dl 
        je         false__hla_3989
L3990__hla_:
        addl       $1, %esi 
false__hla_3989:
false__hla_3988:
        jmp        endswitch__hla_3963
case__hla_3991:
        addl       $1, %esi 
        jmp        endswitch__hla_3963
default__hla_3963:
        pushl      $str__hla_3845 
        call       STDERR_PUTS
        pushl      %eax 
        call       STDERR_PUTU8
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
endswitch__hla_3963:
        mov        4(%ebx), %ebx 
continue__hla_3961:
        cmpl       $0, %ebx 
        jne        while__hla_3961
exitloop__hla_3961:

        movl       %ecx, %eax 
        movl       %esi, %edx 
        popl       %esi 
        popl       %ecx 
        popl       %ebx 
xcleanupPass__hla_3958__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $8

/* procedure finalPass__hla_3955 */

finalPass__hla_3955:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $8, %esp 
        pushl      %eax 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      16(%ebp) 
        pushl      $1 
        call       cleanupPass__hla_3958
        mov        %eax, codeSize 
        mov        %edx, numCodeRelocs 
        pushl      12(%ebp) 
        pushl      $2 
        call       cleanupPass__hla_3958
        mov        %eax, dataSize 
        mov        %edx, numDataRelocs 
        pushl      8(%ebp) 
        pushl      $3 
        call       cleanupPass__hla_3958
        mov        %eax, bssSize 
        testl      %edx, %edx 
        je         false__hla_3997
        pushl      $str__hla_3998 
        call       STDERR_PUTS
        mov        $8, %eax 
        jmp        Raise__hla_
false__hla_3997:
        movl       $symbolTable, %esi 
        mov        (%esi), %edi 
        pushl      $exitfor__hla_3999 
        call *     12(%edi) 
        pushl      %ebp 
        mov        8(%esp), %ebp 
        mov        4(%eax), %ebx 
        cmpl       $0, %ebx 
        jne        _0fa0_skipAssertion___hla_4004
        pushl      _0fa1_msg___hla_4002 
        popl       AssertionStr 
        mov        $12, %eax 
        jmp        Raise__hla_

_0fa0_skipAssertion___hla_4004:
        mov        17(%ebx), %cl 
        andb       $13, %cl 
        cmpb       $4, %cl 
        jne        false__hla_4005
        pushl      $str__hla_4006 
        call       STDERR_PUTS
        pushl      8(%eax) 
        call       STDERR_PUTS
        call       STDERR_NEWLN
        mov        $16, %eax 
        jmp        Raise__hla_
false__hla_4005:
continue__hla_3999:
        popl       %ebp 
        ret        $4
exitfor__hla_3999:

        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        popl       %eax 
xfinalPass__hla_3955__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $12

/* procedure optimizeDisps */

optimizeDisps:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $12, %esp 
        cmpb       $0, verboseDebug__hla_3320 
        je         false__hla_4012
        pushl      $str__hla_4013 
        call       STDOUT_PUTS
false__hla_4012:
        pushl      20(%ebp) 
        pushl      16(%ebp) 
        pushl      12(%ebp) 
        pushl      $1 
        call       firstPass__hla_3853
        pushl      20(%ebp) 
        pushl      16(%ebp) 
        pushl      $4 
        call       dispPhase__hla_3893
        mov        %eax, -4(%ebp) 
        cmpl       $16384, %eax 
        jna        false__hla_4014
        pushl      $str__hla_4015 
        call       STDOUT_PUTS
        pushl      20(%ebp) 
        pushl      16(%ebp) 
        pushl      12(%ebp) 
        pushl      $4 
        call       firstPass__hla_3853
        mov        %eax, -8(%ebp) 
        mov        %edx, -12(%ebp) 
        pushl      20(%ebp) 
        pushl      16(%ebp) 
        pushl      $1 
        call       dispPhase__hla_3893
        mov        %eax, -4(%ebp) 
        pushl      20(%ebp) 
        pushl      16(%ebp) 
        pushl      12(%ebp) 
        call       finalPass__hla_3955
        cmpb       $0, 8(%ebp) 
        je         false__hla_4016
        pushl      $str__hla_4017 
        call       STDOUT_PUTS
        pushl      -4(%ebp) 
        call       STDOUT_PUTU32
        pushl      $str__hla_4018 
        call       STDOUT_PUTS
false__hla_4016:
        jmp        endif__hla_4014
false__hla_4014:
        pushl      20(%ebp) 
        pushl      16(%ebp) 
        pushl      12(%ebp) 
        call       finalPass__hla_3955
        cmpb       $0, 8(%ebp) 
        je         false__hla_4019
        pushl      $str__hla_4017 
        call       STDOUT_PUTS
        pushl      -4(%ebp) 
        call       STDOUT_PUTU32
        pushl      $str__hla_4020 
        call       STDOUT_PUTS
false__hla_4019:
endif__hla_4014:
xoptimizeDisps__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $16

/* procedure getSymbol__hla_4032 */

getSymbol__hla_4032:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %eax 
        pushl      %ebx 
        imul       $18, 12(%ebp), %ebx 
        addl       COFFsyms__hla_3311, %ebx 
        mov        (%ebx), %eax 
        testl      %eax, %eax 
        je         false__hla_4035
        pushl      8(%ebx) 
        movl       $0, 8(%ebx) 
        lea        (%ebx), %eax 
        pushl      %eax 
        pushl      8(%ebp) 
        call       STR_CPYZ
        popl       8(%ebx) 
        jmp        endif__hla_4035
false__hla_4035:
        mov        4(%ebx), %eax 
        addl       stringTable__hla_3317, %eax 
        pushl      %eax 
        pushl      8(%ebp) 
        call       STR_CPYZ
endif__hla_4035:
        popl       %ebx 
        popl       %eax 
xgetSymbol__hla_4032__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $8

/* procedure dumpRelocs__hla_4041 */

dumpRelocs__hla_4041:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $1028, %esp 
        pushl      %eax 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %ebp 
        addl       $-1028, (%esp) 
        pushl      $1024 
        call       STR_INIT
        mov        %eax, -4(%ebp) 
        call       STDOUT_NEWLN
        pushl      16(%ebp) 
        call       STDOUT_PUTS
        pushl      $str__hla_4044 
        call       STDOUT_PUTS
        mov        12(%ebp), %ebx 
        mov        $0, %ecx 

        jmp        StartFor__hla_4045
for__hla_4045:
        pushl      4(%ebx) 
        pushl      -4(%ebp) 
        call       getSymbol__hla_4032
        pushl      %ecx 
        call       STDOUT_PUTU32
        pushl      $str__hla_4046 
        call       STDOUT_PUTS
        pushl      (%ebx) 
        call       STDOUT_PUTD
        pushl      $str__hla_4047 
        call       STDOUT_PUTS
        pushl      -4(%ebp) 
        call       STDOUT_PUTS
        pushl      $str__hla_4048 
        call       STDOUT_PUTS
        movzwl     8(%ebx), %eax 
        cmpl       $20, %eax 
        jg         default__hla_4049
        jmp *      jmpTbl__hla_4049(,%eax,4) 
case__hla_4050:
        pushl      $str__hla_4051 
        call       STDOUT_PUTS
        jmp        endswitch__hla_4049
case__hla_4052:
        pushl      $str__hla_4053 
        call       STDOUT_PUTS
        jmp        endswitch__hla_4049
case__hla_4054:
        pushl      $str__hla_4055 
        call       STDOUT_PUTS
        jmp        endswitch__hla_4049
case__hla_4056:
        pushl      $str__hla_4057 
        call       STDOUT_PUTS
        jmp        endswitch__hla_4049
default__hla_4049:
        pushl      $str__hla_4058 
        call       STDOUT_PUTS
        pushl      %eax 
        call       STDOUT_PUTD
endswitch__hla_4049:
        call       STDOUT_NEWLN
        addl       $10, %ebx 
continue__hla_4045:
        incl       %ecx 

StartFor__hla_4045:
        cmpl       8(%ebp), %ecx 
        jb         for__hla_4045
exitloop__hla_4045:

        popl       %ecx 
        popl       %ebx 
        popl       %eax 
xdumpRelocs__hla_4041__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $12

/* procedure generateCOFF__hla_4026 */

generateCOFF__hla_4026:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $192, %esp 
        pushl      %eax 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %esi 
        pushl      %edi 
        cmpb       $0, verboseDebug__hla_3320 
        je         false__hla_4064
        pushl      $str__hla_4065 
        call       STDOUT_PUTS
        pushl      24(%ebp) 
        call       STDOUT_PUTS
        pushl      $str__hla_4066 
        call       STDOUT_PUTS
        pushl      20(%ebp) 
        call       STDOUT_PUTS
        call       STDOUT_NEWLN
false__hla_4064:
        movl       $65536, strTblSize__hla_3319 
        pushl      $65536 
        call       MEM_ALLOC
        mov        %eax, stringTable__hla_3317 
        movl       $4, strTblOffset__hla_3318 
        pushl      $73728 
        call       MEM_ALLOC
        mov        %eax, COFFsyms__hla_3311 
        movl       %eax, %ebx 
        movl       $73728, coffSymSize__hla_3313 
        movl       $0, numCOFFsyms__hla_3312 
        movb       $46, (%ebx) 
        movb       $102, 1(%ebx) 
        movb       $105, 2(%ebx) 
        movb       $108, 3(%ebx) 
        movb       $101, 4(%ebx) 
        movb       $0, 5(%ebx) 
        movb       $0, 6(%ebx) 
        movb       $0, 7(%ebx) 
        movl       $0, 8(%ebx) 
        movw       $2, 12(%ebx) 
        movw       $0, 14(%ebx) 
        movb       $103, 16(%ebx) 
        pushl      24(%ebp) 
        call       STR_LENGTH
        addl       $18, %eax 
        xorl       %edx, %edx 
        divl       divisor__hla_4067 
        mov        %al, 17(%ebx) 
        addl       $1, %eax 
        mov        %eax, numCOFFsyms__hla_3312 
        lea        18(%ebx), %eax 
        pushl      24(%ebp) 
        pushl      %eax 
        call       ZSTR_CPY
        mov        numCodeRelocs, %eax 
        cmpl       $65535, %eax 
        jna        false__hla_4068
        mov        $65535, %ax 
false__hla_4068:
        mov        %ax, CodeAuxSection__hla_4027+4 
        mov        codeSize, %eax 
        mov        %eax, CodeAuxSection__hla_4027 
        pushl      $str__hla_4069 
        pushl      $0 
        pushl      $1 
        pushl      $0 
        pushl      $3 
        pushl      $1 
        pushl      $CodeAuxSection__hla_4027 
        call       addCOFFsym__hla_3758
        addl       COFFsyms__hla_3311, %eax 
        mov        %eax, -172(%ebp) 
        mov        numDataRelocs, %eax 
        cmpl       $65535, %eax 
        jna        false__hla_4070
        mov        $65535, %ax 
false__hla_4070:
        mov        %ax, DataAuxSection__hla_4028+4 
        mov        dataSize, %eax 
        mov        %eax, DataAuxSection__hla_4028 
        pushl      $str__hla_4071 
        pushl      $0 
        pushl      $2 
        pushl      $0 
        pushl      $3 
        pushl      $1 
        pushl      $DataAuxSection__hla_4028 
        call       addCOFFsym__hla_3758
        addl       COFFsyms__hla_3311, %eax 
        mov        %eax, -176(%ebp) 
        mov        bssSize, %eax 
        mov        %eax, BssAuxSection__hla_4029 
        pushl      $str__hla_4072 
        pushl      $0 
        pushl      $3 
        pushl      $0 
        pushl      $3 
        pushl      $1 
        pushl      $BssAuxSection__hla_4029 
        call       addCOFFsym__hla_3758
        addl       COFFsyms__hla_3311, %eax 
        mov        %eax, -180(%ebp) 
        movl       $symbolTable, %esi 
        mov        (%esi), %edi 
        pushl      $exitfor__hla_4073 
        call *     12(%edi) 
        pushl      %ebp 
        mov        8(%esp), %ebp 
        movl       %eax, %edx 
        mov        4(%edx), %ebx 
        movzbw     16(%ebx), %cx 
        mov        12(%ebx), %edi 
        testb      $1, 17(%ebx) 
        jz         false__hla_4074
        mov        $2, %al 
        mov        $0, %cx 
        xorl       %edi, %edi 
        jmp        endif__hla_4074
false__hla_4074:
        testb      $2, 17(%ebx) 
        jz         false__hla_4075
        mov        $2, %al 
        jmp        endif__hla_4075
false__hla_4075:
        mov        $3, %al 
endif__hla_4075:
endif__hla_4074:
        pushl      8(%edx) 
        pushl      12(%ebx) 
        pushl      %ecx 
        pushl      $0 
        pushl      %eax 
        pushl      $0 
        pushl      $0 
        call       addCOFFsym__hla_3758
        mov        %eax, 8(%ebx) 
continue__hla_4073:
        popl       %ebp 
        ret        $4
exitfor__hla_4073:

        movw       $332, -32(%ebp) 
        movw       $3, -30(%ebp) 
        pushl      %ebp 
        addl       $-4, (%esp) 
        pushl      %ebp 
        addl       $-8, (%esp) 
        call       TIME_UTCDATETIME
        pushl      -4(%ebp) 
        pushl      -8(%ebp) 
        call       TIME_TOUNIXTIME
        mov        %eax, -28(%ebp) 
        movl       $0, -24(%ebp) 
        movl       $0, -20(%ebp) 
        movw       $0, -16(%ebp) 
        movw       $256, -14(%ebp) 
        movb       $46, -72(%ebp) 
        movb       $116, -71(%ebp) 
        movb       $101, -70(%ebp) 
        movb       $120, -69(%ebp) 
        movb       $116, -68(%ebp) 
        movb       $0, -67(%ebp) 
        movb       $0, -66(%ebp) 
        movb       $0, -65(%ebp) 
        mov        codeSize, %eax 
        mov        %eax, -64(%ebp) 
        mov        %eax, -56(%ebp) 
        pushl      %eax 
        call       MEM_ALLOC
        mov        %eax, -164(%ebp) 
        mov        numCodeRelocs, %edx 
        cmpl       $65535, %edx 
        jnb        false__hla_4076
        mov        %dx, -40(%ebp) 
        movzwl     %dx, %eax 
        imul       $10, %eax, %eax 
        pushl      %eax 
        call       MEM_ALLOC
        mov        %eax, -156(%ebp) 
        movl       $1615855648, -36(%ebp) 
        jmp        endif__hla_4076
false__hla_4076:
        movw       $65535, -40(%ebp) 
        addl       $1, %edx 
        imul       $10, %edx, %eax 
        pushl      %eax 
        call       MEM_ALLOC
        mov        %eax, -156(%ebp) 
        mov        %edx, (%eax) 
        movl       $0, 4(%eax) 
        movw       $0, 8(%eax) 
        movl       $1632632864, -36(%ebp) 
endif__hla_4076:
        movl       $0, -60(%ebp) 
        movl       $0, -52(%ebp) 
        movl       $0, -48(%ebp) 
        movl       $0, -44(%ebp) 
        movw       $0, -38(%ebp) 
        pushl      16(%ebp) 
        pushl      -156(%ebp) 
        pushl      numCodeRelocs 
        pushl      -164(%ebp) 
        pushl      $1 
        pushl      $0 
        call       buildRaw__hla_3781
        movb       $46, -112(%ebp) 
        movb       $100, -111(%ebp) 
        movb       $97, -110(%ebp) 
        movb       $116, -109(%ebp) 
        movb       $97, -108(%ebp) 
        movb       $0, -107(%ebp) 
        movb       $0, -106(%ebp) 
        movb       $0, -105(%ebp) 
        mov        dataSize, %eax 
        mov        %eax, -104(%ebp) 
        mov        %eax, -96(%ebp) 
        pushl      %eax 
        call       MEM_ALLOC
        mov        %eax, -168(%ebp) 
        mov        numDataRelocs, %edx 
        cmpl       $65535, %edx 
        jnb        false__hla_4077
        mov        %dx, -80(%ebp) 
        movzwl     %dx, %eax 
        imul       $10, %eax, %eax 
        pushl      %eax 
        call       MEM_ALLOC
        mov        %eax, -160(%ebp) 
        movl       $-1068498880, -76(%ebp) 
        jmp        endif__hla_4077
false__hla_4077:
        movw       $65535, -80(%ebp) 
        addl       $1, %edx 
        imul       $10, %edx, %eax 
        pushl      %eax 
        call       MEM_ALLOC
        mov        %eax, -160(%ebp) 
        mov        %edx, (%eax) 
        movl       $0, 4(%eax) 
        movw       $0, 8(%eax) 
        movl       $-1051721664, -76(%ebp) 
endif__hla_4077:
        movl       $0, -100(%ebp) 
        movl       $0, -92(%ebp) 
        movl       $0, -88(%ebp) 
        movl       $0, -84(%ebp) 
        movw       $0, -78(%ebp) 
        pushl      12(%ebp) 
        pushl      -160(%ebp) 
        pushl      numDataRelocs 
        pushl      -168(%ebp) 
        pushl      $2 
        pushl      $0 
        call       buildRaw__hla_3781
        movb       $46, -152(%ebp) 
        movb       $98, -151(%ebp) 
        movb       $115, -150(%ebp) 
        movb       $115, -149(%ebp) 
        movl       $0, -148(%ebp) 
        mov        bssSize, %eax 
        mov        %eax, -136(%ebp) 
        movl       $0, -144(%ebp) 
        movw       $0, -120(%ebp) 
        movl       $0, -140(%ebp) 
        movl       $0, -132(%ebp) 
        movl       $0, -128(%ebp) 
        movl       $0, -124(%ebp) 
        movw       $0, -118(%ebp) 
        movl       $-1068498816, -116(%ebp) 
        mov        $140, %ecx 
        mov        %ecx, -52(%ebp) 
        addl       codeSize, %ecx 
        addl       $3, %ecx 
        andl       $-4, %ecx 
        mov        %ecx, -48(%ebp) 
        imul       $10, numCodeRelocs, %eax 
        addl       %eax, %ecx 
        addl       $3, %ecx 
        andl       $-4, %ecx 
        mov        %ecx, -92(%ebp) 
        addl       dataSize, %ecx 
        addl       $3, %ecx 
        andl       $-4, %ecx 
        mov        %ecx, -88(%ebp) 
        imul       $10, numDataRelocs, %eax 
        addl       %eax, %ecx 
        mov        %ecx, -24(%ebp) 
        mov        numCOFFsyms__hla_3312, %eax 
        mov        %eax, -20(%ebp) 
        imul       $18, %eax, %eax 
        addl       %eax, %ecx 
        addl       strTblOffset__hla_3318, %ecx 
        mov        %ecx, -188(%ebp) 
        pushl      %ecx 
        call       MEM_ZALLOC
        mov        %eax, -184(%ebp) 
        cld
        mov        -184(%ebp), %edi 
        lea        -32(%ebp), %esi 
        mov        $20, %ecx 
        rep movsb
        lea        -72(%ebp), %esi 
        mov        $40, %ecx 
        rep movsb
        lea        -112(%ebp), %esi 
        mov        $40, %ecx 
        rep movsb
        lea        -152(%ebp), %esi 
        mov        $40, %ecx 
        rep movsb
        mov        -164(%ebp), %esi 
        mov        codeSize, %ecx 
        rep movsb
        addl       $3, %edi 
        andl       $-4, %edi 
        mov        -156(%ebp), %esi 
        imul       $10, numCodeRelocs, %ecx 
        rep movsb
        addl       $3, %edi 
        andl       $-4, %edi 
        mov        -168(%ebp), %esi 
        mov        dataSize, %ecx 
        rep movsb
        addl       $3, %edi 
        andl       $-4, %edi 
        mov        -160(%ebp), %esi 
        imul       $10, numDataRelocs, %ecx 
        rep movsb
        mov        COFFsyms__hla_3311, %esi 
        imul       $18, numCOFFsyms__hla_3312, %ecx 
        rep movsb
        mov        stringTable__hla_3317, %esi 
        mov        strTblOffset__hla_3318, %eax 
        stosl
        addl       $4, %esi 
        lea        -4(%eax), %ecx 
        rep movsb
        pushl      20(%ebp) 
        call       FILEIO_OPENNEW
        mov        %eax, -192(%ebp) 
        pushl      -192(%ebp) 
        pushl      -184(%ebp) 
        pushl      -188(%ebp) 
        call       FILEIO_WRITE
        pushl      -192(%ebp) 
        call       FILEIO_CLOSE
        cmpb       $0, verboseDebug__hla_3320 
        je         false__hla_4078
        pushl      $str__hla_4079 
        call       STDOUT_PUTS
        pushl      numCOFFsyms__hla_3312 
        call       STDOUT_PUTU32
        pushl      $str__hla_4080 
        call       STDOUT_PUTS
        mov        COFFsyms__hla_3311, %ebx 
        xorl       %ecx, %ecx 
        jmp        continue__hla_4081
while__hla_4081:
        pushl      %ecx 
        call       STDOUT_PUTU32
        pushl      $str__hla_4046 
        call       STDOUT_PUTS
        mov        (%ebx), %eax 
        testl      %eax, %eax 
        jne        false__hla_4083
        mov        4(%ebx), %eax 
        addl       stringTable__hla_3317, %eax 
        pushl      %eax 
        call       STDOUT_PUTZS
        jmp        endif__hla_4083
false__hla_4083:
        pushl      8(%ebx) 
        movl       $0, 8(%ebx) 
        pushl      %ebx 
        call       STDOUT_PUTZS
        popl       8(%ebx) 
endif__hla_4083:
        pushl      $str__hla_4084 
        call       STDOUT_PUTS
        cmpb       $103, 16(%ebx) 
        jne        false__hla_4085
        lea        18(%ebx), %eax 
        pushl      %eax 
        call       STDOUT_PUTZS
        jmp        endif__hla_4085
false__hla_4085:
        cmpb       $3, 16(%ebx) 
        jne        false__hla_4086
        pushl      $str__hla_4087 
        call       STDOUT_PUTS
        jmp        endif__hla_4085
false__hla_4086:
        cmpb       $2, 16(%ebx) 
        jne        false__hla_4088
        cmpw       $0, 12(%ebx) 
        jne        false__hla_4089
        pushl      $str__hla_4090 
        call       STDOUT_PUTS
        jmp        endif__hla_4089
false__hla_4089:
        pushl      $str__hla_4091 
        call       STDOUT_PUTS
endif__hla_4089:
        jmp        endif__hla_4085
false__hla_4088:
        pushl      $str__hla_4092 
        call       STDOUT_PUTS
endif__hla_4085:
        call       STDOUT_NEWLN
        movzbl     17(%ebx), %eax 
        addl       $1, %eax 
        addl       %eax, %ecx 
        imul       $18, %eax, %eax 
        addl       %eax, %ebx 
continue__hla_4081:
        cmpl       numCOFFsyms__hla_3312, %ecx 
        jb         while__hla_4081
exitloop__hla_4081:

        pushl      $str__hla_4093 
        pushl      -156(%ebp) 
        pushl      numCodeRelocs 
        call       dumpRelocs__hla_4041
        pushl      $str__hla_4094 
        pushl      -160(%ebp) 
        pushl      numDataRelocs 
        call       dumpRelocs__hla_4041
false__hla_4078:
        popl       %edi 
        popl       %esi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        popl       %eax 
xgenerateCOFF__hla_4026__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $20

/* procedure generateELF__hla_4100 */

generateELF__hla_4100:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $148, %esp 
        pushl      %eax 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %esi 
        pushl      %edi 
        cmpb       $0, verboseDebug__hla_3320 
        je         false__hla_4112
        pushl      $str__hla_4113 
        call       STDOUT_PUTS
        pushl      28(%ebp) 
        call       STDOUT_PUTS
        pushl      $str__hla_4066 
        call       STDOUT_PUTS
        pushl      24(%ebp) 
        call       STDOUT_PUTS
        call       STDOUT_NEWLN
false__hla_4112:
        pushl      $64 
        call       MEM_ZALLOC
        mov        %eax, -8(%ebp) 
        movl       $4, -140(%ebp) 
        movl       $5, -144(%ebp) 
        movl       $6, -148(%ebp) 
        lea        1(%eax), %edi 
        movl       $1, shstrtabSection__hla_4102 
        pushl      $str__hla_4114 
        pushl      %edi 
        call       ZSTR_CPY
        lea        1(%edi,%eax,1), %edi 
        movl       $11, symtabSection__hla_4103 
        pushl      $str__hla_4115 
        pushl      %edi 
        call       ZSTR_CPY
        lea        1(%edi,%eax,1), %edi 
        movl       $19, strtabSection__hla_4104 
        pushl      $str__hla_4116 
        pushl      %edi 
        call       ZSTR_CPY
        lea        1(%edi,%eax,1), %edi 
        mov        $27, %ebx 
        mov        %ebx, textSection__hla_4105 
        addl       $6, %ebx 
        pushl      $str__hla_4069 
        pushl      %edi 
        call       ZSTR_CPY
        lea        1(%edi,%eax,1), %edi 
        mov        %ebx, dataSection__hla_4106 
        addl       $6, %ebx 
        pushl      $str__hla_4071 
        pushl      %edi 
        call       ZSTR_CPY
        lea        1(%edi,%eax,1), %edi 
        mov        %ebx, bssSection__hla_4107 
        addl       $5, %ebx 
        pushl      $str__hla_4072 
        pushl      %edi 
        call       ZSTR_CPY
        lea        1(%edi,%eax,1), %edi 
        mov        %ebx, relTextSection__hla_4108 
        addl       $10, %ebx 
        pushl      $str__hla_4117 
        pushl      %edi 
        call       ZSTR_CPY
        lea        1(%edi,%eax,1), %edi 
        mov        %ebx, relDataSection__hla_4109 
        addl       $10, %ebx 
        pushl      $str__hla_4118 
        pushl      %edi 
        call       ZSTR_CPY
        lea        1(%edi,%eax,1), %edi 
        mov        %ebx, -104(%ebp) 
        movl       $7, -4(%ebp) 
        cmpl       $0, numCodeRelocs 
        je         false__hla_4119
        addl       $1, -4(%ebp) 
false__hla_4119:
        cmpl       $0, numDataRelocs 
        je         false__hla_4120
        addl       $1, -4(%ebp) 
false__hla_4120:
        imul       $40, -4(%ebp), %eax 
        mov        %eax, -96(%ebp) 
        movl       $262144, strTblSize__hla_3319 
        pushl      $262144 
        call       MEM_ZALLOC
        mov        %eax, stringTable__hla_3317 
        movl       $1, strTblOffset__hla_3318 
        pushl      $1048576 
        call       MEM_ZALLOC
        mov        %eax, ELFsyms__hla_3314 
        movl       %eax, %ebx 
        movl       $1048576, elfSymSize__hla_3316 
        movl       $1, numELFsyms__hla_3315 
        pushl      $0 
        pushl      $0 
        pushl      $0 
        pushl      $3 
        pushw      $0 
        pushw      -140(%ebp) 
        pushl      $0 
        call       addELFsym__hla_3770
        addl       $1, numELFsyms__hla_3315 
        pushl      $0 
        pushl      $0 
        pushl      $0 
        pushl      $3 
        pushw      $0 
        pushw      -144(%ebp) 
        pushl      $0 
        call       addELFsym__hla_3770
        addl       $1, numELFsyms__hla_3315 
        pushl      $0 
        pushl      $0 
        pushl      $0 
        pushl      $3 
        pushw      $0 
        pushw      -148(%ebp) 
        pushl      $0 
        call       addELFsym__hla_3770
        addl       $1, numELFsyms__hla_3315 
        movl       $symbolTable, %esi 
        mov        (%esi), %edi 
        pushl      $exitfor__hla_4121 
        call *     12(%edi) 
        pushl      %ebp 
        mov        8(%esp), %ebp 
        movl       %eax, %edx 
        mov        4(%edx), %ebx 
        movzbl     16(%ebx), %ecx 
        cmpl       $1, %ecx 
        jne        false__hla_4122
        mov        -140(%ebp), %ecx 
        jmp        endif__hla_4122
false__hla_4122:
        cmpl       $2, %ecx 
        jne        false__hla_4123
        mov        -144(%ebp), %ecx 
        jmp        endif__hla_4122
false__hla_4123:
        cmpl       $3, %ecx 
        jne        false__hla_4124
        mov        -148(%ebp), %ecx 
        jmp        endif__hla_4122
false__hla_4124:
        xorl       %ecx, %ecx 
endif__hla_4122:
        mov        12(%ebx), %edi 
        testb      $1, 17(%ebx) 
        jnz        false__hla_4125
        testb      $2, 17(%ebx) 
        jnz        false__hla_4126
        pushl      8(%edx) 
        pushl      %edi 
        pushl      $0 
        pushl      $0 
        pushl      %ecx 
        pushl      $0 
        call       addELFsym__hla_3770
        mov        numELFsyms__hla_3315, %eax 
        mov        %eax, 8(%ebx) 
        addl       $1, numELFsyms__hla_3315 
false__hla_4126:
false__hla_4125:
continue__hla_4121:
        popl       %ebp 
        ret        $4
exitfor__hla_4121:

        mov        numELFsyms__hla_3315, %eax 
        mov        %eax, symtabSection__hla_4103+28 
        movl       $symbolTable, %esi 
        mov        (%esi), %edi 
        pushl      $exitfor__hla_4127 
        call *     12(%edi) 
        pushl      %ebp 
        mov        8(%esp), %ebp 
        movl       %eax, %edx 
        mov        4(%edx), %ebx 
        movzbl     16(%ebx), %ecx 
        cmpl       $1, %ecx 
        jne        false__hla_4128
        mov        -140(%ebp), %ecx 
        jmp        endif__hla_4128
false__hla_4128:
        cmpl       $2, %ecx 
        jne        false__hla_4129
        mov        -144(%ebp), %ecx 
        jmp        endif__hla_4128
false__hla_4129:
        cmpl       $3, %ecx 
        jne        false__hla_4130
        mov        -148(%ebp), %ecx 
        jmp        endif__hla_4128
false__hla_4130:
        xorl       %ecx, %ecx 
endif__hla_4128:
        mov        12(%ebx), %edi 
        testb      $1, 17(%ebx) 
        jz         false__hla_4131
        mov        $16, %al 
        xorl       %ecx, %ecx 
        xorl       %edi, %edi 
        jmp        endif__hla_4131
false__hla_4131:
        testb      $2, 17(%ebx) 
        jz         false__hla_4132
        mov        $16, %al 
        jmp        endif__hla_4132
false__hla_4132:
        jmp        continue__hla_4127
endif__hla_4132:
endif__hla_4131:
        pushl      8(%edx) 
        pushl      %edi 
        pushl      $0 
        pushl      %eax 
        pushl      %ecx 
        pushl      $0 
        call       addELFsym__hla_3770
        mov        numELFsyms__hla_3315, %eax 
        mov        %eax, 8(%ebx) 
        addl       $1, numELFsyms__hla_3315 
continue__hla_4127:
        popl       %ebp 
        ret        $4
exitfor__hla_4127:

        mov        codeSize, %eax 
        testl      %eax, %eax 
        je         false__hla_4133
        pushl      %eax 
        call       MEM_ALLOC
        mov        %eax, -84(%ebp) 
        imul       $8, numCodeRelocs, %eax 
        addl       $8, %eax 
        pushl      %eax 
        call       MEM_ALLOC
        mov        %eax, -76(%ebp) 
        pushl      20(%ebp) 
        pushl      -76(%ebp) 
        pushl      numCodeRelocs 
        pushl      -84(%ebp) 
        pushl      $1 
        pushl      8(%ebp) 
        call       buildRaw__hla_3781
false__hla_4133:
        mov        dataSize, %eax 
        testl      %eax, %eax 
        je         false__hla_4134
        pushl      %eax 
        call       MEM_ALLOC
        mov        %eax, -88(%ebp) 
        imul       $8, numDataRelocs, %eax 
        pushl      %eax 
        call       MEM_ALLOC
        mov        %eax, -80(%ebp) 
        pushl      16(%ebp) 
        pushl      -80(%ebp) 
        pushl      numDataRelocs 
        pushl      -88(%ebp) 
        pushl      $2 
        pushl      8(%ebp) 
        call       buildRaw__hla_3781
false__hla_4134:
        mov        $64, %eax 
        mov        %eax, -92(%ebp) 
        addl       -96(%ebp), %eax 
        addl       $15, %eax 
        andl       $-16, %eax 
        mov        %eax, -100(%ebp) 
        addl       -104(%ebp), %eax 
        addl       $15, %eax 
        andl       $-16, %eax 
        mov        %eax, -108(%ebp) 
        imul       $16, numELFsyms__hla_3315, %edx 
        addl       %edx, %eax 
        addl       $15, %eax 
        andl       $-16, %eax 
        mov        %eax, -116(%ebp) 
        addl       strTblOffset__hla_3318, %eax 
        movl       %eax, %edx 
        addl       $15, %edx 
        andl       $-16, %edx 
        cmpl       $0, codeSize 
        je         false__hla_4135
        mov        %edx, -120(%ebp) 
        addl       codeSize, %edx 
        addl       $15, %edx 
        andl       $-16, %edx 
        jmp        endif__hla_4135
false__hla_4135:
        mov        -100(%ebp), %eax 
        mov        %eax, -120(%ebp) 
endif__hla_4135:
        cmpl       $0, dataSize 
        je         false__hla_4136
        mov        %edx, -128(%ebp) 
        addl       dataSize, %edx 
        addl       $15, %edx 
        andl       $-16, %edx 
        jmp        endif__hla_4136
false__hla_4136:
        mov        -100(%ebp), %eax 
        mov        %eax, -128(%ebp) 
endif__hla_4136:
        cmpl       $0, numCodeRelocs 
        je         false__hla_4137
        mov        %edx, -124(%ebp) 
        imul       $8, numCodeRelocs, %eax 
        addl       %eax, %edx 
        addl       $15, %edx 
        andl       $-16, %edx 
false__hla_4137:
        cmpl       $0, numDataRelocs 
        je         false__hla_4138
        mov        %edx, -132(%ebp) 
        imul       $8, numDataRelocs, %eax 
        addl       %eax, %edx 
false__hla_4138:
        mov        %edx, -16(%ebp) 
        pushl      %edx 
        call       MEM_ZALLOC
        mov        %eax, -12(%ebp) 
        pushl      -100(%ebp) 
        popl       -136(%ebp) 
        cld
        lea        -72(%ebp), %edi 
        mov        $52, %ecx 
        mov        $0, %al 
        rep stosb
        movw       $1, -56(%ebp) 
        movw       $3, -54(%ebp) 
        movl       $1, -52(%ebp) 
        movl       $0, -48(%ebp) 
        movl       $0, -44(%ebp) 
        mov        -92(%ebp), %eax 
        mov        %eax, -40(%ebp) 
        movl       $0, -36(%ebp) 
        movw       $52, -32(%ebp) 
        movw       $0, -30(%ebp) 
        movw       $0, -28(%ebp) 
        movw       $40, -26(%ebp) 
        mov        -4(%ebp), %eax 
        mov        %ax, -24(%ebp) 
        movw       $1, -22(%ebp) 
        lea        -72(%ebp), %ebx 
        movb       $127, (%ebx) 
        movb       $69, 1(%ebx) 
        movb       $76, 2(%ebx) 
        movb       $70, 3(%ebx) 
        movb       $1, 4(%ebx) 
        movb       $1, 5(%ebx) 
        movb       $1, 6(%ebx) 
        cmpb       $2, 8(%ebp) 
        jne        false__hla_4139
        movb       $0, 7(%ebx) 
        jmp        endif__hla_4139
false__hla_4139:
        cmpb       $3, 8(%ebp) 
        jne        false__hla_4140
        movb       $9, 7(%ebx) 
        jmp        endif__hla_4139
false__hla_4140:
        pushl      $str__hla_4141 
        call       STDERR_PUTS
        movb       $0, 7(%ebx) 
endif__hla_4139:
        mov        -100(%ebp), %eax 
        mov        %eax, shstrtabSection__hla_4102+16 
        mov        -104(%ebp), %eax 
        mov        %eax, shstrtabSection__hla_4102+20 
        mov        -108(%ebp), %eax 
        mov        %eax, symtabSection__hla_4103+16 
        imul       $16, numELFsyms__hla_3315, %eax 
        mov        %eax, symtabSection__hla_4103+20 
        mov        %eax, -112(%ebp) 
        mov        -116(%ebp), %eax 
        mov        %eax, strtabSection__hla_4104+16 
        mov        strTblOffset__hla_3318, %eax 
        mov        %eax, strtabSection__hla_4104+20 
        mov        -120(%ebp), %eax 
        mov        %eax, textSection__hla_4105+16 
        mov        codeSize, %eax 
        mov        %eax, textSection__hla_4105+20 
        mov        -128(%ebp), %eax 
        mov        %eax, dataSection__hla_4106+16 
        mov        dataSize, %eax 
        mov        %eax, dataSection__hla_4106+20 
        mov        bssSize, %eax 
        mov        %eax, bssSection__hla_4107+20 
        mov        -136(%ebp), %eax 
        mov        %eax, bssSection__hla_4107+16 
        cmpl       $0, numCodeRelocs 
        je         false__hla_4142
        mov        -124(%ebp), %eax 
        mov        %eax, relTextSection__hla_4108+16 
        imul       $8, numCodeRelocs, %eax 
        mov        %eax, relTextSection__hla_4108+20 
        mov        -140(%ebp), %eax 
        mov        %eax, relTextSection__hla_4108+28 
false__hla_4142:
        cmpl       $0, numDataRelocs 
        je         false__hla_4143
        mov        -132(%ebp), %eax 
        mov        %eax, relDataSection__hla_4109+16 
        imul       $8, numDataRelocs, %eax 
        mov        %eax, relDataSection__hla_4109+20 
        mov        -144(%ebp), %eax 
        mov        %eax, relDataSection__hla_4109+28 
false__hla_4143:
        cld
        mov        -12(%ebp), %edi 
        lea        -72(%ebp), %esi 
        mov        $52, %ecx 
        rep movsb
        subl       -12(%ebp), %edi 
        addl       $15, %edi 
        andl       $-16, %edi 
        addl       -12(%ebp), %edi 
        lea        NULLsection__hla_4101, %esi 
        mov        $40, %ecx 
        rep movsb
        lea        shstrtabSection__hla_4102, %esi 
        mov        $40, %ecx 
        rep movsb
        lea        symtabSection__hla_4103, %esi 
        mov        $40, %ecx 
        rep movsb
        lea        strtabSection__hla_4104, %esi 
        mov        $40, %ecx 
        rep movsb
        lea        textSection__hla_4105, %esi 
        mov        $40, %ecx 
        rep movsb
        lea        dataSection__hla_4106, %esi 
        mov        $40, %ecx 
        rep movsb
        lea        bssSection__hla_4107, %esi 
        mov        $40, %ecx 
        rep movsb
        cmpl       $0, numCodeRelocs 
        je         false__hla_4144
        lea        relTextSection__hla_4108, %esi 
        mov        $40, %ecx 
        rep movsb
false__hla_4144:
        cmpl       $0, numDataRelocs 
        je         false__hla_4145
        lea        relDataSection__hla_4109, %esi 
        mov        $40, %ecx 
        rep movsb
false__hla_4145:
        subl       -12(%ebp), %edi 
        addl       $15, %edi 
        andl       $-16, %edi 
        addl       -12(%ebp), %edi 
        mov        -8(%ebp), %esi 
        mov        -104(%ebp), %ecx 
        rep movsb
        subl       -12(%ebp), %edi 
        addl       $15, %edi 
        andl       $-16, %edi 
        addl       -12(%ebp), %edi 
        mov        ELFsyms__hla_3314, %esi 
        imul       $16, numELFsyms__hla_3315, %ecx 
        rep movsb
        subl       -12(%ebp), %edi 
        addl       $15, %edi 
        andl       $-16, %edi 
        addl       -12(%ebp), %edi 
        mov        stringTable__hla_3317, %esi 
        mov        strTblOffset__hla_3318, %ecx 
        rep movsb
        cmpl       $0, codeSize 
        je         false__hla_4146
        subl       -12(%ebp), %edi 
        addl       $15, %edi 
        andl       $-16, %edi 
        addl       -12(%ebp), %edi 
        mov        -84(%ebp), %esi 
        mov        codeSize, %ecx 
        rep movsb
false__hla_4146:
        cmpl       $0, dataSize 
        je         false__hla_4147
        subl       -12(%ebp), %edi 
        addl       $15, %edi 
        andl       $-16, %edi 
        addl       -12(%ebp), %edi 
        mov        -88(%ebp), %esi 
        mov        dataSize, %ecx 
        rep movsb
false__hla_4147:
        cmpl       $0, numCodeRelocs 
        je         false__hla_4148
        subl       -12(%ebp), %edi 
        addl       $15, %edi 
        andl       $-16, %edi 
        addl       -12(%ebp), %edi 
        mov        -76(%ebp), %esi 
        imul       $8, numCodeRelocs, %ecx 
        rep movsb
false__hla_4148:
        cmpl       $0, numDataRelocs 
        je         false__hla_4149
        subl       -12(%ebp), %edi 
        addl       $15, %edi 
        andl       $-16, %edi 
        addl       -12(%ebp), %edi 
        mov        -80(%ebp), %esi 
        imul       $8, numDataRelocs, %ecx 
        rep movsb
false__hla_4149:
        pushl      24(%ebp) 
        call       FILEIO_OPENNEW
        mov        %eax, -20(%ebp) 
        pushl      -20(%ebp) 
        pushl      -12(%ebp) 
        pushl      -16(%ebp) 
        call       FILEIO_WRITE
        pushl      -20(%ebp) 
        call       FILEIO_CLOSE
        popl       %edi 
        popl       %esi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        popl       %eax 
xgenerateELF__hla_4100__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $24

/* procedure compileCOFF */

compileCOFF:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $32, %esp 
        pushl      %ebx 
        mov        16(%ebp), %ebx 
        mov        (%ebx), %eax 
        mov        %eax, -4(%ebp) 
        mov        12(%ebp), %ebx 
        mov        (%ebx), %eax 
        mov        %eax, -8(%ebp) 
        mov        8(%ebp), %ebx 
        mov        (%ebx), %eax 
        mov        %eax, -12(%ebp) 
        pushl      28(%ebp) 
        pushl      24(%ebp) 
        pushl      %ebp 
        addl       $-4, (%esp) 
        pushl      %ebp 
        addl       $-8, (%esp) 
        pushl      %ebp 
        addl       $-12, (%esp) 
        call       lexer
        pushl      -4(%ebp) 
        pushl      -8(%ebp) 
        pushl      -12(%ebp) 
        pushl      20(%ebp) 
        call       optimizeDisps
        pushl      36(%ebp) 
        pushl      32(%ebp) 
        pushl      -4(%ebp) 
        pushl      -8(%ebp) 
        pushl      -12(%ebp) 
        call       generateCOFF__hla_4026
        mov        16(%ebp), %ebx 
        mov        -4(%ebp), %eax 
        mov        %eax, (%ebx) 
        mov        12(%ebp), %ebx 
        mov        -8(%ebp), %eax 
        mov        %eax, (%ebx) 
        mov        8(%ebp), %ebx 
        mov        -12(%ebp), %eax 
        mov        %eax, (%ebx) 
        mov        $1, %eax 
xcompileCOFF__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $32

/* procedure compileELF */

compileELF:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $32, %esp 
        pushl      %ebx 
        mov        16(%ebp), %ebx 
        mov        (%ebx), %eax 
        mov        %eax, -4(%ebp) 
        mov        12(%ebp), %ebx 
        mov        (%ebx), %eax 
        mov        %eax, -8(%ebp) 
        mov        8(%ebp), %ebx 
        mov        (%ebx), %eax 
        mov        %eax, -12(%ebp) 
        pushl      32(%ebp) 
        pushl      28(%ebp) 
        pushl      %ebp 
        addl       $-4, (%esp) 
        pushl      %ebp 
        addl       $-8, (%esp) 
        pushl      %ebp 
        addl       $-12, (%esp) 
        call       lexer
        pushl      -4(%ebp) 
        pushl      -8(%ebp) 
        pushl      -12(%ebp) 
        pushl      20(%ebp) 
        call       optimizeDisps
        pushl      40(%ebp) 
        pushl      36(%ebp) 
        pushl      -4(%ebp) 
        pushl      -8(%ebp) 
        pushl      -12(%ebp) 
        pushl      24(%ebp) 
        call       generateELF__hla_4100
        mov        16(%ebp), %ebx 
        mov        -4(%ebp), %eax 
        mov        %eax, (%ebx) 
        mov        12(%ebp), %ebx 
        mov        -8(%ebp), %eax 
        mov        %eax, (%ebx) 
        mov        8(%ebp), %ebx 
        mov        -12(%ebp), %eax 
        mov        %eax, (%ebx) 
        xorl       %eax, %eax 
xcompileELF__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $36

/* procedure compileMACHO */

compileMACHO:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $12, %esp 
        pushl      28(%ebp) 
        pushl      24(%ebp) 
        pushl      %ebp 
        addl       $-4, (%esp) 
        pushl      %ebp 
        addl       $-8, (%esp) 
        pushl      %ebp 
        addl       $-12, (%esp) 
        call       lexer
        pushl      -4(%ebp) 
        pushl      -8(%ebp) 
        pushl      -12(%ebp) 
        pushl      20(%ebp) 
        call       optimizeDisps
        mov        $1, %eax 
        pushl      $str__hla_4165 
        call       STDERR_PUTS
        xorl       %eax, %eax 
xcompileMACHO__hla_:
        pushl      %edi 
        pushl      %ecx 
        mov        16(%ebp), %edi 
        mov        -4(%ebp), %ecx 
        mov        %ecx, (%edi) 
        mov        12(%ebp), %edi 
        mov        -8(%ebp), %ecx 
        mov        %ecx, (%edi) 
        mov        8(%ebp), %edi 
        mov        -12(%ebp), %ecx 
        mov        %ecx, (%edi) 
        popl       %ecx 
        popl       %edi 
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $32

/* procedure compile__hla_4167 */

compile__hla_4167:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $28, %esp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %esi 
        pushl      %edi 
        mov        %esp, saveESP__hla_3331 
        mov        ExceptionPtr__hla_, %eax 
        mov        %eax, SaveSEHPointer__hla_3330 
        call       BuildExcepts__hla_
        pushl      %ebp 
        addl       $-28, (%esp) 
        call       CONV_GETDELIMITERS
        pushl      $0 
        pushl      $0 
        pushl      $11008 
        pushl      $0 
        pushl      %ebp 
        addl       $-28, (%esp) 
        call       CSET_SETUNION
        pushl      -16(%ebp) 
        pushl      -20(%ebp) 
        pushl      -24(%ebp) 
        pushl      -28(%ebp) 
        call       CONV_SETDELIMITERS
        cmpb       $0, 8(%ebp) 
        je         false__hla_4170
        pushl      $str__hla_4171 
        call       STDOUT_PUTS
        pushl      40(%ebp) 
        call       STDOUT_PUTS
        pushl      $str__hla_4172 
        call       STDOUT_PUTS
        pushl      36(%ebp) 
        call       STDOUT_PUTS
        pushl      $str__hla_4173 
        call       STDOUT_PUTS
false__hla_4170:
        pushl      $exception__hla_4175 
        pushl      %ebp 
        .byte      0x64
        mov        0, %ebp 
        pushl      8(%ebp) 
        mov        4(%esp), %ebp 
        pushl      $HWexcept__hla_ 
        .byte      0x64
        pushl      0 
        .byte      0x64
        mov        %esp, 0 
        pushl      $65536 
        movl       $symbolTable, %esi 
        call       TABLE_CREATE
        pushl      $8192 
        movl       $equatesTable, %esi 
        call       TABLE_CREATE
        movzbl     24(%ebp), %eax 
        cmpl       $4, %eax 
        jg         default__hla_4176
        jmp *      jmpTbl__hla_4176(,%eax,4) 
case__hla_4177:
        pushl      40(%ebp) 
        pushl      36(%ebp) 
        pushl      32(%ebp) 
        pushl      28(%ebp) 
        pushl      8(%ebp) 
        pushl      %ebp 
        addl       $-4, (%esp) 
        pushl      %ebp 
        addl       $-8, (%esp) 
        pushl      %ebp 
        addl       $-12, (%esp) 
        call       compileCOFF
        jmp        endswitch__hla_4176
case__hla_4178:
        pushl      40(%ebp) 
        pushl      36(%ebp) 
        pushl      32(%ebp) 
        pushl      28(%ebp) 
        pushl      $1 
        pushl      8(%ebp) 
        pushl      %ebp 
        addl       $-4, (%esp) 
        pushl      %ebp 
        addl       $-8, (%esp) 
        pushl      %ebp 
        addl       $-12, (%esp) 
        call       compileELF
        jmp        endswitch__hla_4176
case__hla_4179:
        pushl      40(%ebp) 
        pushl      36(%ebp) 
        pushl      32(%ebp) 
        pushl      28(%ebp) 
        pushl      $2 
        pushl      8(%ebp) 
        pushl      %ebp 
        addl       $-4, (%esp) 
        pushl      %ebp 
        addl       $-8, (%esp) 
        pushl      %ebp 
        addl       $-12, (%esp) 
        call       compileELF
        jmp        endswitch__hla_4176
case__hla_4180:
        pushl      40(%ebp) 
        pushl      36(%ebp) 
        pushl      32(%ebp) 
        pushl      28(%ebp) 
        pushl      $3 
        pushl      8(%ebp) 
        pushl      %ebp 
        addl       $-4, (%esp) 
        pushl      %ebp 
        addl       $-8, (%esp) 
        pushl      %ebp 
        addl       $-12, (%esp) 
        call       compileELF
        jmp        endswitch__hla_4176
case__hla_4181:
        pushl      40(%ebp) 
        pushl      36(%ebp) 
        pushl      32(%ebp) 
        pushl      28(%ebp) 
        pushl      8(%ebp) 
        pushl      %ebp 
        addl       $-4, (%esp) 
        pushl      %ebp 
        addl       $-8, (%esp) 
        pushl      %ebp 
        addl       $-12, (%esp) 
        call       compileMACHO
        jmp        endswitch__hla_4176
default__hla_4176:
        pushl      $str__hla_4182 
        call       STDERR_PUTS
        mov        $1, %eax 
endswitch__hla_4176:
        .byte      0x64
        mov        0, %esp 
        .byte      0x64
        popl       0 
        addl       $8, %esp 
        popl       %ebp 
        addl       $4, %esp 
        jmp        endtry__hla_4174
exception__hla_4175:
        call       EX_PRINTEXCEPTIONERROR
        mov        $0, %eax 
endtry__hla_4174:
        cmpb       $0, verboseDebug__hla_3320 
        je         false__hla_4183
        call       STDOUT_NEWLN
        pushl      $str__hla_4184 
        call       STDOUT_PUTS
        movl       $symbolTable, %esi 
        mov        (%esi), %edi 
        pushl      $exitfor__hla_4185 
        call *     12(%edi) 
        pushl      %ebp 
        mov        8(%esp), %ebp 
        movl       %eax, %edx 
        pushl      8(%edx) 
        pushl      $-24 
        pushl      $32 
        call       STDOUT_PUTSSIZE
        pushl      $str__hla_4046 
        call       STDOUT_PUTS
        mov        4(%edx), %edx 
        mov        17(%edx), %ah 
        testb      $1, %ah 
        mov        $32, %al 
        jz         false__hla_4186
        mov        $88, %al 
false__hla_4186:
        pushl      %eax 
        call       STDOUT_PUTC
        testb      $2, %ah 
        mov        $32, %al 
        jz         false__hla_4187
        mov        $80, %al 
false__hla_4187:
        pushl      %eax 
        call       STDOUT_PUTC
        testb      $4, %ah 
        mov        $32, %al 
        jz         false__hla_4188
        mov        $82, %al 
false__hla_4188:
        pushl      %eax 
        call       STDOUT_PUTC
        testb      $8, %ah 
        mov        $32, %al 
        jz         false__hla_4189
        mov        $68, %al 
false__hla_4189:
        pushl      %eax 
        call       STDOUT_PUTC
        pushl      $str__hla_4190 
        call       STDOUT_PUTS
        pushl      12(%edx) 
        call       STDOUT_PUTD
        pushl      $str__hla_4191 
        call       STDOUT_PUTS
        pushl      $0 
        pushl      %eax 
        mov        16(%edx), %al 
        mov        %al, 4(%esp) 
        popl       %eax 
        call       STDOUT_PUTU8
        call       STDOUT_NEWLN
continue__hla_4185:
        popl       %ebp 
        ret        $4
exitfor__hla_4185:

        call       STDOUT_NEWLN
false__hla_4183:
        jmp        Exit_compile_hlabe__hla_4192

QuitMain__hla_:
        mov        $1, %eax 

Exit_compile_hlabe__hla_4192:
        mov        saveESP__hla_3331, %esp 
        pushl      %eax 
        mov        SaveSEHPointer__hla_3330, %eax 
        mov        %eax, ExceptionPtr__hla_ 
        mov        20(%ebp), %ecx 
        mov        -4(%ebp), %edx 
        mov        %edx, (%ecx) 
        mov        16(%ebp), %ecx 
        mov        -8(%ebp), %edx 
        mov        %edx, (%ecx) 
        mov        12(%ebp), %ecx 
        mov        -12(%ebp), %edx 
        mov        %edx, (%ecx) 
        popl       %eax 
        popl       %edi 
        popl       %esi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
xcompile__hla_4167__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $36

/* procedure _hlabe_compile */

_hlabe_compile:

/* procedure hlabe_compile */

hlabe_compile:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $2088, %esp 
        mov        %ebx, -4(%ebp) 
        mov        %ecx, -8(%ebp) 
        mov        %edx, -12(%ebp) 
        mov        %esi, -16(%ebp) 
        mov        %edi, -20(%ebp) 
        pushl      %ebp 
        addl       $-1064, (%esp) 
        pushl      $1024 
        call       STR_INIT
        mov        %eax, -24(%ebp) 
        pushl      %ebp 
        addl       $-2088, (%esp) 
        pushl      $1024 
        call       STR_INIT
        mov        %eax, -28(%ebp) 
        pushl      8(%ebp) 
        pushl      -24(%ebp) 
        call       STR_CPYZ
        pushl      12(%ebp) 
        pushl      -28(%ebp) 
        call       STR_CPYZ
        pushl      -24(%ebp) 
        pushl      -28(%ebp) 
        pushl      16(%ebp) 
        pushl      20(%ebp) 
        pushl      24(%ebp) 
        pushl      %ebp 
        addl       $-32, (%esp) 
        pushl      %ebp 
        addl       $-36, (%esp) 
        pushl      %ebp 
        addl       $-40, (%esp) 
        pushl      28(%ebp) 
        call       compile__hla_4167
        mov        -4(%ebp), %ebx 
        mov        -8(%ebp), %ecx 
        mov        -12(%ebp), %edx 
        mov        -16(%ebp), %esi 
        mov        -20(%ebp), %edi 
xhlabe_compile__hla_:
        movl       %ebp, %esp 
        popl       %ebp 
        ret




