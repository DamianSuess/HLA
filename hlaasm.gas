// Assembly code emitted by HLA compiler
// Version 1.102 build 18984 (prototype)
// HLA compiler written by Randall Hyde
// GAS compatible output






  .text


        .global    floor80
        .global    fadd80
        .global    addval
        .global    fabs80
        .global    fmul80
        .global    fdiv80
        .global    UnsToStr
        .global    ceil80
        .global    fmin80
        .global    InRange
        .global    fmax80
        .global    divval
        .global    fneg80
        .global    mulval
        .global    modval
        .global    BinStrToInt
        .global    fsub80
        .global    log1080
        .global    negval
        .global    notval
        .global    shrval
        .global    unsf80
        .global    shlval
        .global    subval
        .global    sqrt80
        .global    exp80
        .global    DecStrToInt
        .global    log80
        .global    fge80
        .global    flt80
        .global    atold
        .global    cos80
        .global    fne80
        .global    feq80
        .global    fgt80
        .global    fle80
        .global    real80to32
        .global    real80to64
        .global    sin80
        .global    tan80
        .global    strcpylc
        .global    MakeCompAsm
        .global    IntToStr
        .global    bigminInt
        .global    SearchNext
        .global    SearchHash
        .global    bigmaxInt
        .global    bigmaxUns
        .global    IntLE
        .global    IntGT
        .global    IntLT
        .global    bigminUns
        .global    IntGE
        .global    UnsGE
        .global    UnsLT
        .global    UnsGT
        .global    UnsLE
        .global    HexStrToInt
        .global    e80Str
        .global    compactType
        .global    f80int
        .global    lowercase
        .extern    HLAerror
        .extern    HWexcept__hla_
        .extern    abstract__hla_
        .extern    Raise__hla_
        .extern    HLAmalloc
        .extern    shortDfltExcept__hla_






  .data

        .extern    tbyte_ste
        .extern    uns32_ste
        .extern    uns16_ste
        .extern    uns64_ste
        .extern    ProcGlobal
        .extern    string_ste
        .extern    zstring_ste
        .extern    int8_ste
        .extern    qword_ste
        .extern    char_ste
        .extern    word_ste
        .extern    int128_ste
        .extern    byte_ste
        .extern    wchar_ste
        .extern    __imp__MessageBoxA@16
        .extern    real32_ste
        .extern    real64_ste
        .extern    cset_ste
        .extern    real80_ste
        .extern    int64_ste
        .extern    __imp__ExitProcess@4
        .extern    wstring_ste
        .extern    int32_ste
        .extern    int16_ste
        .extern    parmLookup
        .extern    boolean_ste
        .extern    real128_ste
        .extern    uns8_ste
        .extern    uns128_ste
        .extern    lword_ste
        .extern    dword_ste
saveESP__hla_31 :.space     4
typeTable__hla_32:
        .long      boolean_ste
        .long      boolean_ste
        .long      uns8_ste
        .long      uns16_ste
        .long      uns32_ste
        .long      uns64_ste
        .long      uns128_ste
        .long      byte_ste
        .long      word_ste
        .long      dword_ste
        .long      qword_ste
        .long      tbyte_ste
        .long      lword_ste
        .long      int8_ste
        .long      int16_ste
        .long      int32_ste
        .long      int64_ste
        .long      int128_ste
        .long      char_ste
        .long      wchar_ste
        .long      real32_ste
        .long      real64_ste
        .long      real80_ste
        .long      real128_ste
        .long      string_ste
        .long      zstring_ste
        .long      wstring_ste
        .long      cset_ste
tJmpTbl__hla_206:
        .long      isBoolean__hla_178
        .long      isEnum__hla_179
        .long      isUns8__hla_180
        .long      isUns16__hla_181
        .long      isUns32__hla_182
        .long      isUns64__hla_183
        .long      isUns128__hla_184
        .long      isByte__hla_185
        .long      isWord__hla_186
        .long      isDWord__hla_187
        .long      isQWord__hla_188
        .long      isTByte__hla_189
        .long      isLWord__hla_190
        .long      isInt8__hla_191
        .long      isInt16__hla_192
        .long      isInt32__hla_193
        .long      isInt64__hla_194
        .long      isInt128__hla_195
        .long      isChar__hla_196
        .long      isWChar__hla_197
        .long      isReal32__hla_198
        .long      isReal64__hla_199
        .long      isReal80__hla_200
        .long      Failure__hla_201
        .long      isString__hla_202
        .long      isZString__hla_203
        .long      isWString__hla_204
        .long      isCset__hla_205
jmpTbl__hla_508:
        .long      s__hla_256
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      s__hla_256
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      s__hla_256
        .long      Uns8Uns16__hla_258
        .long      Uns8Uns32__hla_259
        .long      Uns8Uns64__hla_260
        .long      Uns8Uns128__hla_261
        .long      Uns8Byte__hla_262
        .long      Uns8Word__hla_263
        .long      Uns8DWord__hla_264
        .long      Uns8QWord__hla_265
        .long      Uns8TByte__hla_266
        .long      Uns8LWord__hla_267
        .long      Uns8Int8__hla_268
        .long      Uns8Int16__hla_269
        .long      Uns8Int32__hla_270
        .long      Uns8Int64__hla_271
        .long      Uns8Int128__hla_272
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Uns16Uns8__hla_276
        .long      s__hla_256
        .long      Uns16Uns32__hla_277
        .long      Uns16Uns64__hla_278
        .long      Uns16Uns128__hla_279
        .long      Uns16Byte__hla_280
        .long      Uns16Word__hla_281
        .long      Uns16DWord__hla_282
        .long      Uns16QWord__hla_283
        .long      Uns16TByte__hla_284
        .long      Uns16LWord__hla_285
        .long      Uns16Int8__hla_286
        .long      Uns16Int16__hla_287
        .long      Uns16Int32__hla_288
        .long      Uns16Int64__hla_289
        .long      Uns16Int128__hla_290
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Uns32Uns8__hla_291
        .long      Uns32Uns16__hla_292
        .long      s__hla_256
        .long      Uns32Uns64__hla_293
        .long      Uns32Uns128__hla_294
        .long      Uns32Byte__hla_295
        .long      Uns32Word__hla_296
        .long      Uns32DWord__hla_297
        .long      Uns32QWord__hla_298
        .long      Uns32TByte__hla_299
        .long      Uns32LWord__hla_300
        .long      Uns32Int8__hla_301
        .long      Uns32Int16__hla_302
        .long      Uns32Int32__hla_303
        .long      Uns32Int64__hla_304
        .long      Uns32Int128__hla_305
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Uns64Uns8__hla_306
        .long      Uns64Uns16__hla_307
        .long      Uns64Uns32__hla_308
        .long      s__hla_256
        .long      Uns64Uns128__hla_309
        .long      Uns64Byte__hla_310
        .long      Uns64Word__hla_311
        .long      Uns64DWord__hla_312
        .long      Uns64QWord__hla_313
        .long      Uns64TByte__hla_314
        .long      Uns64LWord__hla_315
        .long      Uns64Int8__hla_316
        .long      Uns64Int16__hla_317
        .long      Uns64Int32__hla_318
        .long      Uns64Int64__hla_319
        .long      Uns64Int128__hla_320
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Uns128Uns8__hla_321
        .long      Uns128Uns16__hla_322
        .long      Uns128Uns32__hla_323
        .long      Uns128Uns64__hla_324
        .long      s__hla_256
        .long      Uns64Byte__hla_310
        .long      Uns64Word__hla_311
        .long      Uns64DWord__hla_312
        .long      Uns64QWord__hla_313
        .long      Uns64TByte__hla_314
        .long      Uns64LWord__hla_315
        .long      Uns64Int8__hla_316
        .long      Uns64Int16__hla_317
        .long      Uns64Int32__hla_318
        .long      Uns64Int64__hla_319
        .long      Uns64Int128__hla_320
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      ByteUns8__hla_325
        .long      ByteUns16__hla_326
        .long      ByteUns32__hla_327
        .long      ByteUns64__hla_328
        .long      ByteUns128__hla_329
        .long      s__hla_256
        .long      ByteWord__hla_330
        .long      ByteDWord__hla_331
        .long      ByteQWord__hla_332
        .long      ByteTByte__hla_333
        .long      ByteLWord__hla_334
        .long      ByteInt8__hla_335
        .long      ByteInt16__hla_336
        .long      ByteInt32__hla_337
        .long      ByteInt64__hla_338
        .long      ByteInt128__hla_339
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      WordUns8__hla_340
        .long      WordUns16__hla_341
        .long      WordUns32__hla_342
        .long      WordUns64__hla_343
        .long      WordUns128__hla_344
        .long      WordByte__hla_345
        .long      s__hla_256
        .long      WordDWord__hla_346
        .long      WordQWord__hla_347
        .long      WordTByte__hla_348
        .long      WordLWord__hla_349
        .long      WordInt8__hla_350
        .long      WordInt16__hla_351
        .long      WordInt32__hla_352
        .long      WordInt64__hla_353
        .long      WordInt128__hla_354
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      DWordUns8__hla_355
        .long      DWordUns16__hla_356
        .long      DWordUns32__hla_357
        .long      DWordUns64__hla_358
        .long      DWordUns128__hla_359
        .long      DWordByte__hla_360
        .long      DWordWord__hla_361
        .long      s__hla_256
        .long      DWordQWord__hla_362
        .long      DWordTByte__hla_363
        .long      DWordLWord__hla_364
        .long      DWordInt8__hla_365
        .long      DWordInt16__hla_366
        .long      DWordInt32__hla_367
        .long      DWordInt64__hla_368
        .long      DWordInt128__hla_369
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      QWordUns8__hla_370
        .long      QWordUns16__hla_371
        .long      QWordUns32__hla_372
        .long      QWordUns64__hla_373
        .long      QWordUns128__hla_374
        .long      QWordByte__hla_375
        .long      QWordWord__hla_376
        .long      QWordDWord__hla_377
        .long      s__hla_256
        .long      QWordTByte__hla_378
        .long      QWordLWord__hla_379
        .long      QWordInt8__hla_380
        .long      QWordInt16__hla_381
        .long      QWordInt32__hla_382
        .long      QWordInt64__hla_383
        .long      QWordInt128__hla_384
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      TByteUns8__hla_385
        .long      TByteUns16__hla_386
        .long      TByteUns32__hla_387
        .long      TByteUns64__hla_388
        .long      TByteUns128__hla_389
        .long      TByteByte__hla_390
        .long      TByteWord__hla_391
        .long      TByteDWord__hla_392
        .long      TByteQWord__hla_393
        .long      s__hla_256
        .long      TByteLWord__hla_394
        .long      TByteInt8__hla_395
        .long      TByteInt16__hla_396
        .long      TByteInt32__hla_397
        .long      TByteInt64__hla_398
        .long      TByteInt128__hla_399
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      LWordUns8__hla_400
        .long      LWordUns16__hla_401
        .long      LWordUns32__hla_402
        .long      LWordUns64__hla_403
        .long      LWordUns128__hla_404
        .long      LWordByte__hla_405
        .long      LWordWord__hla_406
        .long      LWordDWord__hla_407
        .long      LWordQWord__hla_408
        .long      LWordTByte__hla_409
        .long      s__hla_256
        .long      LWordInt8__hla_410
        .long      LWordInt16__hla_411
        .long      LWordInt32__hla_412
        .long      LWordInt64__hla_413
        .long      LWordInt128__hla_414
        .long      x__hla_257
        .long      x__hla_257
        .long      UnsReal32__hla_273
        .long      UnsReal64__hla_274
        .long      UnsReal80__hla_275
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Int8Uns8__hla_415
        .long      Int8Uns16__hla_416
        .long      Int8Uns32__hla_417
        .long      Int8Uns64__hla_418
        .long      Int8Uns128__hla_419
        .long      Int8Byte__hla_420
        .long      Int8Word__hla_421
        .long      Int8DWord__hla_422
        .long      Int8QWord__hla_423
        .long      Int8TByte__hla_424
        .long      Int8LWord__hla_425
        .long      s__hla_256
        .long      Int8Int16__hla_426
        .long      Int8Int32__hla_427
        .long      Int8Int64__hla_428
        .long      Int8Int128__hla_429
        .long      x__hla_257
        .long      x__hla_257
        .long      IntReal32__hla_430
        .long      IntReal64__hla_431
        .long      IntReal80__hla_432
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Int16Uns8__hla_433
        .long      Int16Uns16__hla_434
        .long      Int16Uns32__hla_435
        .long      Int16Uns64__hla_436
        .long      Int16Uns128__hla_437
        .long      Int16Byte__hla_438
        .long      Int16Word__hla_439
        .long      Int16DWord__hla_440
        .long      Int16QWord__hla_441
        .long      Int16TByte__hla_442
        .long      Int16LWord__hla_443
        .long      Int16Int8__hla_444
        .long      s__hla_256
        .long      Int16Int32__hla_445
        .long      Int16Int64__hla_446
        .long      Int16Int128__hla_447
        .long      x__hla_257
        .long      x__hla_257
        .long      IntReal32__hla_430
        .long      IntReal64__hla_431
        .long      IntReal80__hla_432
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Int32Uns8__hla_448
        .long      Int32Uns16__hla_449
        .long      Int32Uns32__hla_450
        .long      Int32Uns64__hla_451
        .long      Int32Uns128__hla_452
        .long      Int32Byte__hla_453
        .long      Int32Word__hla_454
        .long      Int32DWord__hla_455
        .long      Int32QWord__hla_456
        .long      Int32TByte__hla_457
        .long      Int32LWord__hla_458
        .long      Int32Int8__hla_459
        .long      Int32Int16__hla_460
        .long      s__hla_256
        .long      Int32Int64__hla_461
        .long      Int32Int128__hla_462
        .long      x__hla_257
        .long      x__hla_257
        .long      IntReal32__hla_430
        .long      IntReal64__hla_431
        .long      IntReal80__hla_432
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Int64Uns8__hla_463
        .long      Int64Uns16__hla_464
        .long      Int64Uns32__hla_465
        .long      Int64Uns64__hla_466
        .long      Int64Uns128__hla_467
        .long      Int64Byte__hla_468
        .long      Int64Word__hla_469
        .long      Int64DWord__hla_470
        .long      Int64QWord__hla_471
        .long      Int64TByte__hla_472
        .long      Int64LWord__hla_473
        .long      Int64Int8__hla_474
        .long      Int64Int16__hla_475
        .long      Int64Int32__hla_476
        .long      s__hla_256
        .long      Int64Int128__hla_477
        .long      x__hla_257
        .long      x__hla_257
        .long      IntReal32__hla_430
        .long      IntReal64__hla_431
        .long      IntReal80__hla_432
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Int128Uns8__hla_478
        .long      Int128Uns16__hla_479
        .long      Int128Uns32__hla_480
        .long      Int128Uns64__hla_481
        .long      Int128Uns128__hla_482
        .long      Int128Byte__hla_483
        .long      Int128Word__hla_484
        .long      Int128DWord__hla_485
        .long      Int128QWord__hla_486
        .long      Int128TByte__hla_487
        .long      Int128LWord__hla_488
        .long      Int128Int8__hla_489
        .long      Int128Int16__hla_490
        .long      Int128Int32__hla_491
        .long      Int128Int64__hla_492
        .long      s__hla_256
        .long      x__hla_257
        .long      x__hla_257
        .long      IntReal32__hla_430
        .long      IntReal64__hla_431
        .long      IntReal80__hla_432
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      s__hla_256
        .long      CharWChar__hla_493
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      CharString__hla_494
        .long      CharString__hla_494
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      WCharChar__hla_495
        .long      s__hla_256
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Real32Uns__hla_496
        .long      Real32Uns__hla_496
        .long      Real32Uns__hla_496
        .long      Real32Uns__hla_496
        .long      Real32Uns__hla_496
        .long      Real32Uns__hla_496
        .long      Real32Uns__hla_496
        .long      Real32Uns__hla_496
        .long      Real32Uns__hla_496
        .long      Real32Uns__hla_496
        .long      Real32Uns__hla_496
        .long      Real32Int__hla_497
        .long      Real32Int__hla_497
        .long      Real32Int__hla_497
        .long      Real32Int__hla_497
        .long      Real32Int__hla_497
        .long      x__hla_257
        .long      x__hla_257
        .long      s__hla_256
        .long      Real3264__hla_498
        .long      Real3280__hla_499
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Real64Uns__hla_500
        .long      Real64Uns__hla_500
        .long      Real64Uns__hla_500
        .long      Real64Uns__hla_500
        .long      Real64Uns__hla_500
        .long      Real64Uns__hla_500
        .long      Real64Uns__hla_500
        .long      Real64Uns__hla_500
        .long      Real64Uns__hla_500
        .long      Real64Uns__hla_500
        .long      Real64Uns__hla_500
        .long      Real64Int__hla_501
        .long      Real64Int__hla_501
        .long      Real64Int__hla_501
        .long      Real64Int__hla_501
        .long      Real64Int__hla_501
        .long      x__hla_257
        .long      x__hla_257
        .long      Real6432__hla_502
        .long      s__hla_256
        .long      Real6480__hla_503
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      Real80Uns__hla_504
        .long      Real80Uns__hla_504
        .long      Real80Uns__hla_504
        .long      Real80Uns__hla_504
        .long      Real80Uns__hla_504
        .long      Real80Uns__hla_504
        .long      Real80Uns__hla_504
        .long      Real80Uns__hla_504
        .long      Real80Uns__hla_504
        .long      Real80Uns__hla_504
        .long      Real80Uns__hla_504
        .long      Real80Int__hla_505
        .long      Real80Int__hla_505
        .long      Real80Int__hla_505
        .long      Real80Int__hla_505
        .long      Real80Int__hla_505
        .long      x__hla_257
        .long      x__hla_257
        .long      Real8032__hla_506
        .long      Real6432__hla_502
        .long      s__hla_256
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      s__hla_256
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      StringChar__hla_507
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      s__hla_256
        .long      s__hla_256
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      StringChar__hla_507
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      x__hla_257
        .long      s__hla_256
        .long      s__hla_256
ten__hla_835 :.long  0xa
fcw__hla_866 :.word  0xfff
fcwSave__hla_884 :.space     2
fcw__hla_885 :.space     2
fcwSave__hla_893 :.space     2
fcw__hla_894 :.space     2
SaveCW__hla_905 :.space     2
MaskedCW__hla_906 :.space     2
PotTbl__hla_908:
        .byte      0x9b,0x97,0x20,0x8a,0x2,0x52,0x60,0xc4,0x25,0x75
        .byte      0xe5,0x5d,0x3d,0xc5,0x5d,0x3b,0x8b,0x9e,0x92,0x5a
        .byte      0x17,0xc,0x75,0x81,0x86,0x75,0x76,0xc9,0x48,0x4d
        .byte      0xc7,0x91,0xe,0xa6,0xae,0xa0,0x19,0xe3,0xa3,0x46
        .byte      0x8e,0xde,0xf9,0x9d,0xfb,0xeb,0x7e,0xaa,0x51,0x43
        .byte      0xe0,0x8c,0xe9,0x80,0xc9,0x47,0xba,0x93,0xa8,0x41
        .byte      0xd5,0xa6,0xcf,0xff,0x49,0x1f,0x78,0xc2,0xd3,0x40
        .byte      0x9e,0xb5,0x70,0x2b,0xa8,0xad,0xc5,0x9d,0x69,0x40
        .byte      0x0,0x0,0x0,0x4,0xbf,0xc9,0x1b,0x8e,0x34,0x40
        .byte      0x0,0x0,0x0,0x0,0x0,0x20,0xbc,0xbe,0x19,0x40
        .byte      0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x9c,0xc,0x40
        .byte      0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc8,0x5,0x40
        .byte      0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0,0x2,0x40
        .byte      0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0xff,0x3f
Delimiters__hla_909 :.byte  0x1,0x26,0x0,0x0,0x1,0x10,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
TenTo17__hla_965:
        .byte      0x0,0x0,0x0,0xc5,0x2e,0xbc,0xa2,0xb1,0x37,0x40
TenTo16__hla_966:
        .byte      0x0,0x0,0x0,0x4,0xbf,0xc9,0x1b,0x8e,0x34,0x40
OneE10__hla_967:
        .byte      0x0,0x0,0x0,0x0,0x0,0xf9,0x2,0x95,0x20,0x40
OneEm10__hla_968:
        .byte      0xbf,0xd5,0xed,0xbd,0xce,0xfe,0xe6,0xdb,0xdd,0x3f
Ten__hla_969:
        .byte      0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0,0x2,0x40
FiveEm18__hla_970:
        .byte      0x64,0xb4,0xa4,0x36,0x32,0xaa,0x77,0xb8,0xc5,0x3f
temp__hla_971 :.space     8
Digits__hla_991 :.space     32
Exponent__hla_992 :.space     4
Sign__hla_993 :.space     1




  .text


        .balign    (4)
len__hla_521 :.long      0x38
        .long      0x38
str__hla_521:

 .ascii "Unsigned value is out of range, cannot convert to real32"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .balign    (4)
len__hla_522 :.long      0xa
        .long      0xa
str__hla_522:

 .ascii "hlaasm.hla"
 .byte 0

 .byte 0

        .balign    (4)
len__hla_528 :.long      0x38
        .long      0x38
str__hla_528:

 .ascii "Unsigned value is out of range, cannot convert to real64"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .balign    (4)
len__hla_541 :.long      0x38
        .long      0x38
str__hla_541:

 .ascii "Unsigned value is out of range, cannot convert to real80"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .balign    (4)
len__hla_632 :.long      0x29
        .long      0x29
str__hla_632:

 .ascii "'-' operand must be numeric or cset value"
 .byte 0

 .byte 0
 .byte 0
jmpTbl__hla_607:
        .long      (case__hla_619+0)
        .long      (case__hla_621+0)
        .long      (case__hla_623+0)
        .long      (case__hla_625+0)
        .long      (case__hla_627+0)
        .long      (case__hla_609+0)
        .long      (case__hla_611+0)
        .long      (case__hla_613+0)
        .long      (case__hla_615+0)
        .long      (case__hla_616+0)
        .long      (case__hla_618+0)
        .long      (case__hla_608+0)
        .long      (case__hla_610+0)
        .long      (case__hla_612+0)
        .long      (case__hla_614+0)
        .long      (case__hla_617+0)
        .long      (default__hla_607+0)
        .long      (default__hla_607+0)
        .long      (case__hla_628+0)
        .long      (case__hla_629+0)
        .long      (case__hla_630+0)
        .long      (default__hla_607+0)
        .long      (default__hla_607+0)
        .long      (default__hla_607+0)
        .long      (default__hla_607+0)
        .long      (case__hla_631+0)

        .balign    (4)
len__hla_652 :.long      0x2c
        .long      0x2c
str__hla_652:

 .ascii "'!' operand must be boolean or integer value"
 .byte 0

 .byte 0
 .byte 0
 .byte 0
jmpTbl__hla_635:
        .long      (case__hla_636+0)
        .long      (default__hla_635+0)
        .long      (case__hla_639+0)
        .long      (case__hla_642+0)
        .long      (case__hla_643+0)
        .long      (case__hla_646+0)
        .long      (case__hla_651+0)
        .long      (case__hla_637+0)
        .long      (case__hla_640+0)
        .long      (case__hla_644+0)
        .long      (case__hla_647+0)
        .long      (case__hla_649+0)
        .long      (case__hla_651+0)
        .long      (case__hla_637+0)
        .long      (case__hla_640+0)
        .long      (case__hla_644+0)
        .long      (case__hla_647+0)
        .long      (case__hla_651+0)
jmpTbl__hla_654:
        .long      (case__hla_655+0)
        .long      (case__hla_661+0)
        .long      (case__hla_668+0)
        .long      (case__hla_673+0)
        .long      (case__hla_680+0)
        .long      (case__hla_659+0)
        .long      (case__hla_665+0)
        .long      (case__hla_671+0)
        .long      (case__hla_676+0)
        .long      (case__hla_678+0)
        .long      (case__hla_681+0)
        .long      (case__hla_657+0)
        .long      (case__hla_664+0)
        .long      (case__hla_670+0)
        .long      (case__hla_675+0)
        .long      (case__hla_682+0)
        .long      (default__hla_654+0)
        .long      (default__hla_654+0)
        .long      (case__hla_683+0)
        .long      (case__hla_684+0)
        .long      (case__hla_685+0)
        .long      (default__hla_654+0)
        .long      (default__hla_654+0)
        .long      (default__hla_654+0)
        .long      (default__hla_654+0)
        .long      (case__hla_686+0)
jmpTbl__hla_688:
        .long      (case__hla_689+0)
        .long      (case__hla_693+0)
        .long      (case__hla_697+0)
        .long      (case__hla_701+0)
        .long      (case__hla_706+0)
        .long      (case__hla_692+0)
        .long      (case__hla_696+0)
        .long      (case__hla_700+0)
        .long      (case__hla_704+0)
        .long      (case__hla_705+0)
        .long      (case__hla_707+0)
        .long      (case__hla_691+0)
        .long      (case__hla_695+0)
        .long      (case__hla_699+0)
        .long      (case__hla_703+0)
        .long      (case__hla_708+0)
        .long      (default__hla_688+0)
        .long      (default__hla_688+0)
        .long      (case__hla_709+0)
        .long      (case__hla_710+0)
        .long      (case__hla_711+0)
        .long      (default__hla_688+0)
        .long      (default__hla_688+0)
        .long      (default__hla_688+0)
        .long      (default__hla_688+0)
        .long      (case__hla_712+0)
jmpTbl__hla_716:
        .long      (case__hla_717+0)
        .long      (case__hla_717+0)
        .long      (case__hla_717+0)
        .long      (case__hla_717+0)
        .long      (case__hla_717+0)
        .long      (case__hla_723+0)
        .long      (case__hla_723+0)
        .long      (case__hla_723+0)
        .long      (case__hla_723+0)
        .long      (case__hla_723+0)
        .long      (case__hla_723+0)
        .long      (case__hla_730+0)
        .long      (case__hla_730+0)
        .long      (case__hla_730+0)
        .long      (case__hla_730+0)
        .long      (case__hla_730+0)
        .long      (default__hla_716+0)
        .long      (default__hla_716+0)
        .long      (case__hla_739+0)
        .long      (case__hla_740+0)
        .long      (case__hla_741+0)
        .long      (default__hla_716+0)
        .long      (default__hla_716+0)
        .long      (default__hla_716+0)
        .long      (default__hla_716+0)
        .long      (case__hla_742+0)

        .balign    (4)
len__hla_751 :.long      0x1a
        .long      0x1a
str__hla_751:

 .ascii "Attempted division by zero"
 .byte 0

 .byte 0
jmpTbl__hla_748:
        .long      (case__hla_749+0)
        .long      (case__hla_749+0)
        .long      (case__hla_749+0)
        .long      (case__hla_749+0)
        .long      (case__hla_749+0)
        .long      (case__hla_757+0)
        .long      (case__hla_757+0)
        .long      (case__hla_757+0)
        .long      (case__hla_757+0)
        .long      (case__hla_757+0)
        .long      (case__hla_757+0)
        .long      (case__hla_765+0)
        .long      (case__hla_765+0)
        .long      (case__hla_765+0)
        .long      (case__hla_765+0)
        .long      (case__hla_765+0)
        .long      (default__hla_748+0)
        .long      (default__hla_748+0)
        .long      (case__hla_775+0)
        .long      (case__hla_777+0)
        .long      (case__hla_780+0)
jmpTbl__hla_785:
        .long      (case__hla_786+0)
        .long      (case__hla_786+0)
        .long      (case__hla_786+0)
        .long      (case__hla_786+0)
        .long      (case__hla_786+0)
        .long      (case__hla_793+0)
        .long      (case__hla_793+0)
        .long      (case__hla_793+0)
        .long      (case__hla_793+0)
        .long      (case__hla_793+0)
        .long      (case__hla_793+0)
        .long      (case__hla_801+0)
        .long      (case__hla_801+0)
        .long      (case__hla_801+0)
        .long      (case__hla_801+0)
        .long      (case__hla_801+0)

        .balign    (4)
len__hla_844 :.long      0x25
        .long      0x25
str__hla_844:

 .ascii "Decimal integer constant is too large"
 .byte 0

 .byte 0
 .byte 0

        .balign    (4)
len__hla_852 :.long      0x1c
        .long      0x1c
str__hla_852:

 .ascii "Binary constant is too large"
 .byte 0

 .byte 0
 .byte 0
 .byte 0

        .balign    (4)
len__hla_860 :.long      0x21
        .long      0x21
str__hla_860:

 .ascii "Hexadecimal constant is too large"
 .byte 0

 .byte 0
 .byte 0
jmpTbl__hla_111:
        .long      NextInList__hla_112
        .long      ecx1__hla_113
        .long      ecx2__hla_114
        .long      ecx3__hla_115
        .long      ecx4__hla_116
        .long      ecx5__hla_117
        .long      ecx6__hla_118
        .long      ecx7__hla_119
        .long      ecx8__hla_120
        .long      ecx9__hla_121
        .long      ecx10__hla_122
        .long      ecx11__hla_123
        .long      ecx12__hla_124
        .long      ecx13__hla_125
        .long      ecx14__hla_126
        .long      ecx15__hla_127
        .long      ecx16__hla_128
        .long      ecx17__hla_129
        .long      ecx18__hla_130
        .long      ecx19__hla_131
        .long      ecx20__hla_132
        .long      ecx21__hla_133
        .long      ecx22__hla_134
        .long      ecx23__hla_135
        .long      ecx24__hla_136
        .long      ecx25__hla_137
        .long      ecx26__hla_138
        .long      ecx27__hla_139
        .long      ecx28__hla_140

/* procedure lowercase */

lowercase:
        mov        4(%esp), %edx 
        mov        $32, %al 

lcLoop__hla_100:
        incl       %edx 
        orb        %al, -1(%edx) 
        cmpb       -1(%edx), %al 
        jne        lcLoop__hla_100
        movb       $0, -1(%edx) 
        mov        4(%esp), %eax 
        ret
xlowercase:

/* procedure SearchHash */

SearchHash:
        pushl      %ebx 
        pushl      %esi 
        mov        12(%esp), %ebx 
        testl      %ebx, %ebx 
        jz         failure__hla_102
        mov        16(%esp), %edx 

whileLp__hla_103:
        mov        20(%esp), %ecx 
        cmpl       16(%ebx), %ecx 
        jne        NextInHashList__hla_104
        mov        8(%ebx), %esi 
        jmp        continue__hla_105
while__hla_105:
        subl       $4, %ecx 
        mov        (%edx,%ecx,1), %eax 
        cmpl       (%esi,%ecx,1), %eax 
        jne        NextInHashList__hla_104
continue__hla_105:
        cmpl       $4, %ecx 
        jae        while__hla_105
exitloop__hla_105:

        cmpl       $2, %ecx 
        jb         oneOrZero__hla_107
        ja         three__hla_108
        mov        (%edx), %ax 
        cmpw       (%esi), %ax 
        jne        NextInHashList__hla_104
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

three__hla_108:
        mov        (%edx), %ax 
        cmpw       (%esi), %ax 
        jne        NextInHashList__hla_104
        mov        2(%edx), %al 
        cmpb       2(%esi), %al 
        jne        NextInHashList__hla_104

success__hla_109:
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

oneOrZero__hla_107:
        testl      %ecx, %ecx 
        jz         success__hla_109
        mov        (%edx), %al 
        cmpb       (%esi), %al 
        jne        NextInHashList__hla_104
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

NextInHashList__hla_104:
        mov        4(%ebx), %ebx 
        testl      %ebx, %ebx 
        jnz        whileLp__hla_103

failure__hla_102:
        popl       %esi 
        popl       %ebx 
        xorl       %eax, %eax 
        ret
xSearchHash:

/* procedure SearchNext */

SearchNext:
        pushl      %ebx 
        pushl      %esi 
        mov        12(%esp), %ebx 
        testl      %ebx, %ebx 
        jz         failure__hla_141
        mov        16(%esp), %edx 

whileLp__hla_142:
        mov        20(%esp), %ecx 
        cmpl       16(%ebx), %ecx 
        jne        NextInList__hla_112
        mov        8(%ebx), %esi 
        cmpl       $28, %ecx 
        jae        ECXGT28__hla_143
        decl       %ecx 
        jmp *      jmpTbl__hla_111(,%ecx,4) 

ecx1__hla_113:
        mov        (%edx), %al 
        cmpb       (%esi), %al 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx2__hla_114:
        mov        (%edx), %ax 
        cmpw       (%esi), %ax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx3__hla_115:

ecx4__hla_116:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx5__hla_117:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %al 
        cmpb       4(%esi), %al 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx6__hla_118:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %ax 
        cmpw       4(%esi), %ax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx7__hla_119:

ecx8__hla_120:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx9__hla_121:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %al 
        cmpb       8(%esi), %al 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx10__hla_122:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %ax 
        cmpw       8(%esi), %ax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx11__hla_123:

ecx12__hla_124:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx13__hla_125:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %al 
        cmpb       12(%esi), %al 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx14__hla_126:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %ax 
        cmpw       12(%esi), %ax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx15__hla_127:

ecx16__hla_128:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %eax 
        cmpl       12(%esi), %eax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx17__hla_129:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %eax 
        cmpl       12(%esi), %eax 
        jne        NextInList__hla_112
        mov        16(%edx), %al 
        cmpb       16(%esi), %al 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx18__hla_130:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %eax 
        cmpl       12(%esi), %eax 
        jne        NextInList__hla_112
        mov        16(%edx), %ax 
        cmpw       16(%esi), %ax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx19__hla_131:

ecx20__hla_132:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %eax 
        cmpl       12(%esi), %eax 
        jne        NextInList__hla_112
        mov        16(%edx), %eax 
        cmpl       16(%esi), %eax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx21__hla_133:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %eax 
        cmpl       12(%esi), %eax 
        jne        NextInList__hla_112
        mov        16(%edx), %eax 
        cmpl       16(%esi), %eax 
        jne        NextInList__hla_112
        mov        20(%edx), %al 
        cmpb       20(%esi), %al 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx22__hla_134:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %eax 
        cmpl       12(%esi), %eax 
        jne        NextInList__hla_112
        mov        16(%edx), %eax 
        cmpl       16(%esi), %eax 
        jne        NextInList__hla_112
        mov        20(%edx), %ax 
        cmpw       20(%esi), %ax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx23__hla_135:

ecx24__hla_136:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %eax 
        cmpl       12(%esi), %eax 
        jne        NextInList__hla_112
        mov        16(%edx), %eax 
        cmpl       16(%esi), %eax 
        jne        NextInList__hla_112
        mov        20(%edx), %eax 
        cmpl       20(%esi), %eax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx25__hla_137:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %eax 
        cmpl       12(%esi), %eax 
        jne        NextInList__hla_112
        mov        16(%edx), %eax 
        cmpl       16(%esi), %eax 
        jne        NextInList__hla_112
        mov        20(%edx), %eax 
        cmpl       20(%esi), %eax 
        jne        NextInList__hla_112
        mov        24(%edx), %al 
        cmpb       24(%esi), %al 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx26__hla_138:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %eax 
        cmpl       12(%esi), %eax 
        jne        NextInList__hla_112
        mov        16(%edx), %eax 
        cmpl       16(%esi), %eax 
        jne        NextInList__hla_112
        mov        20(%edx), %eax 
        cmpl       20(%esi), %eax 
        jne        NextInList__hla_112
        mov        24(%edx), %ax 
        cmpw       24(%esi), %ax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ecx27__hla_139:

ecx28__hla_140:
        mov        (%edx), %eax 
        cmpl       (%esi), %eax 
        jne        NextInList__hla_112
        mov        4(%edx), %eax 
        cmpl       4(%esi), %eax 
        jne        NextInList__hla_112
        mov        8(%edx), %eax 
        cmpl       8(%esi), %eax 
        jne        NextInList__hla_112
        mov        12(%edx), %eax 
        cmpl       12(%esi), %eax 
        jne        NextInList__hla_112
        mov        16(%edx), %eax 
        cmpl       16(%esi), %eax 
        jne        NextInList__hla_112
        mov        20(%edx), %eax 
        cmpl       20(%esi), %eax 
        jne        NextInList__hla_112
        mov        24(%edx), %eax 
        cmpl       24(%esi), %eax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

ECXGT28__hla_143:
        jmp        continue__hla_144
while__hla_144:
        subl       $4, %ecx 
        mov        (%edx,%ecx,1), %eax 
        cmpl       (%esi,%ecx,1), %eax 
        jne        NextInList__hla_112
continue__hla_144:
        cmpl       $4, %ecx 
        jae        while__hla_144
exitloop__hla_144:

        cmpl       $2, %ecx 
        jb         oneOrZero__hla_146
        ja         three__hla_147
        mov        (%edx), %ax 
        cmpw       (%esi), %ax 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

three__hla_147:
        mov        (%edx), %ax 
        cmpw       (%esi), %ax 
        jne        NextInList__hla_112
        mov        2(%edx), %al 
        cmpb       2(%esi), %al 
        jne        NextInList__hla_112

success__hla_148:
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

oneOrZero__hla_146:
        testl      %ecx, %ecx 
        jz         success__hla_148
        mov        (%edx), %al 
        cmpb       (%esi), %al 
        jne        NextInList__hla_112
        movl       %ebx, %eax 
        popl       %esi 
        popl       %ebx 
        ret

NextInList__hla_112:
        cmpb       $0, parmLookup 
        jne        CheckEndParms__hla_149
        mov        (%ebx), %ebx 
        testl      %ebx, %ebx 
        jz         failure__hla_141
        jmp        whileLp__hla_142

CheckEndParms__hla_149:
        cmpl       ProcGlobal, %ebx 
        je         failure__hla_141
        mov        (%ebx), %ebx 
        testl      %ebx, %ebx 
        jnz        whileLp__hla_142
        popl       %esi 
        popl       %ebx 
        xorl       %eax, %eax 
        ret

failure__hla_141:
        popl       %esi 
        popl       %ebx 
        xorl       %eax, %eax 
        ret
xSearchNext:

/* procedure strcpylc */

strcpylc:
        mov        4(%esp), %edx 
        mov        8(%esp), %ecx 
        pushl      %ebx 
        xorl       %ebx, %ebx 
        subl       $1, %ecx 
        subl       $1, %edx 

cpyLoop__hla_151:
        addl       $1, %ecx 
        addl       $1, %edx 
        mov        (%ecx), %al 
        orb        $32, %al 
        rorb       $1, %bl 
        mov        %al, (%edx) 
        xorb       %al, %bl 
        cmpb       $32, %al 
        jnz        cpyLoop__hla_151
        movb       $0, (%edx) 
        movl       %edx, %eax 
        subl       8(%esp), %eax 
        mov        16(%esp), %edx 
        mov        %ebx, (%edx) 
        popl       %ebx 
        ret
xstrcpylc:

/* procedure compactType */

compactType:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %eax 
        pushl      %ebx 
        pushl      %edx 
        pushl      %esi 
        mov        8(%ebp), %esi 
        mov        12(%ebp), %ebx 
        movzbl     (%ebx), %edx 
        mov        $6, %al 
        cmpb       $6, %dl 
        jbe        ALtoDl__hla_153
        mov        $12, %al 
        cmpb       $12, %dl 
        jbe        ALtoDl__hla_153
        mov        $17, %al 

ALtoDl__hla_153:
        movb       %al, %dl 
        cmpb       $17, %dl 
        jne        false__hla_154
        cmpb       $0, 15(%esi) 
        jnl        false__hla_154
        mov        $-1, %eax 
        cmpl       12(%esi), %eax 
        jne        false__hla_156
        cmpl       8(%esi), %eax 
        jne        false__hla_156
        cmpb       $0, 7(%esi) 
        jnl        false__hla_156
        decb       %dl 
        cmpb       $11, %dl 
        jne        false__hla_159
        decb       %dl 
false__hla_159:
        cmpl       4(%esi), %eax 
        jne        false__hla_160
        cmpb       $0, 3(%esi) 
        jnl        false__hla_160
        decb       %dl 
        cmpw       2(%esi), %ax 
        jne        false__hla_162
        cmpb       $0, 1(%esi) 
        jnl        false__hla_162
        decb       %dl 
        cmpb       1(%esi), %al 
        jne        false__hla_164
        cmpb       $0, (%esi) 
        jnl        false__hla_164
        decb       %dl 
false__hla_164:
false__hla_162:
false__hla_160:
        jmp        endif__hla_156
false__hla_156:
        cmpb       $12, %dl 
        jne        false__hla_166
        cmpl       12(%esi), %eax 
        jne        false__hla_167
        cmpw       10(%esi), %ax 
        jne        false__hla_167
        cmpb       $0, 9(%esi) 
        jnl        false__hla_167
        mov        $11, %dl 
false__hla_167:
false__hla_166:
endif__hla_156:
        jmp        endif__hla_154
false__hla_154:
        mov        12(%esi), %eax 
        orl        8(%esi), %eax 
        jnz        false__hla_170
        cmpb       $12, %dl 
        jne        false__hla_171
        decb       %dl 
false__hla_171:
        decb       %dl 
        cmpl       4(%esi), %eax 
        jne        false__hla_172
        decb       %dl 
        cmpw       2(%esi), %ax 
        jne        false__hla_173
        decb       %dl 
        cmpb       1(%esi), %al 
        jne        false__hla_174
        decb       %dl 
false__hla_174:
false__hla_173:
false__hla_172:
        jmp        endif__hla_170
false__hla_170:
        cmpb       $12, %dl 
        jne        false__hla_175
        movzwl     10(%esi), %eax 
        orl        12(%esi), %eax 
        jnz        false__hla_176
        mov        $11, %dl 
false__hla_176:
false__hla_175:
endif__hla_170:
endif__hla_154:
        mov        %dl, (%ebx) 
        mov        typeTable__hla_32(,%edx,4), %eax 
        mov        16(%ebp), %ebx 
        mov        %eax, (%ebx) 
        popl       %esi 
        popl       %edx 
        popl       %ebx 
        popl       %eax 
xcompactType:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure InRange */

InRange:
        pushl      %ebx 
        pushl      %edx 
        mov        12(%esp), %ebx 
        movzbl     20(%esp), %eax 
        movzbl     16(%esp), %edx 
        cmpb       $44, %dl 
        je         isString__hla_202
        cmpb       $35, %dl 
        je         isPointer__hla_207
        cmpb       $33, %dl 
        je         isPointer__hla_207
        cmpb       $28, %dl 
        jae        Failure__hla_201
        jmp *      tJmpTbl__hla_206(,%edx,4) 

isBoolean__hla_178:

isEnum__hla_179:

isCset__hla_205:

isWString__hla_204:

Failure__hla_201:
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isUns8__hla_180:
        cmpb       $2, %al 
        jb         Failure__hla_201
        cmpb       $12, %al 
        jbe        doUns8Uns__hla_208
        cmpb       $17, %al 
        ja         Failure__hla_201
        mov        (%ebx), %eax 
        cmpl       $127, %eax 
        ja         Failure__hla_201
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jne        Failure__hla_201

setUns8__hla_209:
        mov        24(%esp), %ebx 
        movb       $2, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $uns8_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doUns8Uns__hla_208:
        mov        (%ebx), %eax 
        cmpl       $255, %eax 
        ja         Failure__hla_201
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setUns8__hla_209
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isUns16__hla_181:
        cmpb       $2, %al 
        jb         Failure__hla_201
        cmpb       $12, %al 
        jbe        doUns16Uns__hla_210
        cmpb       $17, %al 
        ja         Failure__hla_201
        mov        (%ebx), %eax 
        cmpl       $32767, %eax 
        ja         Failure__hla_201
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jne        Failure__hla_201

setUns16__hla_211:
        mov        24(%esp), %ebx 
        movb       $3, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $uns16_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doUns16Uns__hla_210:
        movzwl     2(%ebx), %eax 
        orl        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setUns16__hla_211
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isUns32__hla_182:
        cmpb       $2, %al 
        jb         Failure__hla_201
        cmpb       $12, %al 
        jbe        doUns32Uns__hla_212
        cmpb       $17, %al 
        ja         Failure__hla_201
        mov        (%ebx), %eax 
        cmpl       $2147483647, %eax 
        ja         Failure__hla_201
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jne        Failure__hla_201

setUns32__hla_213:
        mov        24(%esp), %ebx 
        movb       $4, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $uns32_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doUns32Uns__hla_212:
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setUns32__hla_213
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isUns64__hla_183:
        cmpb       $2, %al 
        jb         Failure__hla_201
        cmpb       $12, %al 
        jbe        doUns64Uns__hla_214
        cmpb       $17, %al 
        ja         Failure__hla_201
        mov        4(%ebx), %eax 
        cmpl       $2147483647, %eax 
        ja         Failure__hla_201
        mov        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jne        Failure__hla_201

setUns64__hla_215:
        mov        24(%esp), %ebx 
        movb       $5, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $uns64_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doUns64Uns__hla_214:
        mov        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setUns64__hla_215
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isUns128__hla_184:
        cmpb       $2, %al 
        jb         Failure__hla_201
        cmpb       $12, %al 
        jbe        setUns128__hla_216
        cmpb       $17, %al 
        ja         Failure__hla_201
        cmpb       $0, 15(%ebx) 
        jl         Failure__hla_201

setUns128__hla_216:
        mov        24(%esp), %ebx 
        movb       $6, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $uns128_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isByte__hla_185:
        cmpb       $19, %al 
        ja         Failure__hla_201
        movzbl     1(%ebx), %eax 
        orw        2(%ebx), %ax 
        orl        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setByte__hla_217
        movsbl     (%ebx), %eax 
        movb       %ah, %al 
        andb       1(%ebx), %al 
        andw       2(%ebx), %ax 
        andl       4(%ebx), %eax 
        andl       8(%ebx), %eax 
        andl       12(%ebx), %eax 
        cmpl       $-1, %eax 
        jne        Failure__hla_201

setByte__hla_217:
        mov        24(%esp), %ebx 
        movb       $7, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $byte_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isWord__hla_186:
        cmpb       $19, %al 
        ja         Failure__hla_201
        movzwl     2(%ebx), %eax 
        orl        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setWord__hla_218
        movsbl     1(%ebx), %eax 
        movb       %ah, %al 
        andw       2(%ebx), %ax 
        andl       4(%ebx), %eax 
        andl       8(%ebx), %eax 
        andl       12(%ebx), %eax 
        cmpl       $-1, %eax 
        jne        Failure__hla_201

setWord__hla_218:
        mov        24(%esp), %ebx 
        movb       $8, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $word_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isDWord__hla_187:
        cmpb       $19, %al 
        ja         checkPtrDW__hla_219
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setDWord__hla_220
        movsbl     3(%ebx), %eax 
        movb       %ah, %al 
        andl       4(%ebx), %eax 
        andl       8(%ebx), %eax 
        andl       12(%ebx), %eax 
        cmpl       $-1, %eax 
        jne        Failure__hla_201

setDWord__hla_220:
        mov        24(%esp), %ebx 
        movb       $9, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $dword_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

checkPtrDW__hla_219:
        cmpb       $35, %al 
        je         Success__hla_221
        cmpb       $33, %al 
        je         Success__hla_221
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isQWord__hla_188:
        cmpb       $19, %al 
        ja         Failure__hla_201
        mov        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setQWord__hla_222
        movsbl     7(%ebx), %eax 
        movb       %ah, %al 
        cmpl       8(%ebx), %eax 
        jne        Failure__hla_201
        cmpl       12(%ebx), %eax 
        jne        Failure__hla_201

setQWord__hla_222:
        mov        24(%esp), %ebx 
        movb       $10, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $qword_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isTByte__hla_189:
        cmpb       $19, %al 
        ja         Failure__hla_201
        movzwl     10(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setTByte__hla_223
        movsbl     9(%ebx), %eax 
        movb       %ah, %al 
        cmpw       10(%ebx), %ax 
        jne        Failure__hla_201
        cmpl       12(%ebx), %eax 
        jne        Failure__hla_201

setTByte__hla_223:
        mov        24(%esp), %ebx 
        movb       $11, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $tbyte_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isLWord__hla_190:
        cmpb       $19, %al 
        ja         Failure__hla_201
        mov        24(%esp), %ebx 
        movb       $12, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $lword_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isInt8__hla_191:
        cmpb       $2, %al 
        jb         Failure__hla_201
        cmpb       $6, %al 
        jbe        doInt8Uns__hla_224
        cmpb       $12, %al 
        jbe        doInt8Hex__hla_225
        cmpb       $17, %al 
        ja         Failure__hla_201
        mov        (%ebx), %eax 
        cdq
        cmpl       $-128, %eax 
        jl         Failure__hla_201
        cmpl       $127, %eax 
        jg         Failure__hla_201
        cmpl       4(%ebx), %edx 
        jne        Failure__hla_201
        cmpl       8(%ebx), %edx 
        jne        Failure__hla_201
        cmpl       12(%ebx), %edx 
        jne        Failure__hla_201

setInt8__hla_226:
        movsbl     (%ebx), %eax 
        mov        %eax, (%ebx) 
        movb       %ah, %al 
        mov        %eax, 4(%ebx) 
        mov        %eax, 8(%ebx) 
        mov        %eax, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $13, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $int8_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doInt8Hex__hla_225:
        movzbl     1(%ebx), %eax 
        orw        2(%ebx), %ax 
        orl        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jz         setInt8__hla_226
        mov        (%ebx), %eax 
        movb       %ah, %al 
        andl       4(%ebx), %eax 
        andl       8(%ebx), %eax 
        andl       12(%ebx), %eax 
        cmpl       $-1, %eax 
        je         setInt8__hla_226
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doInt8Uns__hla_224:
        mov        (%ebx), %eax 
        cmpl       $127, %eax 
        ja         FailureI8U__hla_227
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setInt8__hla_226

FailureI8U__hla_227:
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isInt16__hla_192:
        cmpb       $2, %al 
        jb         int16Failure__hla_228
        cmpb       $6, %al 
        jbe        doInt16Uns__hla_229
        cmpb       $12, %al 
        jbe        doInt16Hex__hla_230
        cmpb       $17, %al 
        ja         int16Failure__hla_228
        mov        (%ebx), %eax 
        cdq
        cmpl       $-32768, %eax 
        jl         int16Failure__hla_228
        cmpl       $32768, %eax 
        jg         int16Failure__hla_228
        cmpl       4(%ebx), %edx 
        jne        int16Failure__hla_228
        cmpl       8(%ebx), %edx 
        jne        int16Failure__hla_228
        cmpl       12(%ebx), %edx 
        jne        int16Failure__hla_228

setInt16__hla_231:
        movsbl     1(%ebx), %eax 
        movb       %ah, %al 
        mov        %ax, 2(%ebx) 
        mov        %eax, 4(%ebx) 
        mov        %eax, 8(%ebx) 
        mov        %eax, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $14, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $int16_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doInt16Hex__hla_230:
        movzwl     2(%ebx), %eax 
        orl        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jz         setInt16__hla_231
        movsbl     1(%ebx), %eax 
        movb       %ah, %al 
        andw       2(%ebx), %ax 
        andl       4(%ebx), %eax 
        andl       8(%ebx), %eax 
        andl       12(%ebx), %eax 
        cmpl       $-1, %eax 
        je         setInt16__hla_231
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doInt16Uns__hla_229:
        mov        (%ebx), %eax 
        cmpl       $32767, %eax 
        ja         int16Failure__hla_228
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setInt16__hla_231

int16Failure__hla_228:
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isInt32__hla_193:
        cmpb       $2, %al 
        jb         int32Failure__hla_232
        cmpb       $6, %al 
        jbe        doInt32Uns__hla_233
        cmpb       $12, %al 
        jbe        doInt32Hex__hla_234
        cmpb       $17, %al 
        ja         int32Failure__hla_232
        mov        (%ebx), %eax 
        cdq
        cmpl       4(%ebx), %edx 
        jne        int32Failure__hla_232
        cmpl       8(%ebx), %edx 
        jne        int32Failure__hla_232
        cmpl       12(%ebx), %edx 
        jne        int32Failure__hla_232

setInt32__hla_235:
        movsbl     3(%ebx), %eax 
        movb       %ah, %al 
        mov        %eax, 4(%ebx) 
        mov        %eax, 8(%ebx) 
        mov        %eax, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $15, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $int32_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doInt32Hex__hla_234:
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jz         setInt32__hla_235
        movsbl     3(%ebx), %eax 
        movb       %ah, %al 
        andl       4(%ebx), %eax 
        andl       8(%ebx), %eax 
        andl       12(%ebx), %eax 
        cmpl       $-1, %eax 
        je         setInt32__hla_235
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doInt32Uns__hla_233:
        mov        (%ebx), %eax 
        cmpl       $2147483647, %eax 
        ja         int32Failure__hla_232
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setInt32__hla_235

int32Failure__hla_232:
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isInt64__hla_194:
        cmpb       $2, %al 
        jb         int64Failure__hla_236
        cmpb       $6, %al 
        jbe        doInt64Uns__hla_237
        cmpb       $12, %al 
        jbe        doInt64Hex__hla_238
        cmpb       $17, %al 
        ja         int64Failure__hla_236
        mov        (%ebx), %eax 
        cdq
        cmpl       8(%ebx), %edx 
        jne        int64Failure__hla_236
        cmpl       12(%ebx), %edx 
        jne        int64Failure__hla_236

setInt64__hla_239:
        movsbl     7(%ebx), %eax 
        movb       %ah, %al 
        mov        %eax, 8(%ebx) 
        mov        %eax, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $16, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $int64_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doInt64Hex__hla_238:
        mov        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jz         setInt64__hla_239
        movsbl     7(%ebx), %eax 
        movb       %ah, %al 
        andl       8(%ebx), %eax 
        andl       12(%ebx), %eax 
        cmpl       $-1, %eax 
        je         setInt64__hla_239
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

doInt64Uns__hla_237:
        mov        4(%ebx), %eax 
        cmpl       $2147483647, %eax 
        ja         int64Failure__hla_236
        mov        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        je         setInt64__hla_239

int64Failure__hla_236:
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isInt128__hla_195:
        cmpb       $2, %al 
        jb         int128Failure__hla_240
        cmpb       $6, %al 
        jb         setInt128__hla_241
        je         TryInt128Uns__hla_242
        cmpb       $17, %al 
        ja         int128Failure__hla_240

setInt128__hla_241:
        mov        24(%esp), %ebx 
        movb       $17, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $int128_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

TryInt128Uns__hla_242:
        cmpb       $128, 15(%ebx) 
        jb         setInt128__hla_241

int128Failure__hla_240:
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isReal32__hla_198:
        cmpb       $2, %al 
        jb         int128Failure__hla_240
        cmpb       $12, %al 
        jbe        IsReal32Uns__hla_243
        cmpb       $17, %al 
        jbe        IsReal32Int__hla_244
        cmpb       $20, %al 
        jb         int128Failure__hla_240
        je         real32Success__hla_245
        cmpb       $21, %al 
        je         IsReal3264__hla_246
        cmpb       $22, %al 
        jne        int128Failure__hla_240
        fldt       (%ebx) 
        fstps      (%ebx) 
        movl       $0, 4(%ebx) 
        movl       $0, 8(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $20, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real32_ste, (%ebx) 

real32Success__hla_245:
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

IsReal3264__hla_246:
        fldl       (%ebx) 
        fstps      (%ebx) 
        movl       $0, 4(%ebx) 
        movl       $0, 8(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $20, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real32_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

IsReal32Uns__hla_243:
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jnz        Failure__hla_201
        mov        (%ebx), %eax 
        andl       $-8388608, %eax 
        jnz        Failure__hla_201
        filds      (%ebx) 
        fstps      (%ebx) 
        movl       $0, 4(%ebx) 
        movl       $0, 8(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $20, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real32_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

IsReal32Int__hla_244:
        movsbl     2(%ebx), %eax 
        movb       %ah, %al 
        cmpl       4(%ebx), %eax 
        jne        Failure__hla_201
        cmpl       8(%ebx), %eax 
        jne        Failure__hla_201
        cmpl       12(%ebx), %eax 
        jne        Failure__hla_201
        filds      (%ebx) 
        fstps      (%ebx) 
        movl       $0, 4(%ebx) 
        movl       $0, 8(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $20, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real32_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isReal64__hla_199:
        cmpb       $2, %al 
        jb         Failure__hla_201
        cmpb       $12, %al 
        jbe        IsReal64Uns__hla_247
        cmpb       $17, %al 
        jbe        IsReal64Int__hla_248
        cmpb       $20, %al 
        je         IsReal6432__hla_249
        cmpb       $21, %al 
        je         Success__hla_221
        cmpb       $22, %al 
        jne        Failure__hla_201
        fldt       (%ebx) 
        fstpl      (%ebx) 
        movl       $0, 8(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $21, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real64_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

IsReal6432__hla_249:
        flds       (%ebx) 
        fstpl      (%ebx) 
        movl       $0, 8(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $21, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real64_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

IsReal64Uns__hla_247:
        mov        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jnz        Failure__hla_201
        mov        4(%ebx), %eax 
        andl       $-1048576, %eax 
        jnz        Failure__hla_201
        fildl      (%ebx) 
        fstpl      (%ebx) 
        movl       $0, 8(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $21, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real64_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

IsReal64Int__hla_248:
        mov        6(%ebx), %al 
        shlb       $4, %al 
        movsbl     %al, %eax 
        movb       %ah, %al 
        cmpl       4(%ebx), %eax 
        jne        Failure__hla_201
        cmpl       8(%ebx), %eax 
        jne        Failure__hla_201
        cmpl       12(%ebx), %eax 
        jne        Failure__hla_201
        fildl      (%ebx) 
        fstpl      (%ebx) 
        movl       $0, 8(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $21, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real64_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isReal80__hla_200:
        cmpb       $2, %al 
        jb         Failure__hla_201
        cmpb       $12, %al 
        jbe        IsReal80Uns__hla_250
        cmpb       $17, %al 
        jbe        IsReal80Int__hla_251
        cmpb       $20, %al 
        je         IsReal8032__hla_252
        cmpb       $22, %al 
        je         Success__hla_221
        cmpb       $21, %al 
        jne        Failure__hla_201
        fldl       (%ebx) 
        fstpt      (%ebx) 
        movw       $0, 10(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $22, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real80_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

IsReal8032__hla_252:
        flds       (%ebx) 
        fstpt      (%ebx) 
        movw       $0, 10(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $22, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real80_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

IsReal80Uns__hla_250:
        mov        7(%ebx), %al 
        andl       $128, %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jnz        Failure__hla_201
        fildl      (%ebx) 
        fstpt      (%ebx) 
        movw       $0, 10(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $22, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real80_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

IsReal80Int__hla_251:
        movsbl     7(%ebx), %eax 
        movb       %ah, %al 
        cmpl       8(%ebx), %eax 
        jne        Failure__hla_201
        cmpl       12(%ebx), %eax 
        jne        Failure__hla_201
        fildl      (%ebx) 
        fstpt      (%ebx) 
        movw       $0, 10(%ebx) 
        movl       $0, 12(%ebx) 
        mov        24(%esp), %ebx 
        movb       $22, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $real80_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isZString__hla_203:

isString__hla_202:

isText__hla_253:
        cmpb       $24, %al 
        je         Success__hla_221
        cmpb       $35, %al 
        je         Success__hla_221
        cmpb       $18, %al 
        jne        Failure__hla_201
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      $4 
        call       HLAmalloc
        addl       $4, %esp 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        popl       %edi 
        popl       %esi 
        mov        (%ebx), %dl 
        mov        %dl, (%eax) 
        movb       $0, 1(%eax) 
        mov        %eax, (%ebx) 
        mov        24(%esp), %ebx 
        movb       $24, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $string_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isChar__hla_196:
        cmpb       $18, %al 
        je         Success__hla_221
        cmpb       $19, %al 
        jne        Failure__hla_201
        cmpb       $0, 1(%ebx) 
        jne        Failure__hla_201
        mov        24(%esp), %ebx 
        movb       $18, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $char_ste, (%ebx) 
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isWChar__hla_197:
        cmpb       $19, %al 
        je         Success__hla_221
        cmpb       $18, %al 
        jne        Failure__hla_201
        movb       $0, (%ebx) 
        mov        24(%esp), %ebx 
        movb       $19, (%ebx) 
        mov        28(%esp), %ebx 
        movl       $wchar_ste, (%ebx) 

Success__hla_221:
        mov        $1, %eax 
        popl       %edx 
        popl       %ebx 
        ret

isProcptr__hla_254:

isPointer__hla_207:
        cmpb       $35, %al 
        je         Success__hla_221
        cmpb       $33, %al 
        je         Success__hla_221
        cmpb       $9, %al 
        je         Success__hla_221
        xorl       %eax, %eax 
        popl       %edx 
        popl       %ebx 
        ret
xInRange:

/* procedure MakeCompAsm */

MakeCompAsm:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        mov        8(%ebp), %ebx 
        mov        12(%ebp), %ecx 
        mov        16(%ebp), %edi 
        mov        20(%ebp), %esi 
        movzbl     (%ebx), %eax 
        movzbl     (%ecx), %edx 
        cmpb       $35, %al 
        je         LPointer__hla_510
        cmpb       $35, %dl 
        je         RPointer__hla_511
        cmpb       $33, %al 
        je         LProcptr__hla_512
        cmpb       $33, %dl 
        je         RProcptr__hla_513
        cmpb       $24, %al 
        ja         L515__hla_
        cmpb       $24, %dl 
        jna        false__hla_514
L515__hla_:
        xorl       %eax, %eax 
        jmp        exit__hla_509
false__hla_514:
        imul       $26, %eax, %eax 
        addl       %edx, %eax 
        jmp *      jmpTbl__hla_508(,%eax,4) 

LPointer__hla_510:
        cmpb       $24, %dl 
        je         Success__hla_516
        cmpb       $9, %dl 
        je         Success__hla_516
        cmpb       $35, %dl 
        je         Success__hla_516
        cmpb       $33, %dl 
        je         Success__hla_516
        xorl       %eax, %eax 
        jmp        exit__hla_509

RPointer__hla_511:
        cmpb       $24, %al 
        je         Success__hla_516
        cmpb       $9, %al 
        je         Success__hla_516
        cmpb       $35, %al 
        je         Success__hla_516
        cmpb       $33, %al 
        je         Success__hla_516
        xorl       %eax, %eax 
        jmp        exit__hla_509

LProcptr__hla_512:
        cmpb       $9, %dl 
        je         Success__hla_516
        cmpb       $35, %dl 
        je         Success__hla_516
        cmpb       $33, %dl 
        je         Success__hla_516
        xorl       %eax, %eax 
        jmp        exit__hla_509

RProcptr__hla_513:
        cmpb       $9, %al 
        je         Success__hla_516
        cmpb       $35, %al 
        je         Success__hla_516
        cmpb       $33, %al 
        je         Success__hla_516
        xorl       %eax, %eax 
        jmp        exit__hla_509

CharWChar__hla_493:
        mov        24(%ebp), %eax 
        movb       $0, 1(%eax) 
        movb       $19, (%ebx) 
        movl       $wchar_ste, (%edi) 

Success__hla_516:
        mov        $1, %eax 
        jmp        exit__hla_509

WCharChar__hla_495:
        mov        28(%ebp), %eax 
        movb       $0, 1(%eax) 
        movb       $19, (%ecx) 
        movl       $wchar_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

CharString__hla_494:
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      $8 
        call       HLAmalloc
        addl       $4, %esp 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        popl       %edi 
        popl       %esi 
        mov        24(%ebp), %edx 
        mov        (%edx), %ch 
        mov        %ch, (%eax) 
        movb       $0, 1(%eax) 
        mov        %eax, (%edx) 
        movb       $24, (%ebx) 
        movl       $string_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509

StringChar__hla_507:
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      $8 
        call       HLAmalloc
        addl       $4, %esp 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        popl       %edi 
        popl       %esi 
        mov        28(%ebp), %edx 
        mov        (%edx), %bh 
        mov        %bh, (%eax) 
        movb       $0, 1(%eax) 
        mov        %eax, (%edx) 
        movb       $24, (%ecx) 
        movl       $string_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

UnsReal32__hla_273:
        mov        24(%ebp), %eax 
        cmpl       $0, 4(%eax) 
        jne        false__hla_517
        cmpl       $0, 8(%eax) 
        jne        false__hla_517
        cmpl       $0, 12(%eax) 
        jne        false__hla_517
        testw      $65408, 2(%eax) 
        jnz        false__hla_520
        filds      (%eax) 
        fstps      (%eax) 
        movb       $20, (%ebx) 
        movl       $real32_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509
false__hla_520:
false__hla_517:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $4030 

        pushl      $str__hla_521 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        jmp        exit__hla_509

Real32Uns__hla_496:
        mov        28(%ebp), %eax 
        cmpl       $0, 4(%eax) 
        jne        false__hla_523
        cmpl       $0, 8(%eax) 
        jne        false__hla_523
        cmpl       $0, 12(%eax) 
        jne        false__hla_523
        testw      $65408, 2(%eax) 
        jnz        false__hla_526
        filds      (%eax) 
        fstps      (%eax) 
        movb       $20, (%ecx) 
        movl       $real32_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509
false__hla_526:
false__hla_523:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $4068 

        pushl      $str__hla_521 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        jmp        exit__hla_509

IntReal32__hla_430:
        mov        24(%ebp), %edx 
        fildl      (%edx) 
        fstps      (%edx) 
        movb       $20, (%ebx) 
        movl       $real32_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Real32Int__hla_497:
        mov        28(%ebp), %edx 
        fildl      (%edx) 
        fstps      (%edx) 
        movb       $20, (%ecx) 
        movl       $real32_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Real3264__hla_498:
        mov        24(%ebp), %eax 
        flds       (%eax) 
        fstpl      (%eax) 
        movb       $21, (%ebx) 
        movl       $real64_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Real3280__hla_499:
        mov        24(%ebp), %eax 
        flds       (%eax) 
        fstpt      (%eax) 
        movb       $22, (%ebx) 
        movl       $real80_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509

UnsReal64__hla_274:
        mov        24(%ebp), %edx 
        mov        6(%edx), %eax 
        andl       $65520, %eax 
        orl        8(%edx), %eax 
        orl        12(%edx), %eax 
        jnz        false__hla_527
        fildl      (%edx) 
        fstpl      (%edx) 
        movb       $21, (%ebx) 
        movl       $real64_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509
false__hla_527:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $4165 

        pushl      $str__hla_528 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        jmp        exit__hla_509

Real64Uns__hla_500:
        mov        28(%ebp), %edx 
        mov        6(%edx), %ax 
        andl       $65520, %eax 
        orl        8(%edx), %eax 
        orl        12(%edx), %eax 
        jnz        false__hla_529
        fildl      (%edx) 
        fstpl      (%edx) 
        movb       $21, (%ecx) 
        movl       $real64_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509
false__hla_529:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $4198 

        pushl      $str__hla_528 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        jmp        exit__hla_509

IntReal64__hla_431:
        mov        24(%ebp), %ecx 
        movswl     6(%ecx), %eax 
        cdq
        andw       $65528, %ax 
        jz         L533__hla_
        cmpw       $65528, %ax 
        jne        false__hla_530
L533__hla_:
        cmpl       8(%ecx), %edx 
        jne        false__hla_530
        cmpl       12(%ecx), %edx 
        jne        false__hla_530
        fildl      (%ecx) 
        fstpl      (%ecx) 
        movb       $21, (%ebx) 
        movl       $real64_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509
false__hla_530:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $4234 

        pushl      $str__hla_528 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        jmp        exit__hla_509

Real64Int__hla_501:
        mov        28(%ebp), %ebx 
        movswl     6(%ebx), %eax 
        cdq
        andw       $65528, %ax 
        jz         L537__hla_
        cmpw       $65528, %ax 
        jne        false__hla_534
L537__hla_:
        cmpl       8(%ebx), %edx 
        jne        false__hla_534
        cmpl       12(%ebx), %edx 
        jne        false__hla_534
        fildl      (%ebx) 
        fstpl      (%ebx) 
        movb       $21, (%ecx) 
        movl       $real64_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509
false__hla_534:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $4265 

        pushl      $str__hla_528 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        jmp        exit__hla_509

Real6432__hla_502:
        mov        28(%ebp), %eax 
        flds       (%eax) 
        fstpl      (%eax) 
        movb       $21, (%ecx) 
        movl       $real64_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Real6480__hla_503:
        mov        24(%ebp), %eax 
        fldl       (%eax) 
        fstpt      (%eax) 
        movb       $22, (%ebx) 
        movl       $real80_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509

UnsReal80__hla_275:
        mov        24(%ebp), %ecx 
        movsbl     7(%ecx), %eax 
        cdq
        testl      %edx, %edx 
        jne        false__hla_538
        cmpl       8(%ecx), %edx 
        jne        false__hla_538
        cmpl       12(%ecx), %edx 
        jne        false__hla_538
        fildl      (%ecx) 
        fstpt      (%ecx) 
        movb       $22, (%ebx) 
        movl       $real80_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509
false__hla_538:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $4327 

        pushl      $str__hla_541 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        jmp        exit__hla_509

Real80Uns__hla_504:
        mov        28(%ebp), %ebx 
        movsbl     7(%ebx), %eax 
        cdq
        testl      %edx, %edx 
        jne        false__hla_542
        cmpl       8(%ebx), %edx 
        jne        false__hla_542
        cmpl       12(%ebx), %edx 
        jne        false__hla_542
        fildl      (%ebx) 
        fstpt      (%ebx) 
        movb       $22, (%ecx) 
        movl       $real80_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509
false__hla_542:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $4354 

        pushl      $str__hla_541 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        jmp        exit__hla_509

IntReal80__hla_432:
        mov        24(%ebp), %ecx 
        movsbl     7(%ecx), %eax 
        cdq
        testl      %edx, %edx 
        je         L548__hla_
        cmpl       $-1, %edx 
        jne        false__hla_545
L548__hla_:
        cmpl       8(%ecx), %edx 
        jne        false__hla_545
        cmpl       12(%ecx), %edx 
        jne        false__hla_545
        fildl      (%ecx) 
        fstpt      (%ecx) 
        movb       $22, (%ebx) 
        movl       $real80_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509
false__hla_545:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $4388 

        pushl      $str__hla_541 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        jmp        exit__hla_509

Real80Int__hla_505:
        mov        28(%ebp), %ebx 
        movsbl     7(%ebx), %eax 
        cdq
        testl      %edx, %edx 
        je         L552__hla_
        cmpl       $-1, %edx 
        jne        false__hla_549
L552__hla_:
        cmpl       8(%ebx), %edx 
        jne        false__hla_549
        cmpl       12(%ebx), %edx 
        jne        false__hla_549
        fildl      (%ebx) 
        fstpt      (%ebx) 
        movb       $22, (%ecx) 
        movl       $real80_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509
false__hla_549:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $4418 

        pushl      $str__hla_541 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        jmp        exit__hla_509

Real8032__hla_506:
        mov        28(%ebp), %eax 
        flds       (%eax) 
        fstpt      (%eax) 
        movb       $22, (%ecx) 
        movl       $real80_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Real8064__hla_553:
        mov        28(%ebp), %eax 
        fldl       (%eax) 
        fstpt      (%eax) 
        movb       $22, (%ecx) 
        movl       $real80_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Uns8Byte__hla_262:

ByteUns8__hla_325:
        movb       $2, (%ecx) 
        movl       $uns8_ste, (%esi) 
        movb       $2, (%ebx) 
        movl       $uns8_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Uns8Word__hla_263:

Uns16Word__hla_281:

Uns8Uns16__hla_258:

ByteUns16__hla_326:

WordUns16__hla_341:

Uns16Uns8__hla_276:

Uns16Byte__hla_280:

WordUns8__hla_340:
        movb       $3, (%ebx) 
        movl       $uns16_ste, (%edi) 
        movb       $3, (%ecx) 
        movl       $uns16_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Uns8DWord__hla_264:

Uns16DWord__hla_282:

Uns32DWord__hla_297:

ByteUns32__hla_327:

Uns8Uns32__hla_259:

Uns16Uns32__hla_277:

WordUns32__hla_342:

DWordUns32__hla_357:

Uns32Uns8__hla_291:

Uns32Byte__hla_295:

Uns32Word__hla_296:

Uns32Uns16__hla_292:

DWordUns8__hla_355:

DWordUns16__hla_356:
        movb       $4, (%ebx) 
        movl       $uns32_ste, (%edi) 
        movb       $4, (%ecx) 
        movl       $uns32_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Uns8Int8__hla_268:
        mov        24(%ebp), %eax 
        cmpb       $128, (%eax) 
        jnae       false__hla_554
        movb       $14, (%ebx) 
        movl       $int16_ste, (%edi) 
        movb       $14, (%ecx) 
        movl       $int16_ste, (%esi) 
        jmp        endif__hla_554
false__hla_554:
        movb       $13, (%ebx) 
        movl       $int8_ste, (%edi) 
endif__hla_554:
        mov        $1, %eax 
        jmp        exit__hla_509

Int8Uns8__hla_415:
        mov        28(%ebp), %eax 
        cmpb       $128, (%eax) 
        jnae       false__hla_555
        movb       $14, (%ebx) 
        movl       $int16_ste, (%edi) 
        movb       $14, (%ecx) 
        movl       $int16_ste, (%esi) 
        jmp        endif__hla_555
false__hla_555:
        movb       $13, (%ecx) 
        movl       $int8_ste, (%esi) 
endif__hla_555:
        mov        $1, %eax 
        jmp        exit__hla_509

Int8Byte__hla_420:

ByteInt8__hla_335:
        movb       $13, (%ecx) 
        movl       $int8_ste, (%esi) 
        movb       $13, (%ecx) 
        movl       $int8_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Uns8Int16__hla_269:

Int8Int16__hla_426:

Int16Int8__hla_444:

ByteInt16__hla_336:

Int16Byte__hla_438:

Int16Uns8__hla_433:

Int16Word__hla_439:

Int8Word__hla_421:

WordInt8__hla_350:

WordInt16__hla_351:
        movb       $14, (%ecx) 
        movl       $int16_ste, (%esi) 
        movb       $14, (%ebx) 
        movl       $int16_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Int8DWord__hla_422:

Int8Int32__hla_427:

Int16DWord__hla_440:

Int16Int32__hla_445:

Int32Uns8__hla_448:

Int32Uns16__hla_449:

Int32Int8__hla_459:

Int32Int16__hla_460:

Int32Byte__hla_453:

Int32Word__hla_454:

Int32DWord__hla_455:

Uns8Int32__hla_270:

Uns16Int32__hla_288:

ByteInt32__hla_337:

WordInt32__hla_352:

DWordInt8__hla_365:

DWordInt16__hla_366:

DWordInt32__hla_367:
        movb       $15, (%ecx) 
        movl       $int32_ste, (%esi) 
        movb       $15, (%ebx) 
        movl       $int32_ste, (%edi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Uns8Int64__hla_271:

Uns16Int64__hla_289:

Uns32Int64__hla_304:

Int64Uns8__hla_463:

Int64Uns16__hla_464:

Int64Uns32__hla_465:

Int8Int64__hla_428:

Int8QWord__hla_423:

Int16Int64__hla_446:

Int16QWord__hla_441:

Int32Int64__hla_461:

Int32QWord__hla_456:

Int64Int8__hla_474:

Int64Int16__hla_475:

Int64Int32__hla_476:

Int64Byte__hla_468:

Int64Word__hla_469:

Int64DWord__hla_470:

Int64QWord__hla_471:

ByteInt64__hla_338:

WordInt64__hla_353:

DWordInt64__hla_368:

QWordInt8__hla_380:

QWordInt16__hla_381:

QWordInt32__hla_382:

QWordInt64__hla_383:
        movb       $16, (%ebx) 
        movl       $int64_ste, (%edi) 
        movb       $16, (%ecx) 
        movl       $int64_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Uns8TByte__hla_266:

TByteUns8__hla_385:

Uns16TByte__hla_284:

TByteUns16__hla_386:

Uns32TByte__hla_299:

TByteUns32__hla_387:

Uns64TByte__hla_314:

TByteUns64__hla_388:

ByteTByte__hla_333:

TByteByte__hla_390:

WordTByte__hla_348:

TByteWord__hla_391:

DWordTByte__hla_363:

TByteDWord__hla_392:

QWordTByte__hla_378:

TByteQWord__hla_393:
        movb       $11, (%ebx) 
        movl       $tbyte_ste, (%edi) 
        movb       $11, (%ecx) 
        movl       $tbyte_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Int8TByte__hla_424:

TByteInt8__hla_395:

Int16TByte__hla_442:

TByteInt16__hla_396:

Int32TByte__hla_457:

TByteInt32__hla_397:

Int64TByte__hla_472:

TByteInt64__hla_398:
        movb       $17, (%ebx) 
        movl       $int128_ste, (%edi) 
        movb       $17, (%ecx) 
        movl       $int128_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Int8Uns16__hla_416:
        mov        28(%ebp), %eax 
        cmpb       $128, 1(%eax) 
        jnae       false__hla_556
        movb       $15, (%ebx) 
        movl       $int32_ste, (%edi) 
        movb       $15, (%ecx) 
        movl       $int32_ste, (%esi) 
        jmp        endif__hla_556
false__hla_556:
        movb       $14, (%ebx) 
        movl       $int16_ste, (%edi) 
        movb       $14, (%ecx) 
        movl       $int16_ste, (%esi) 
endif__hla_556:
        mov        $1, %eax 
        jmp        exit__hla_509

Uns16Int8__hla_286:
        mov        24(%ebp), %eax 
        cmpb       $128, 1(%eax) 
        jnae       false__hla_557
        movb       $15, (%ebx) 
        movl       $int32_ste, (%edi) 
        movb       $15, (%ecx) 
        movl       $int32_ste, (%esi) 
        jmp        endif__hla_557
false__hla_557:
        movb       $14, (%ebx) 
        movl       $int16_ste, (%edi) 
        movb       $14, (%ecx) 
        movl       $int16_ste, (%esi) 
endif__hla_557:
        mov        $1, %eax 
        jmp        exit__hla_509

Int8Uns32__hla_417:

Int16Uns32__hla_435:

Int32Uns32__hla_450:
        mov        28(%ebp), %eax 
        cmpb       $128, 3(%eax) 
        jnae       false__hla_558
        movb       $16, (%ebx) 
        movl       $int64_ste, (%edi) 
        movb       $16, (%ecx) 
        movl       $int64_ste, (%esi) 
        jmp        endif__hla_558
false__hla_558:
        movb       $15, (%ebx) 
        movl       $int32_ste, (%edi) 
        movb       $15, (%ecx) 
        movl       $int32_ste, (%esi) 
endif__hla_558:
        mov        $1, %eax 
        jmp        exit__hla_509

Uns32Int8__hla_301:

Uns32Int16__hla_302:

Uns32Int32__hla_303:
        mov        24(%ebp), %eax 
        cmpb       $128, 3(%eax) 
        jnae       false__hla_559
        movb       $16, (%ebx) 
        movl       $int64_ste, (%edi) 
        movb       $16, (%ecx) 
        movl       $int64_ste, (%esi) 
        jmp        endif__hla_559
false__hla_559:
        movb       $15, (%ebx) 
        movl       $int32_ste, (%edi) 
        movb       $15, (%ecx) 
        movl       $int32_ste, (%esi) 
endif__hla_559:
        mov        $1, %eax 
        jmp        exit__hla_509

Int8Uns64__hla_418:

Int16Uns64__hla_436:

Int32Uns64__hla_451:

Int64Uns64__hla_466:
        mov        28(%ebp), %eax 
        cmpb       $128, 7(%eax) 
        jnae       false__hla_560
        movb       $17, (%ebx) 
        movl       $int128_ste, (%edi) 
        movb       $17, (%ecx) 
        movl       $int128_ste, (%esi) 
        jmp        endif__hla_560
false__hla_560:
        movb       $16, (%ebx) 
        movl       $int64_ste, (%edi) 
        movb       $16, (%ecx) 
        movl       $int64_ste, (%esi) 
endif__hla_560:
        mov        $1, %eax 
        jmp        exit__hla_509

Uns64Int8__hla_316:

Uns64Int16__hla_317:

Uns64Int32__hla_318:

Uns64Int64__hla_319:
        mov        24(%ebp), %eax 
        cmpb       $128, 7(%eax) 
        jnae       false__hla_561
        movb       $17, (%ebx) 
        movl       $int128_ste, (%edi) 
        movb       $17, (%ecx) 
        movl       $int128_ste, (%esi) 
        jmp        endif__hla_561
false__hla_561:
        movb       $16, (%ebx) 
        movl       $int64_ste, (%edi) 
        movb       $16, (%ecx) 
        movl       $int64_ste, (%esi) 
endif__hla_561:
        mov        $1, %eax 
        jmp        exit__hla_509

Uns16Int16__hla_287:
        mov        24(%ebp), %eax 
        cmpb       $128, 1(%eax) 
        jnae       false__hla_562
        movb       $15, (%ebx) 
        movl       $int32_ste, (%edi) 
        movb       $15, (%ecx) 
        movl       $int32_ste, (%esi) 
        jmp        endif__hla_562
false__hla_562:
        movb       $14, (%ebx) 
        movl       $int16_ste, (%edi) 
endif__hla_562:
        mov        $1, %eax 
        jmp        exit__hla_509

Int16Uns16__hla_434:
        mov        28(%ebp), %eax 
        cmpb       $128, 1(%eax) 
        jnae       false__hla_563
        movb       $15, (%ebx) 
        movl       $int32_ste, (%edi) 
        movb       $15, (%ecx) 
        movl       $int32_ste, (%esi) 
        jmp        endif__hla_563
false__hla_563:
        movb       $14, (%ecx) 
        movl       $int16_ste, (%esi) 
endif__hla_563:
        mov        $1, %eax 
        jmp        exit__hla_509

Uns64Uns8__hla_306:

Uns64Byte__hla_310:

Uns64Word__hla_311:

Uns64Uns16__hla_307:

Uns64DWord__hla_312:

Uns64Uns32__hla_308:

QWordUns8__hla_370:

QWordUns16__hla_371:

QWordUns32__hla_372:

Uns8Uns64__hla_260:

Uns16Uns64__hla_278:

Uns32Uns64__hla_293:

Uns8QWord__hla_265:

Uns16QWord__hla_283:

Uns32QWord__hla_298:

Uns64QWord__hla_313:

ByteUns64__hla_328:

WordUns64__hla_343:

DWordUns64__hla_358:

QWordUns64__hla_373:
        movb       $5, (%ebx) 
        movl       $uns64_ste, (%edi) 
        movb       $5, (%ecx) 
        movl       $uns64_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Uns8Uns128__hla_261:

Uns16Uns128__hla_279:

Uns32Uns128__hla_294:

Uns64Uns128__hla_309:

Uns128Uns8__hla_321:

Uns128Uns16__hla_322:

Uns128Uns32__hla_323:

Uns128Uns64__hla_324:

Uns128Byte__hla_564:

Uns128Word__hla_565:

Uns128DWord__hla_566:

Uns128QWord__hla_567:

Uns128TByte__hla_568:

LWordUns8__hla_400:

LWordUns16__hla_401:

LWordUns32__hla_402:

LWordUns64__hla_403:

LWordUns128__hla_404:

Uns8LWord__hla_267:

Uns16LWord__hla_285:

Uns32LWord__hla_300:

Uns64LWord__hla_315:

ByteUns128__hla_329:

WordUns128__hla_344:

DWordUns128__hla_359:

QWordUns128__hla_374:

TByteUns128__hla_389:
        movb       $6, (%ebx) 
        movl       $uns128_ste, (%edi) 
        movb       $6, (%ecx) 
        movl       $uns128_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

Uns8Int128__hla_272:

Uns16Int128__hla_290:

Uns32Int128__hla_305:

Uns64Int128__hla_320:

Uns128Int8__hla_569:

Uns128Int16__hla_570:

Uns128Int32__hla_571:

Uns128Int64__hla_572:

Uns128Int128__hla_573:

ByteInt128__hla_339:

WordInt128__hla_354:

DWordInt128__hla_369:

QWordInt128__hla_384:

TByteInt128__hla_399:

LWordInt8__hla_410:

LWordInt16__hla_411:

LWordInt32__hla_412:

LWordInt64__hla_413:

LWordInt128__hla_414:

Int8Uns128__hla_419:

Int8Int128__hla_429:

Int8LWord__hla_425:

Int16Int128__hla_447:

Int16Uns128__hla_437:

Int16LWord__hla_443:

Int32Int128__hla_462:

Int32Uns128__hla_452:

Int32LWord__hla_458:

Int64Int128__hla_477:

Int64Uns128__hla_467:

Int64LWord__hla_473:

Int128Uns8__hla_478:

Int128Uns16__hla_479:

Int128Uns32__hla_480:

Int128Uns64__hla_481:

Int128Uns128__hla_482:

Int128Byte__hla_483:

Int128Word__hla_484:

Int128DWord__hla_485:

Int128QWord__hla_486:

Int128TByte__hla_487:

Int128LWord__hla_488:

Int128Int8__hla_489:

Int128Int16__hla_490:

Int128Int32__hla_491:

Int128Int64__hla_492:
        movb       $17, (%ebx) 
        movl       $int128_ste, (%edi) 
        movb       $17, (%ecx) 
        movl       $int128_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

ByteWord__hla_330:

WordByte__hla_345:
        movb       $8, (%ebx) 
        movl       $word_ste, (%edi) 
        movb       $8, (%ecx) 
        movl       $word_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

ByteDWord__hla_331:

WordDWord__hla_346:

DWordByte__hla_360:

DWordWord__hla_361:
        movb       $9, (%ebx) 
        movl       $dword_ste, (%edi) 
        movb       $9, (%ecx) 
        movl       $dword_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

ByteQWord__hla_332:

WordQWord__hla_347:

DWordQWord__hla_362:

QWordByte__hla_375:

QWordWord__hla_376:

QWordDWord__hla_377:
        movb       $10, (%ebx) 
        movl       $qword_ste, (%edi) 
        movb       $10, (%ecx) 
        movl       $qword_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

ByteLWord__hla_334:

WordLWord__hla_349:

DWordLWord__hla_364:

QWordLWord__hla_379:

TByteLWord__hla_394:

LWordByte__hla_405:

LWordWord__hla_406:

LWordDWord__hla_407:

LWordQWord__hla_408:

LWordTByte__hla_409:
        movb       $12, (%ebx) 
        movl       $lword_ste, (%edi) 
        movb       $12, (%ecx) 
        movl       $lword_ste, (%esi) 
        mov        $1, %eax 
        jmp        exit__hla_509

s__hla_256:
        mov        $1, %eax 
        jmp        exit__hla_509

x__hla_257:
        xorl       %eax, %eax 
exit__hla_509:
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
xMakeCompAsm:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure UnsLT */

UnsLT:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        mov        8(%ebp), %esi 
        mov        12(%ebp), %edi 
        xorl       %eax, %eax 
        mov        12(%esi), %ebx 
        cmpl       12(%edi), %ebx 
        setb       %al 
        jnz        false__hla_575
        mov        8(%esi), %ebx 
        cmpl       8(%edi), %ebx 
        setb       %al 
        jnz        false__hla_576
        mov        4(%esi), %ebx 
        cmpl       4(%edi), %ebx 
        setb       %al 
        jnz        false__hla_577
        mov        (%esi), %ebx 
        cmpl       (%edi), %ebx 
        setb       %al 
false__hla_577:
false__hla_576:
false__hla_575:
        popl       %ebx 
        popl       %edi 
        popl       %esi 
xUnsLT:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure UnsLE */

UnsLE:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        mov        8(%ebp), %esi 
        mov        12(%ebp), %edi 
        xorl       %eax, %eax 
        mov        12(%esi), %ebx 
        cmpl       12(%edi), %ebx 
        setb       %al 
        jnz        false__hla_579
        mov        8(%esi), %ebx 
        cmpl       8(%edi), %ebx 
        setb       %al 
        jnz        false__hla_580
        mov        4(%esi), %ebx 
        cmpl       4(%edi), %ebx 
        setb       %al 
        jnz        false__hla_581
        mov        (%esi), %ebx 
        cmpl       (%edi), %ebx 
        setbe      %al 
false__hla_581:
false__hla_580:
false__hla_579:
        popl       %ebx 
        popl       %edi 
        popl       %esi 
xUnsLE:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure UnsGT */

UnsGT:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        mov        8(%ebp), %esi 
        mov        12(%ebp), %edi 
        xorl       %eax, %eax 
        mov        12(%esi), %ebx 
        cmpl       12(%edi), %ebx 
        setnbe     %al 
        jnz        false__hla_583
        mov        8(%esi), %ebx 
        cmpl       8(%edi), %ebx 
        setnbe     %al 
        jnz        false__hla_584
        mov        4(%esi), %ebx 
        cmpl       4(%edi), %ebx 
        setnbe     %al 
        jnz        false__hla_585
        mov        (%esi), %ebx 
        cmpl       (%edi), %ebx 
        setnbe     %al 
false__hla_585:
false__hla_584:
false__hla_583:
        popl       %ebx 
        popl       %edi 
        popl       %esi 
xUnsGT:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure UnsGE */

UnsGE:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        mov        8(%ebp), %esi 
        mov        12(%ebp), %edi 
        xorl       %eax, %eax 
        mov        12(%esi), %ebx 
        cmpl       12(%edi), %ebx 
        setnbe     %al 
        jnz        false__hla_587
        mov        8(%esi), %ebx 
        cmpl       8(%edi), %ebx 
        setnbe     %al 
        jnz        false__hla_588
        mov        4(%esi), %ebx 
        cmpl       4(%edi), %ebx 
        setnbe     %al 
        jnz        false__hla_589
        mov        (%esi), %ebx 
        cmpl       (%edi), %ebx 
        setnb      %al 
false__hla_589:
false__hla_588:
false__hla_587:
        popl       %ebx 
        popl       %edi 
        popl       %esi 
xUnsGE:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure IntLT */

IntLT:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        mov        8(%ebp), %esi 
        mov        12(%ebp), %edi 
        xorl       %eax, %eax 
        mov        12(%esi), %ebx 
        cmpl       12(%edi), %ebx 
        setl       %al 
        jnz        false__hla_591
        mov        8(%esi), %ebx 
        cmpl       8(%edi), %ebx 
        setl       %al 
        jnz        false__hla_592
        mov        4(%esi), %ebx 
        cmpl       4(%edi), %ebx 
        setl       %al 
        jnz        false__hla_593
        mov        (%esi), %ebx 
        cmpl       (%edi), %ebx 
        setl       %al 
false__hla_593:
false__hla_592:
false__hla_591:
        popl       %ebx 
        popl       %edi 
        popl       %esi 
xIntLT:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure IntLE */

IntLE:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        mov        8(%ebp), %esi 
        mov        12(%ebp), %edi 
        xorl       %eax, %eax 
        mov        12(%esi), %ebx 
        cmpl       12(%edi), %ebx 
        setl       %al 
        jnz        false__hla_595
        mov        8(%esi), %ebx 
        cmpl       8(%edi), %ebx 
        setl       %al 
        jnz        false__hla_596
        mov        4(%esi), %ebx 
        cmpl       4(%edi), %ebx 
        setl       %al 
        jnz        false__hla_597
        mov        (%esi), %ebx 
        cmpl       (%edi), %ebx 
        setle      %al 
false__hla_597:
false__hla_596:
false__hla_595:
        popl       %ebx 
        popl       %edi 
        popl       %esi 
xIntLE:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure IntGT */

IntGT:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        mov        8(%ebp), %esi 
        mov        12(%ebp), %edi 
        xorl       %eax, %eax 
        mov        12(%esi), %ebx 
        cmpl       12(%edi), %ebx 
        setnle     %al 
        jnz        false__hla_599
        mov        8(%esi), %ebx 
        cmpl       8(%edi), %ebx 
        setnle     %al 
        jnz        false__hla_600
        mov        4(%esi), %ebx 
        cmpl       4(%edi), %ebx 
        setnle     %al 
        jnz        false__hla_601
        mov        (%esi), %ebx 
        cmpl       (%edi), %ebx 
        setnle     %al 
false__hla_601:
false__hla_600:
false__hla_599:
        popl       %ebx 
        popl       %edi 
        popl       %esi 
xIntGT:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure IntGE */

IntGE:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        pushl      %ebx 
        mov        8(%ebp), %esi 
        mov        12(%ebp), %edi 
        xorl       %eax, %eax 
        mov        12(%esi), %ebx 
        cmpl       12(%edi), %ebx 
        setnle     %al 
        jnz        false__hla_603
        mov        8(%esi), %ebx 
        cmpl       8(%edi), %ebx 
        setnle     %al 
        jnz        false__hla_604
        mov        4(%esi), %ebx 
        cmpl       4(%edi), %ebx 
        setnle     %al 
        jnz        false__hla_605
        mov        (%esi), %ebx 
        cmpl       (%edi), %ebx 
        setnl      %al 
false__hla_605:
false__hla_604:
false__hla_603:
        popl       %ebx 
        popl       %edi 
        popl       %esi 
xIntGE:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure negval */

negval:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        mov        12(%ebp), %ebx 
        mov        8(%ebp), %ecx 
        mov        20(%ebp), %edi 
        mov        24(%ebp), %esi 
        movzbl     16(%ebp), %eax 
        cmpl       $2, %eax 
        jl         default__hla_607
        cmpl       $27, %eax 
        jg         default__hla_607
        jmp *      jmpTbl__hla_607-8(,%eax,4) 
case__hla_608:
        movb       $13, (%edi) 
        movl       $int8_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_609:
        movb       $7, (%edi) 
        movl       $byte_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_610:
        movb       $14, (%edi) 
        movl       $int16_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_611:
        movb       $8, (%edi) 
        movl       $word_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_612:
        movb       $15, (%edi) 
        movl       $int32_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_613:
        movb       $9, (%edi) 
        movl       $dword_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_614:
        movb       $16, (%edi) 
        movl       $int64_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_615:
        movb       $10, (%edi) 
        movl       $qword_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_616:
        movb       $11, (%edi) 
        movl       $tbyte_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_617:
        movb       $17, (%edi) 
        movl       $int128_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_618:
        movb       $12, (%edi) 
        movl       $lword_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_619:
        movb       $13, (%edi) 
        movl       $int8_ste, (%esi) 
        cmpb       $128, (%ebx) 
        jnae       false__hla_620
        movb       $14, (%edi) 
        movl       $int16_ste, (%esi) 
false__hla_620:
        jmp        endswitch__hla_607
case__hla_621:
        movb       $14, (%edi) 
        movl       $int16_ste, (%esi) 
        cmpb       $128, 1(%ebx) 
        jnae       false__hla_622
        movb       $15, (%edi) 
        movl       $int32_ste, (%esi) 
false__hla_622:
        jmp        endswitch__hla_607
case__hla_623:
        movb       $15, (%edi) 
        movl       $int32_ste, (%esi) 
        cmpb       $128, 3(%ebx) 
        jnae       false__hla_624
        movb       $16, (%edi) 
        movl       $int64_ste, (%esi) 
false__hla_624:
        jmp        endswitch__hla_607
case__hla_625:
        movb       $16, (%edi) 
        movl       $int64_ste, (%esi) 
        cmpb       $128, 7(%ebx) 
        jnae       false__hla_626
        movb       $17, (%edi) 
        movl       $int128_ste, (%esi) 
false__hla_626:
        jmp        endswitch__hla_607
case__hla_627:
        movb       $17, (%edi) 
        movl       $int128_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_628:
        flds       (%ebx) 
        fchs
        fstps      (%ecx) 
        movb       $20, (%edi) 
        movl       $real32_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_629:
        fldl       (%ebx) 
        fchs
        fstpl      (%ecx) 
        movb       $21, (%edi) 
        movl       $real64_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_630:
        fldt       (%ebx) 
        fchs
        fstpt      (%ecx) 
        movb       $22, (%edi) 
        movl       $real80_ste, (%esi) 
        jmp        endswitch__hla_607
case__hla_631:
        mov        (%ebx), %eax 
        notl       %eax 
        mov        %eax, (%ecx) 
        mov        4(%ebx), %eax 
        notl       %eax 
        mov        %eax, 4(%ecx) 
        mov        8(%ebx), %eax 
        notl       %eax 
        mov        %eax, 8(%ecx) 
        mov        12(%ebx), %eax 
        notl       %eax 
        mov        %eax, 12(%ecx) 
        movb       $27, (%edi) 
        movl       $cset_ste, (%esi) 
        jmp        endswitch__hla_607
default__hla_607:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $5805 

        pushl      $str__hla_632 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        mov        %eax, (%ecx) 
        mov        %eax, 4(%ecx) 
        mov        %eax, 8(%ecx) 
        mov        %eax, 12(%ecx) 
        movb       $2, (%edi) 
        movl       $uns8_ste, (%esi) 
endswitch__hla_607:
        cmpb       $17, 16(%ebp) 
        jnbe       false__hla_633
        xorl       %eax, %eax 
        subl       (%ebx), %eax 
        mov        %eax, (%ecx) 
        mov        $0, %eax 
        sbbl       4(%ebx), %eax 
        mov        %eax, 4(%ecx) 
        mov        $0, %eax 
        sbbl       8(%ebx), %eax 
        mov        %eax, 8(%ecx) 
        mov        $0, %eax 
        sbbl       12(%ebx), %eax 
        mov        %eax, 12(%ecx) 
        pushl      %esi 
        pushl      %edi 

        pushl      %ecx 

        call       compactType
        addl       $12, %esp 
false__hla_633:
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
xnegval:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure notval */

notval:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        mov        12(%ebp), %ebx 
        mov        8(%ebp), %ecx 
        mov        20(%ebp), %edi 
        mov        24(%ebp), %esi 
        movzbl     16(%ebp), %eax 
        cmpl       $17, %eax 
        jg         default__hla_635
        jmp *      jmpTbl__hla_635(,%eax,4) 
case__hla_636:
        movzbl     (%ebx), %eax 
        andb       $1, %al 
        xorb       $1, %al 
        mov        %eax, (%ecx) 
        movl       $0, 4(%ecx) 
        movl       $0, 8(%ecx) 
        movl       $0, 12(%ecx) 
        movb       $0, (%edi) 
        movl       $boolean_ste, (%esi) 
        jmp        endswitch__hla_635
case__hla_637:
        mov        (%ebx), %eax 
        movb       %ah, %al 
        orl        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jz         false__hla_638
        mov        $-1, %eax 
false__hla_638:
        notl       %eax 
        mov        %eax, (%ecx) 
        mov        %eax, 4(%ecx) 
        mov        %eax, 8(%ecx) 
        mov        %eax, 12(%ecx) 
        mov        (%ebx), %al 
        notb       %al 
        mov        %al, (%ecx) 
        movb       $7, (%edi) 
        movl       $byte_ste, (%esi) 
        jmp        endswitch__hla_635
case__hla_639:
        mov        (%ebx), %al 
        notb       %al 
        orl        $-256, %eax 
        mov        %eax, (%ecx) 
        movb       %ah, %al 
        mov        %eax, 4(%ecx) 
        mov        %eax, 8(%ecx) 
        mov        %eax, 12(%ecx) 
        movb       $7, (%edi) 
        movl       $byte_ste, (%esi) 
        jmp        endswitch__hla_635
case__hla_640:
        movswl     2(%ebx), %eax 
        orl        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jz         false__hla_641
        orl        $-1, %eax 
false__hla_641:
        notl       %eax 
        mov        %eax, (%ecx) 
        mov        %eax, 4(%ecx) 
        mov        %eax, 8(%ecx) 
        mov        %eax, 12(%ecx) 
        mov        (%ebx), %ax 
        notw       %ax 
        mov        %ax, (%ecx) 
        movb       $8, (%edi) 
        movl       $word_ste, (%esi) 
        pushl      %esi 
        pushl      %edi 

        pushl      %ecx 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_635
case__hla_642:
        mov        (%ebx), %ax 
        notw       %ax 
        orl        $-65536, %eax 
        mov        %eax, (%ecx) 
        orl        $-1, %eax 
        mov        %eax, 4(%ecx) 
        mov        %eax, 8(%ecx) 
        mov        %eax, 12(%ecx) 
        movb       $8, (%edi) 
        movl       $word_ste, (%esi) 
        pushl      %esi 
        pushl      %edi 

        pushl      %ecx 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_635
case__hla_643:
        mov        (%ebx), %eax 
        notl       %eax 
        mov        %eax, (%ecx) 
        orl        $-1, %eax 
        mov        %eax, 4(%ecx) 
        mov        %eax, 8(%ecx) 
        mov        %eax, 12(%ecx) 
        movb       $9, (%edi) 
        movl       $dword_ste, (%esi) 
        pushl      %esi 
        pushl      %edi 

        pushl      %ecx 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_635
case__hla_644:
        mov        4(%ebx), %eax 
        orl        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jz         false__hla_645
        orl        $-1, %eax 
false__hla_645:
        notl       %eax 
        mov        %eax, 4(%ecx) 
        mov        %eax, 8(%ecx) 
        mov        %eax, 12(%ecx) 
        mov        (%ebx), %eax 
        notl       %eax 
        mov        %eax, (%ecx) 
        movb       $9, (%edi) 
        movl       $dword_ste, (%esi) 
        pushl      %esi 
        pushl      %edi 

        pushl      %ecx 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_635
case__hla_646:
        mov        (%ebx), %eax 
        notl       %eax 
        mov        %eax, (%ecx) 
        mov        4(%ebx), %eax 
        notl       %eax 
        mov        %eax, 4(%ecx) 
        orl        $-1, %eax 
        mov        %eax, 8(%ecx) 
        mov        %eax, 12(%ecx) 
        movb       $10, (%edi) 
        movl       $qword_ste, (%esi) 
        pushl      %esi 
        pushl      %edi 

        pushl      %ecx 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_635
case__hla_647:
        mov        8(%ebx), %eax 
        orl        12(%ebx), %eax 
        jz         false__hla_648
        mov        $-1, %eax 
false__hla_648:
        notl       %eax 
        mov        %eax, 8(%ecx) 
        mov        %eax, 12(%ecx) 
        mov        (%ebx), %eax 
        notl       %eax 
        mov        %eax, (%ecx) 
        mov        4(%ebx), %eax 
        notl       %eax 
        mov        %eax, 4(%ecx) 
        movb       $10, (%edi) 
        movl       $qword_ste, (%esi) 
        pushl      %esi 
        pushl      %edi 

        pushl      %ecx 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_635
case__hla_649:
        movzwl     10(%ebx), %eax 
        orl        12(%ebx), %eax 
        jz         false__hla_650
        orl        $-1, %eax 
false__hla_650:
        notl       %eax 
        mov        %ax, 10(%ecx) 
        mov        %eax, 12(%ecx) 
        mov        (%ebx), %eax 
        notl       %eax 
        mov        %eax, (%ecx) 
        mov        4(%ebx), %eax 
        notl       %eax 
        mov        %eax, 4(%ecx) 
        mov        8(%ebx), %ax 
        notw       %ax 
        mov        %ax, 4(%ecx) 
        movb       $11, (%edi) 
        movl       $tbyte_ste, (%esi) 
        pushl      %esi 
        pushl      %edi 

        pushl      %ecx 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_635
case__hla_651:
        mov        (%ebx), %eax 
        notl       %eax 
        mov        %eax, (%ecx) 
        mov        4(%ebx), %eax 
        notl       %eax 
        mov        %eax, 4(%ecx) 
        mov        8(%ebx), %eax 
        notl       %eax 
        mov        %eax, 8(%ecx) 
        mov        12(%ebx), %eax 
        notl       %eax 
        mov        %eax, 12(%ecx) 
        movb       $12, (%edi) 
        movl       $lword_ste, (%esi) 
        pushl      %esi 
        pushl      %edi 

        pushl      %ecx 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_635
default__hla_635:
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $6210 

        pushl      $str__hla_652 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        xorl       %eax, %eax 
        mov        %eax, (%ecx) 
        mov        %eax, 4(%ecx) 
        mov        %eax, 8(%ecx) 
        mov        %eax, 12(%ecx) 
        movb       $2, (%edi) 
        movl       $uns8_ste, (%esi) 
endswitch__hla_635:
        popl       %esi 
        popl       %edi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
xnotval:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure addval */

addval:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        pushl      %ecx 
        pushl      %ebx 
        mov        8(%ebp), %edi 
        mov        12(%ebp), %esi 
        mov        16(%ebp), %ebx 
        mov        20(%ebp), %ecx 
        movzbl     (%ebx), %eax 
        cmpl       $2, %eax 
        jl         default__hla_654
        cmpl       $27, %eax 
        jg         default__hla_654
        jmp *      jmpTbl__hla_654-8(,%eax,4) 
case__hla_655:
        mov        (%esi), %al 
        addb       %al, (%edi) 
        jc         false__hla_656
        movb       $0, 1(%edi) 
        jmp        endif__hla_656
false__hla_656:
        movb       $1, 1(%edi) 
        movb       $3, (%ebx) 
        movl       $uns16_ste, (%ecx) 
endif__hla_656:
        xorl       %eax, %eax 
        mov        %ax, 2(%edi) 
        mov        %eax, 4(%edi) 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jmp        endswitch__hla_654
case__hla_657:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        mov        4(%esi), %eax 
        adcl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        adcl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        adcl       %eax, 12(%edi) 
        movsbl     (%edi), %eax 
        cmpb       1(%edi), %ah 
        je         false__hla_658
        movb       $14, (%ebx) 
        movl       $int16_ste, (%ecx) 
false__hla_658:
        jmp        endswitch__hla_654
case__hla_659:
        mov        (%esi), %al 
        addb       %al, (%edi) 
        jc         false__hla_660
        movb       $0, 1(%edi) 
        jmp        endif__hla_660
false__hla_660:
        movb       $1, 1(%edi) 
        movb       $8, (%ebx) 
        movl       $word_ste, (%ecx) 
endif__hla_660:
        xorl       %eax, %eax 
        mov        %ax, 2(%edi) 
        mov        %eax, 4(%edi) 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jmp        endswitch__hla_654
case__hla_661:
        mov        (%esi), %ax 
        addw       %ax, (%edi) 
        jc         false__hla_662
        movw       $0, 2(%edi) 
        cmpb       $0, 1(%edi) 
        jne        false__hla_663
        movb       $2, (%ebx) 
        movl       $uns8_ste, (%ecx) 
false__hla_663:
        jmp        endif__hla_662
false__hla_662:
        movw       $1, 2(%edi) 
        movb       $4, (%ebx) 
        movl       $uns32_ste, (%ecx) 
endif__hla_662:
        xorl       %eax, %eax 
        mov        %eax, 4(%edi) 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jmp        endswitch__hla_654
case__hla_664:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        mov        4(%esi), %eax 
        adcl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        adcl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        adcl       %eax, 12(%edi) 
        movb       $15, (%ebx) 
        movl       $int32_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_665:
        mov        (%esi), %ax 
        addw       %ax, (%edi) 
        jc         false__hla_666
        movw       $0, 2(%edi) 
        cmpb       $0, 1(%edi) 
        jne        false__hla_667
        movb       $7, (%ebx) 
        movl       $byte_ste, (%ecx) 
false__hla_667:
        jmp        endif__hla_666
false__hla_666:
        movw       $1, 2(%edi) 
        movb       $9, (%ebx) 
        movl       $dword_ste, (%ecx) 
endif__hla_666:
        xorl       %eax, %eax 
        mov        %eax, 4(%edi) 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jmp        endswitch__hla_654
case__hla_668:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        jc         false__hla_669
        movl       $0, 4(%edi) 
        jmp        endif__hla_669
false__hla_669:
        movl       $1, 4(%edi) 
endif__hla_669:
        xorl       %eax, %eax 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        movb       $5, (%ebx) 
        movl       $uns64_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_670:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        mov        4(%esi), %eax 
        adcl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        adcl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        adcl       %eax, 12(%edi) 
        movb       $16, (%ebx) 
        movl       $int64_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_671:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        jc         false__hla_672
        movl       $0, 4(%edi) 
        jmp        endif__hla_672
false__hla_672:
        movl       $1, 4(%edi) 
endif__hla_672:
        xorl       %eax, %eax 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        movb       $10, (%ebx) 
        movl       $qword_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_673:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        mov        4(%esi), %eax 
        adcl       %eax, 4(%edi) 
        jc         false__hla_674
        movl       $0, 8(%edi) 
        jmp        endif__hla_674
false__hla_674:
        movl       $1, 8(%edi) 
endif__hla_674:
        movl       $0, 12(%edi) 
        movb       $6, (%ebx) 
        movl       $uns128_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_675:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        mov        4(%esi), %eax 
        adcl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        adcl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        adcl       %eax, 12(%edi) 
        movb       $17, (%ebx) 
        movl       $int128_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_676:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        mov        4(%esi), %eax 
        adcl       %eax, 4(%edi) 
        jc         false__hla_677
        movl       $0, 8(%edi) 
        jmp        endif__hla_677
false__hla_677:
        movl       $1, 8(%edi) 
endif__hla_677:
        movl       $0, 12(%edi) 
        movb       $12, (%ebx) 
        movl       $lword_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_678:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        mov        4(%esi), %eax 
        adcl       %eax, 4(%edi) 
        mov        8(%esi), %ax 
        adcw       %ax, 8(%esi) 
        jc         false__hla_679
        movw       $0, 10(%edi) 
        jmp        endif__hla_679
false__hla_679:
        movw       $1, 10(%edi) 
endif__hla_679:
        movl       $0, 12(%edi) 
        movb       $12, (%ebx) 
        movl       $lword_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_680:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        mov        4(%esi), %eax 
        adcl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        adcl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        adcl       %eax, 12(%edi) 
        movb       $6, (%ebx) 
        movl       $uns128_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_681:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        mov        4(%esi), %eax 
        adcl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        adcl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        adcl       %eax, 12(%edi) 
        movb       $12, (%ebx) 
        movl       $lword_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_682:
        mov        (%esi), %eax 
        addl       %eax, (%edi) 
        mov        4(%esi), %eax 
        adcl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        adcl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        adcl       %eax, 12(%edi) 
        movb       $17, (%ebx) 
        movl       $int128_ste, (%ecx) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_654
case__hla_683:
        flds       (%esi) 
        flds       (%edi) 
        faddp      %st(0), %st(1) 
        fstpt      (%edi) 
        movb       $22, (%ebx) 
        movl       $real80_ste, (%ecx) 
        xorl       %eax, %eax 
        mov        %eax, 4(%edi) 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jmp        endswitch__hla_654
case__hla_684:
        fldl       (%esi) 
        fldl       (%edi) 
        faddp      %st(0), %st(1) 
        fstpt      (%edi) 
        movb       $22, (%ebx) 
        movl       $real80_ste, (%ecx) 
        xorl       %eax, %eax 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jmp        endswitch__hla_654
case__hla_685:
        fldt       (%esi) 
        fldt       (%edi) 
        faddp      %st(0), %st(1) 
        fstpt      (%edi) 
        xorl       %eax, %eax 
        mov        %ax, 10(%edi) 
        mov        %eax, 12(%edi) 
        jmp        endswitch__hla_654
case__hla_686:
        mov        (%esi), %eax 
        orl        %eax, (%edi) 
        mov        4(%esi), %eax 
        orl        %eax, 4(%edi) 
        mov        8(%esi), %eax 
        orl        %eax, 8(%edi) 
        mov        12(%esi), %eax 
        orl        %eax, 12(%edi) 
endswitch__hla_654:
default__hla_654:
        popl       %ebx 
        popl       %ecx 
        popl       %edi 
        popl       %esi 
xaddval:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure subval */

subval:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        pushl      %ecx 
        pushl      %ebx 
        mov        8(%ebp), %edi 
        mov        12(%ebp), %esi 
        mov        16(%ebp), %ebx 
        mov        20(%ebp), %ecx 
        movzbl     (%ebx), %eax 
        cmpl       $2, %eax 
        jl         default__hla_688
        cmpl       $27, %eax 
        jg         default__hla_688
        jmp *      jmpTbl__hla_688-8(,%eax,4) 
case__hla_689:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        $0, %eax 
        sbbl       $0, %eax 
        mov        %eax, 4(%edi) 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jns        false__hla_690
        movb       $14, (%ebx) 
        movl       $int16_ste, (%ecx) 
false__hla_690:
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_691:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        sbbl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        sbbl       %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_692:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        $0, %eax 
        sbbl       $0, %eax 
        mov        %eax, 4(%edi) 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_693:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        $0, %eax 
        sbbl       $0, %eax 
        mov        %eax, 4(%edi) 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jns        false__hla_694
        movb       $15, (%ebx) 
        movl       $int32_ste, (%ecx) 
false__hla_694:
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_695:
        mov        (%esi), %ax 
        subw       %ax, (%edi) 
        pushfl
        mov        2(%esi), %ax 
        sbbw       %ax, 2(%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        sbbl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        sbbl       %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_696:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        sbbl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        sbbl       %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_697:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        $0, %eax 
        sbbl       $0, %eax 
        mov        %eax, 4(%edi) 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jns        false__hla_698
        movb       $16, (%ebx) 
        movl       $int64_ste, (%ecx) 
false__hla_698:
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_699:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        sbbl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        sbbl       %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_700:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        sbbl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        sbbl       %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_701:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        $0, %eax 
        sbbl       $0, %eax 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jns        false__hla_702
        movb       $17, (%ebx) 
        movl       $int128_ste, (%ecx) 
false__hla_702:
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_703:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        sbbl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        sbbl       %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_704:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        $0, %eax 
        sbbl       $0, %eax 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_705:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        movzwl     8(%edi), %eax 
        sbbl       $0, %eax 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_706:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        sbbl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        sbbl       %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_707:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        sbbl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        sbbl       %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_708:
        mov        (%esi), %eax 
        subl       %eax, (%edi) 
        mov        4(%esi), %eax 
        sbbl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        sbbl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        sbbl       %eax, 12(%edi) 
        pushl      %ecx 
        pushl      %ebx 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        jmp        endswitch__hla_688
case__hla_709:
        flds       (%esi) 
        flds       (%edi) 
        fsubp      %st(0), %st(1) 
        fstps      (%edi) 
        xorl       %eax, %eax 
        mov        %eax, 4(%edi) 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jmp        endswitch__hla_688
case__hla_710:
        fldl       (%esi) 
        fldl       (%edi) 
        fsubp      %st(0), %st(1) 
        fstpl      (%edi) 
        xorl       %eax, %eax 
        mov        %eax, 8(%edi) 
        mov        %eax, 12(%edi) 
        jmp        endswitch__hla_688
case__hla_711:
        fldt       (%esi) 
        fldt       (%edi) 
        fsubp      %st(0), %st(1) 
        fstpt      (%edi) 
        xorl       %eax, %eax 
        mov        %ax, 10(%edi) 
        mov        %eax, 12(%edi) 
        jmp        endswitch__hla_688
case__hla_712:
        mov        (%esi), %eax 
        notl       %eax 
        andl       %eax, (%edi) 
        mov        4(%esi), %eax 
        notl       %eax 
        andl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        notl       %eax 
        andl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        notl       %eax 
        andl       %eax, 12(%edi) 
endswitch__hla_688:
default__hla_688:
        popl       %ebx 
        popl       %ecx 
        popl       %edi 
        popl       %esi 
xsubval:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure mul128__hla_714 */

mul128__hla_714:
        pushl      %edx 
        mov        (%esi), %eax 
        mull       (%edi) 
        mov        %eax, -16(%ebp) 
        mov        %edx, -12(%ebp) 
        mov        (%esi), %eax 
        mull       4(%edi) 
        addl       %eax, -12(%ebp) 
        adcl       $0, %edx 
        mov        %edx, -8(%ebp) 
        mov        (%esi), %eax 
        mull       8(%edi) 
        addl       %eax, -8(%ebp) 
        adcl       $0, %edx 
        mov        %edx, -4(%ebp) 
        mov        (%esi), %eax 
        mull       12(%edi) 
        addl       %eax, -4(%ebp) 
        mov        4(%esi), %eax 
        mull       (%edi) 
        addl       %eax, -12(%ebp) 
        adcl       %edx, -8(%ebp) 
        mov        4(%esi), %eax 
        mull       4(%edi) 
        addl       %eax, -8(%ebp) 
        adcl       %edx, -4(%ebp) 
        mov        4(%esi), %eax 
        mull       8(%edi) 
        addl       %eax, -4(%ebp) 
        mov        8(%esi), %eax 
        mull       (%edi) 
        addl       %eax, -8(%ebp) 
        adcl       %edx, -4(%ebp) 
        mov        8(%esi), %eax 
        mull       4(%edi) 
        addl       %eax, -4(%ebp) 
        mov        12(%esi), %eax 
        mull       (%edi) 
        addl       %eax, -4(%ebp) 
        mov        -16(%ebp), %eax 
        mov        %eax, (%edi) 
        mov        -12(%ebp), %eax 
        mov        %eax, 4(%edi) 
        mov        -8(%ebp), %eax 
        mov        %eax, 8(%edi) 
        mov        -4(%ebp), %eax 
        mov        %eax, 12(%edi) 
        popl       %edx 
        ret
xmul128__hla_714:

/* procedure mulval */

mulval:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $16, %esp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %esi 
        pushl      %edi 
        mov        12(%ebp), %esi 
        mov        8(%ebp), %edi 
        mov        20(%ebp), %ecx 
        mov        16(%ebp), %ebx 
        movzbl     (%ebx), %eax 
        cmpl       $2, %eax 
        jl         default__hla_716
        cmpl       $27, %eax 
        jg         default__hla_716
        jmp *      jmpTbl__hla_716-8(,%eax,4) 
case__hla_717:
        call       mul128__hla_714
        movb       $6, (%ebx) 
        movl       $uns128_ste, (%ecx) 
        cmpl       $0, 8(%edi) 
        jne        false__hla_718
        cmpl       $0, 12(%edi) 
        jne        false__hla_718
        movb       $5, (%ebx) 
        movl       $uns64_ste, (%ecx) 
        cmpl       $0, 4(%edi) 
        jne        false__hla_720
        movb       $4, (%ebx) 
        movl       $uns32_ste, (%ecx) 
        cmpw       $0, 2(%edi) 
        jne        false__hla_721
        movb       $3, (%ebx) 
        movl       $uns16_ste, (%ecx) 
        cmpb       $0, 1(%edi) 
        jne        false__hla_722
        movb       $2, (%ebx) 
        movl       $uns8_ste, (%ecx) 
false__hla_722:
false__hla_721:
false__hla_720:
false__hla_718:
        jmp        endswitch__hla_716
case__hla_723:
        call       mul128__hla_714
        movb       $12, (%ebx) 
        movl       $lword_ste, (%ecx) 
        cmpw       $0, 10(%edi) 
        jne        false__hla_724
        cmpl       $0, 12(%edi) 
        jne        false__hla_724
        movb       $11, (%ebx) 
        movl       $tbyte_ste, (%ecx) 
        cmpw       $0, 8(%edi) 
        jne        false__hla_726
        movb       $10, (%ebx) 
        movl       $qword_ste, (%ecx) 
        cmpl       $0, 4(%edi) 
        jne        false__hla_727
        movb       $9, (%ebx) 
        movl       $dword_ste, (%ecx) 
        cmpw       $0, 2(%edi) 
        jne        false__hla_728
        movb       $8, (%ebx) 
        movl       $word_ste, (%ecx) 
        cmpb       $0, 1(%edi) 
        jne        false__hla_729
        movb       $7, (%ebx) 
        movl       $byte_ste, (%ecx) 
false__hla_729:
false__hla_728:
false__hla_727:
false__hla_726:
false__hla_724:
        jmp        endswitch__hla_716
case__hla_730:
        mov        15(%edi), %al 
        xorb       15(%esi), %al 
        pushfl
        cmpb       $0, 15(%edi) 
        jnl        false__hla_731
        xorl       %eax, %eax 
        subl       (%edi), %eax 
        mov        %eax, (%edi) 
        mov        $0, %eax 
        sbbl       4(%edi), %eax 
        mov        %eax, 4(%edi) 
        mov        $0, %eax 
        sbbl       8(%edi), %eax 
        mov        %eax, 8(%edi) 
        mov        $0, %eax 
        sbbl       12(%edi), %eax 
        mov        %eax, 12(%edi) 
false__hla_731:
        cmpb       $0, 15(%esi) 
        jnl        false__hla_732
        xorl       %eax, %eax 
        subl       (%esi), %eax 
        mov        %eax, (%esi) 
        mov        $0, %eax 
        sbbl       4(%esi), %eax 
        mov        %eax, 4(%esi) 
        mov        $0, %eax 
        sbbl       8(%esi), %eax 
        mov        %eax, 8(%esi) 
        mov        $0, %eax 
        sbbl       12(%esi), %eax 
        mov        %eax, 12(%esi) 
false__hla_732:
        call       mul128__hla_714
        popfl
        jns        false__hla_733
        xorl       %eax, %eax 
        subl       (%edi), %eax 
        mov        %eax, (%edi) 
        mov        $0, %eax 
        sbbl       4(%edi), %eax 
        mov        %eax, 4(%edi) 
        mov        $0, %eax 
        sbbl       8(%edi), %eax 
        mov        %eax, 8(%edi) 
        mov        $0, %eax 
        sbbl       12(%edi), %eax 
        mov        %eax, 12(%edi) 
false__hla_733:
        movb       $17, (%ebx) 
        movl       $int128_ste, (%ecx) 
        movsbl     7(%edi), %eax 
        movb       %ah, %al 
        cmpl       8(%edi), %eax 
        jne        false__hla_734
        cmpl       12(%edi), %eax 
        jne        false__hla_734
        movb       $16, (%ebx) 
        movl       $int64_ste, (%ecx) 
        movsbl     3(%edi), %eax 
        movb       %ah, %al 
        cmpl       4(%edi), %eax 
        jne        false__hla_736
        movb       $15, (%ebx) 
        movl       $int32_ste, (%ecx) 
        movsbl     1(%edi), %eax 
        movb       %ah, %al 
        cmpw       %ax, 2(%edi) 
        jne        false__hla_737
        movb       $14, (%ebx) 
        movl       $int16_ste, (%ecx) 
        movsbw     (%edi), %ax 
        cmpb       %ah, 1(%edi) 
        jne        false__hla_738
        movb       $13, (%ebx) 
        movl       $int8_ste, (%ecx) 
false__hla_738:
false__hla_737:
false__hla_736:
false__hla_734:
        jmp        endswitch__hla_716
case__hla_739:
        flds       (%esi) 
        flds       (%edi) 
        fmulp      %st(0), %st(1) 
        fstpt      (%edi) 
        movb       $22, (%ebx) 
        movl       $real80_ste, (%ecx) 
        jmp        endswitch__hla_716
case__hla_740:
        fldl       (%esi) 
        fldl       (%edi) 
        fmulp      %st(0), %st(1) 
        fstpt      (%edi) 
        movb       $22, (%ebx) 
        movl       $real80_ste, (%ecx) 
        jmp        endswitch__hla_716
case__hla_741:
        fldt       (%esi) 
        fldt       (%edi) 
        fmulp      %st(0), %st(1) 
        fstpt      (%edi) 
        jmp        endswitch__hla_716
case__hla_742:
        mov        (%esi), %eax 
        andl       %eax, (%edi) 
        mov        4(%esi), %eax 
        andl       %eax, 4(%edi) 
        mov        8(%esi), %eax 
        andl       %eax, 8(%edi) 
        mov        12(%esi), %eax 
        andl       %eax, 12(%edi) 
endswitch__hla_716:
default__hla_716:
        popl       %edi 
        popl       %esi 
        popl       %ecx 
        popl       %ebx 
xmulval:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure div128__hla_744 */

div128__hla_744:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $16, %esp 
        pushl      %eax 
        pushl      %ecx 
        pushl      %edi 
        mov        $0, %eax 
        mov        %eax, -16(%ebp) 
        mov        %eax, -12(%ebp) 
        mov        %eax, -8(%ebp) 
        mov        %eax, -4(%ebp) 
        mov        $128, %ecx 
false__hla_745:
repeat__hla_745:
        shll       $1, 32(%ebp) 
        rcll       $1, 36(%ebp) 
        rcll       $1, 40(%ebp) 
        rcll       $1, 44(%ebp) 
        rcll       $1, -16(%ebp) 
        rcll       $1, -12(%ebp) 
        rcll       $1, -8(%ebp) 
        rcll       $1, -4(%ebp) 
        mov        -4(%ebp), %eax 
        cmpl       28(%ebp), %eax 
        ja         true__hla_746
        jb         false__hla_746
        mov        -8(%ebp), %eax 
        cmpl       24(%ebp), %eax 
        ja         true__hla_746
        jb         false__hla_746
        mov        -12(%ebp), %eax 
        cmpl       20(%ebp), %eax 
        ja         true__hla_746
        jb         false__hla_746
        mov        -16(%ebp), %eax 
        cmpl       16(%ebp), %eax 
        jb         false__hla_746
true__hla_746:
        mov        16(%ebp), %eax 
        subl       %eax, -16(%ebp) 
        mov        20(%ebp), %eax 
        sbbl       %eax, -12(%ebp) 
        mov        24(%ebp), %eax 
        sbbl       %eax, -8(%ebp) 
        mov        28(%ebp), %eax 
        sbbl       %eax, -4(%ebp) 
        addl       $1, 32(%ebp) 
        adcl       $0, 36(%ebp) 
        adcl       $0, 40(%ebp) 
        adcl       $0, 44(%ebp) 
false__hla_746:
        decl       %ecx 
continue__hla_745:
        jnz        repeat__hla_745
exitloop__hla_745:

        mov        12(%ebp), %edi 
        mov        32(%ebp), %eax 
        mov        %eax, (%edi) 
        mov        36(%ebp), %eax 
        mov        %eax, 4(%edi) 
        mov        40(%ebp), %eax 
        mov        %eax, 8(%edi) 
        mov        44(%ebp), %eax 
        mov        %eax, 12(%edi) 
        mov        8(%ebp), %edi 
        mov        -16(%ebp), %eax 
        mov        %eax, (%edi) 
        mov        -12(%ebp), %eax 
        mov        %eax, 4(%edi) 
        mov        -8(%ebp), %eax 
        mov        %eax, 8(%edi) 
        mov        -4(%ebp), %eax 
        mov        %eax, 12(%edi) 
        popl       %edi 
        popl       %ecx 
        popl       %eax 
xdiv128__hla_744:
        movl       %ebp, %esp 
        popl       %ebp 
        ret        $40

/* procedure divval */

divval:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $16, %esp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %esi 
        pushl      %edi 
        mov        12(%ebp), %esi 
        mov        8(%ebp), %edi 
        mov        20(%ebp), %ecx 
        mov        16(%ebp), %ebx 
        movzbl     (%ebx), %eax 
        cmpl       $2, %eax 
        jl         default__hla_748
        cmpl       $22, %eax 
        jg         default__hla_748
        jmp *      jmpTbl__hla_748-8(,%eax,4) 
case__hla_749:
        mov        (%esi), %eax 
        orl        4(%esi), %eax 
        orl        8(%esi), %eax 
        orl        12(%esi), %eax 
        jnz        false__hla_750
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $7733 

        pushl      $str__hla_751 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        movb       $1, (%esi) 
false__hla_750:
        pushl      12(%edi) 
        pushl      8(%edi) 
        pushl      4(%edi) 
        pushl      (%edi) 
        pushl      12(%esi) 
        pushl      8(%esi) 
        pushl      4(%esi) 
        pushl      (%esi) 
        pushl      %edi 
        pushl      %ebp 
        addl       $-16, (%esp) 
        call       div128__hla_744
        movb       $6, (%ebx) 
        movl       $uns128_ste, (%ecx) 
        cmpl       $0, 8(%edi) 
        jne        false__hla_752
        cmpl       $0, 12(%edi) 
        jne        false__hla_752
        movb       $5, (%ebx) 
        movl       $uns64_ste, (%ecx) 
        cmpl       $0, 4(%edi) 
        jne        false__hla_754
        movb       $4, (%ebx) 
        movl       $uns32_ste, (%ecx) 
        cmpw       $0, 2(%edi) 
        jne        false__hla_755
        movb       $3, (%ebx) 
        movl       $uns16_ste, (%ecx) 
        cmpb       $0, 1(%edi) 
        jne        false__hla_756
        movb       $2, (%ebx) 
        movl       $uns8_ste, (%ecx) 
false__hla_756:
false__hla_755:
false__hla_754:
false__hla_752:
        jmp        endswitch__hla_748
case__hla_757:
        mov        (%esi), %eax 
        orl        4(%esi), %eax 
        orl        8(%esi), %eax 
        orl        12(%esi), %eax 
        jnz        false__hla_758
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $7794 

        pushl      $str__hla_751 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        movb       $1, (%esi) 
false__hla_758:
        pushl      12(%edi) 
        pushl      8(%edi) 
        pushl      4(%edi) 
        pushl      (%edi) 
        pushl      12(%esi) 
        pushl      8(%esi) 
        pushl      4(%esi) 
        pushl      (%esi) 
        pushl      %edi 
        pushl      %ebp 
        addl       $-16, (%esp) 
        call       div128__hla_744
        movb       $12, (%ebx) 
        movl       $lword_ste, (%ecx) 
        cmpw       $0, 10(%edi) 
        jne        false__hla_759
        cmpl       $0, 12(%edi) 
        jne        false__hla_759
        movb       $11, (%ebx) 
        movl       $tbyte_ste, (%ecx) 
        cmpw       $0, 8(%edi) 
        jne        false__hla_761
        movb       $10, (%ebx) 
        movl       $qword_ste, (%ecx) 
        cmpl       $0, 4(%edi) 
        jne        false__hla_762
        movb       $9, (%ebx) 
        movl       $dword_ste, (%ecx) 
        cmpw       $0, 2(%edi) 
        jne        false__hla_763
        movb       $8, (%ebx) 
        movl       $word_ste, (%ecx) 
        cmpb       $0, 1(%edi) 
        jne        false__hla_764
        movb       $7, (%ebx) 
        movl       $byte_ste, (%ecx) 
false__hla_764:
false__hla_763:
false__hla_762:
false__hla_761:
false__hla_759:
        jmp        endswitch__hla_748
case__hla_765:
        mov        15(%edi), %al 
        xorb       15(%esi), %al 
        pushfl
        cmpb       $0, 15(%edi) 
        jnl        false__hla_766
        xorl       %eax, %eax 
        subl       (%edi), %eax 
        mov        %eax, (%edi) 
        mov        $0, %eax 
        sbbl       4(%edi), %eax 
        mov        %eax, 4(%edi) 
        mov        $0, %eax 
        sbbl       8(%edi), %eax 
        mov        %eax, 8(%edi) 
        mov        $0, %eax 
        sbbl       12(%edi), %eax 
        mov        %eax, 12(%edi) 
false__hla_766:
        cmpb       $0, 15(%esi) 
        jnl        false__hla_767
        xorl       %eax, %eax 
        subl       (%esi), %eax 
        mov        %eax, (%esi) 
        mov        $0, %eax 
        sbbl       4(%esi), %eax 
        mov        %eax, 4(%esi) 
        mov        $0, %eax 
        sbbl       8(%esi), %eax 
        mov        %eax, 8(%esi) 
        mov        $0, %eax 
        sbbl       12(%esi), %eax 
        mov        %eax, 12(%esi) 
false__hla_767:
        mov        (%esi), %eax 
        orl        4(%esi), %eax 
        orl        8(%esi), %eax 
        orl        12(%esi), %eax 
        jnz        false__hla_768
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $7911 

        pushl      $str__hla_751 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        movb       $1, (%esi) 
false__hla_768:
        pushl      12(%edi) 
        pushl      8(%edi) 
        pushl      4(%edi) 
        pushl      (%edi) 
        pushl      12(%esi) 
        pushl      8(%esi) 
        pushl      4(%esi) 
        pushl      (%esi) 
        pushl      %edi 
        pushl      %ebp 
        addl       $-16, (%esp) 
        call       div128__hla_744
        popfl
        jns        false__hla_769
        xorl       %eax, %eax 
        subl       (%edi), %eax 
        mov        %eax, (%edi) 
        mov        $0, %eax 
        sbbl       4(%edi), %eax 
        mov        %eax, 4(%edi) 
        mov        $0, %eax 
        sbbl       8(%edi), %eax 
        mov        %eax, 8(%edi) 
        mov        $0, %eax 
        sbbl       12(%edi), %eax 
        mov        %eax, 12(%edi) 
false__hla_769:
        movb       $17, (%ebx) 
        movl       $int128_ste, (%ecx) 
        movsbl     7(%edi), %eax 
        movb       %ah, %al 
        cmpl       8(%edi), %eax 
        jne        false__hla_770
        cmpl       12(%edi), %eax 
        jne        false__hla_770
        movb       $16, (%ebx) 
        movl       $int64_ste, (%ecx) 
        movsbl     3(%edi), %eax 
        movb       %ah, %al 
        cmpl       4(%edi), %eax 
        jne        false__hla_772
        movb       $15, (%ebx) 
        movl       $int32_ste, (%ecx) 
        movsbl     1(%edi), %eax 
        movb       %ah, %al 
        cmpw       %ax, 2(%edi) 
        jne        false__hla_773
        movb       $14, (%ebx) 
        movl       $int16_ste, (%ecx) 
        movsbw     (%edi), %ax 
        cmpb       %ah, 1(%edi) 
        jne        false__hla_774
        movb       $13, (%ebx) 
        movl       $int8_ste, (%ecx) 
false__hla_774:
false__hla_773:
false__hla_772:
false__hla_770:
        jmp        endswitch__hla_748
case__hla_775:
        cmpl       $0, (%esi) 
        jne        false__hla_776
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $7990 

        pushl      $str__hla_751 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        movl       $1065353216, (%esi) 
false__hla_776:
        flds       (%esi) 
        flds       (%edi) 
        fdivp      %st(0), %st(1) 
        fstpt      (%edi) 
        movb       $22, (%ebx) 
        movl       $real80_ste, (%ecx) 
        jmp        endswitch__hla_748
case__hla_777:
        cmpl       $0, (%esi) 
        jne        false__hla_778
        cmpl       $0, 4(%esi) 
        jne        false__hla_778
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $8008 

        pushl      $str__hla_751 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        movl       $1072693248, 4(%esi) 
        movl       $0, (%esi) 
false__hla_778:
        fldl       (%esi) 
        fldl       (%edi) 
        fdivp      %st(0), %st(1) 
        fstpt      (%edi) 
        movb       $22, (%ebx) 
        movl       $real80_ste, (%ecx) 
        jmp        endswitch__hla_748
case__hla_780:
        cmpl       $0, (%esi) 
        jne        false__hla_781
        cmpl       $0, 4(%esi) 
        jne        false__hla_781
        cmpw       $0, 8(%esi) 
        jne        false__hla_781
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $8033 

        pushl      $str__hla_751 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        movl       $1073709056, 6(%esi) 
        movw       $0, 4(%esi) 
        movl       $0, (%esi) 
false__hla_781:
        fldt       (%esi) 
        fldt       (%edi) 
        fdivp      %st(0), %st(1) 
        fstpt      (%edi) 
endswitch__hla_748:
default__hla_748:
        popl       %edi 
        popl       %esi 
        popl       %ecx 
        popl       %ebx 
xdivval:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure modval */

modval:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $16, %esp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %esi 
        pushl      %edi 
        mov        12(%ebp), %esi 
        mov        8(%ebp), %edi 
        mov        20(%ebp), %ecx 
        mov        16(%ebp), %ebx 
        movzbl     (%ebx), %eax 
        cmpl       $2, %eax 
        jl         default__hla_785
        cmpl       $17, %eax 
        jg         default__hla_785
        jmp *      jmpTbl__hla_785-8(,%eax,4) 
case__hla_786:
        mov        (%esi), %eax 
        orl        4(%esi), %eax 
        orl        8(%esi), %eax 
        orl        12(%esi), %eax 
        jnz        false__hla_787
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $8107 

        pushl      $str__hla_751 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        movb       $1, (%esi) 
false__hla_787:
        pushl      12(%edi) 
        pushl      8(%edi) 
        pushl      4(%edi) 
        pushl      (%edi) 
        pushl      12(%esi) 
        pushl      8(%esi) 
        pushl      4(%esi) 
        pushl      (%esi) 
        pushl      %ebp 
        addl       $-16, (%esp) 
        pushl      %edi 
        call       div128__hla_744
        movb       $6, (%ebx) 
        movl       $uns128_ste, (%ecx) 
        cmpl       $0, 8(%edi) 
        jne        false__hla_788
        cmpl       $0, 12(%edi) 
        jne        false__hla_788
        movb       $5, (%ebx) 
        movl       $uns64_ste, (%ecx) 
        cmpl       $0, 4(%edi) 
        jne        false__hla_790
        movb       $4, (%ebx) 
        movl       $uns32_ste, (%ecx) 
        cmpw       $0, 2(%edi) 
        jne        false__hla_791
        movb       $3, (%ebx) 
        movl       $uns16_ste, (%ecx) 
        cmpb       $0, 1(%edi) 
        jne        false__hla_792
        movb       $2, (%ebx) 
        movl       $uns8_ste, (%ecx) 
false__hla_792:
false__hla_791:
false__hla_790:
false__hla_788:
        jmp        endswitch__hla_785
case__hla_793:
        mov        (%esi), %eax 
        orl        4(%esi), %eax 
        orl        8(%esi), %eax 
        orl        12(%esi), %eax 
        jnz        false__hla_794
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $8169 

        pushl      $str__hla_751 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        movb       $1, (%esi) 
false__hla_794:
        pushl      12(%edi) 
        pushl      8(%edi) 
        pushl      4(%edi) 
        pushl      (%edi) 
        pushl      12(%esi) 
        pushl      8(%esi) 
        pushl      4(%esi) 
        pushl      (%esi) 
        pushl      %ebp 
        addl       $-16, (%esp) 
        pushl      %edi 
        call       div128__hla_744
        movb       $12, (%ebx) 
        movl       $lword_ste, (%ecx) 
        cmpw       $0, 10(%edi) 
        jne        false__hla_795
        cmpl       $0, 12(%edi) 
        jne        false__hla_795
        movb       $11, (%ebx) 
        movl       $tbyte_ste, (%ecx) 
        cmpw       $0, 8(%edi) 
        jne        false__hla_797
        movb       $10, (%ebx) 
        movl       $qword_ste, (%ecx) 
        cmpl       $0, 4(%edi) 
        jne        false__hla_798
        movb       $9, (%ebx) 
        movl       $dword_ste, (%ecx) 
        cmpw       $0, 2(%edi) 
        jne        false__hla_799
        movb       $8, (%ebx) 
        movl       $word_ste, (%ecx) 
        cmpb       $0, 1(%edi) 
        jne        false__hla_800
        movb       $7, (%ebx) 
        movl       $byte_ste, (%ecx) 
false__hla_800:
false__hla_799:
false__hla_798:
false__hla_797:
false__hla_795:
        jmp        endswitch__hla_785
case__hla_801:
        mov        15(%edi), %al 
        xorb       15(%esi), %al 
        pushfl
        cmpb       $0, 15(%edi) 
        jnl        false__hla_802
        xorl       %eax, %eax 
        subl       (%edi), %eax 
        mov        %eax, (%edi) 
        mov        $0, %eax 
        sbbl       4(%edi), %eax 
        mov        %eax, 4(%edi) 
        mov        $0, %eax 
        sbbl       8(%edi), %eax 
        mov        %eax, 8(%edi) 
        mov        $0, %eax 
        sbbl       12(%edi), %eax 
        mov        %eax, 12(%edi) 
false__hla_802:
        cmpb       $0, 15(%esi) 
        jnl        false__hla_803
        xorl       %eax, %eax 
        subl       (%esi), %eax 
        mov        %eax, (%esi) 
        mov        $0, %eax 
        sbbl       4(%esi), %eax 
        mov        %eax, 4(%esi) 
        mov        $0, %eax 
        sbbl       8(%esi), %eax 
        mov        %eax, 8(%esi) 
        mov        $0, %eax 
        sbbl       12(%esi), %eax 
        mov        %eax, 12(%esi) 
false__hla_803:
        mov        (%esi), %eax 
        orl        4(%esi), %eax 
        orl        8(%esi), %eax 
        orl        12(%esi), %eax 
        jnz        false__hla_804
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $8286 

        pushl      $str__hla_751 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        movb       $1, (%esi) 
false__hla_804:
        pushl      12(%edi) 
        pushl      8(%edi) 
        pushl      4(%edi) 
        pushl      (%edi) 
        pushl      12(%esi) 
        pushl      8(%esi) 
        pushl      4(%esi) 
        pushl      (%esi) 
        pushl      %ebp 
        addl       $-16, (%esp) 
        pushl      %edi 
        call       div128__hla_744
        popfl
        jns        false__hla_805
        xorl       %eax, %eax 
        subl       (%edi), %eax 
        mov        %eax, (%edi) 
        mov        $0, %eax 
        sbbl       4(%edi), %eax 
        mov        %eax, 4(%edi) 
        mov        $0, %eax 
        sbbl       8(%edi), %eax 
        mov        %eax, 8(%edi) 
        mov        $0, %eax 
        sbbl       12(%edi), %eax 
        mov        %eax, 12(%edi) 
false__hla_805:
        movb       $17, (%ebx) 
        movl       $int128_ste, (%ecx) 
        movsbl     7(%edi), %eax 
        movb       %ah, %al 
        cmpl       8(%edi), %eax 
        jne        false__hla_806
        cmpl       12(%edi), %eax 
        jne        false__hla_806
        movb       $16, (%ebx) 
        movl       $int64_ste, (%ecx) 
        movsbl     3(%edi), %eax 
        movb       %ah, %al 
        cmpl       4(%edi), %eax 
        jne        false__hla_808
        movb       $15, (%ebx) 
        movl       $int32_ste, (%ecx) 
        movsbl     1(%edi), %eax 
        movb       %ah, %al 
        cmpw       %ax, 2(%edi) 
        jne        false__hla_809
        movb       $14, (%ebx) 
        movl       $int16_ste, (%ecx) 
        movsbw     (%edi), %ax 
        cmpb       %ah, 1(%edi) 
        jne        false__hla_810
        movb       $13, (%ebx) 
        movl       $int8_ste, (%ecx) 
false__hla_810:
false__hla_809:
false__hla_808:
false__hla_806:
endswitch__hla_785:
default__hla_785:
        popl       %edi 
        popl       %esi 
        popl       %ecx 
        popl       %ebx 
xmodval:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure shlval */

shlval:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %edi 
        pushl      %ecx 
        mov        8(%ebp), %edi 
        mov        12(%ebp), %ecx 
        mov        (%ecx), %ecx 
        testl      %ecx, %ecx 
        jmp        continue__hla_812
while__hla_812:
        shll       $1, (%edi) 
        rcll       $1, 4(%edi) 
        rcll       $1, 8(%edi) 
        rcll       $1, 12(%edi) 
        decl       %ecx 
continue__hla_812:
        jnz        while__hla_812
exitloop__hla_812:

        pushl      20(%ebp) 
        pushl      16(%ebp) 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        popl       %ecx 
        popl       %edi 
xshlval:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure shrval */

shrval:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %edi 
        pushl      %ecx 
        mov        8(%ebp), %edi 
        mov        12(%ebp), %ecx 
        mov        (%ecx), %ecx 
        testl      %ecx, %ecx 
        jmp        continue__hla_815
while__hla_815:
        shrl       $1, 12(%edi) 
        rcrl       $1, 8(%edi) 
        rcrl       $1, 4(%edi) 
        rcrl       $1, (%edi) 
        decl       %ecx 
continue__hla_815:
        jnz        while__hla_815
exitloop__hla_815:

        pushl      20(%ebp) 
        pushl      16(%ebp) 

        pushl      %edi 

        call       compactType
        addl       $12, %esp 
        popl       %ecx 
        popl       %edi 
xshrval:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure bigmaxUns */

bigmaxUns:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        mov        12(%ebp), %esi 
        mov        16(%ebp), %edi 
        mov        12(%esi), %eax 
        cmpl       12(%edi), %eax 
        jb         setRight__hla_818
        ja         setLeft__hla_819
        mov        8(%esi), %eax 
        cmpl       8(%edi), %eax 
        jb         setRight__hla_818
        ja         setLeft__hla_819
        mov        4(%esi), %eax 
        cmpl       4(%edi), %eax 
        jb         setRight__hla_818
        ja         setLeft__hla_819
        mov        (%esi), %eax 
        cmpl       (%edi), %eax 
        jb         setRight__hla_818

setLeft__hla_819:
        mov        8(%ebp), %edi 
        mov        %eax, (%edi) 
        mov        4(%esi), %eax 
        mov        %eax, 4(%edi) 
        mov        8(%esi), %eax 
        mov        %eax, 8(%edi) 
        mov        12(%esi), %eax 
        mov        %eax, 12(%edi) 
        jmp        bmux__hla_820

setRight__hla_818:
        mov        8(%ebp), %esi 
        mov        (%edi), %eax 
        mov        %eax, (%esi) 
        mov        4(%edi), %eax 
        mov        %eax, 4(%esi) 
        mov        8(%edi), %eax 
        mov        %eax, 8(%esi) 
        mov        12(%edi), %eax 
        mov        %eax, 12(%esi) 

bmux__hla_820:
        popl       %edi 
        popl       %esi 
xbigmaxUns:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure bigmaxInt */

bigmaxInt:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        mov        12(%ebp), %esi 
        mov        16(%ebp), %edi 
        mov        12(%esi), %eax 
        cmpl       12(%edi), %eax 
        jl         setRight__hla_822
        jg         setLeft__hla_823
        mov        8(%esi), %eax 
        cmpl       8(%edi), %eax 
        jl         setRight__hla_822
        jg         setLeft__hla_823
        mov        4(%esi), %eax 
        cmpl       4(%edi), %eax 
        jl         setRight__hla_822
        jg         setLeft__hla_823
        mov        (%esi), %eax 
        cmpl       (%edi), %eax 
        jl         setRight__hla_822

setLeft__hla_823:
        mov        8(%ebp), %edi 
        mov        %eax, (%edi) 
        mov        4(%esi), %eax 
        mov        %eax, 4(%edi) 
        mov        8(%esi), %eax 
        mov        %eax, 8(%edi) 
        mov        12(%esi), %eax 
        mov        %eax, 12(%edi) 
        jmp        bmux__hla_824

setRight__hla_822:
        mov        8(%ebp), %esi 
        mov        (%edi), %eax 
        mov        %eax, (%esi) 
        mov        4(%edi), %eax 
        mov        %eax, 4(%esi) 
        mov        8(%edi), %eax 
        mov        %eax, 8(%esi) 
        mov        12(%edi), %eax 
        mov        %eax, 12(%esi) 

bmux__hla_824:
        popl       %edi 
        popl       %esi 
xbigmaxInt:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure bigminUns */

bigminUns:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        mov        12(%ebp), %esi 
        mov        16(%ebp), %edi 
        mov        12(%esi), %eax 
        cmpl       12(%edi), %eax 
        ja         setRight__hla_826
        jb         setLeft__hla_827
        mov        8(%esi), %eax 
        cmpl       8(%edi), %eax 
        ja         setRight__hla_826
        jb         setLeft__hla_827
        mov        4(%esi), %eax 
        cmpl       4(%edi), %eax 
        ja         setRight__hla_826
        jb         setLeft__hla_827
        mov        (%esi), %eax 
        cmpl       (%edi), %eax 
        ja         setRight__hla_826

setLeft__hla_827:
        mov        8(%ebp), %edi 
        mov        %eax, (%edi) 
        mov        4(%esi), %eax 
        mov        %eax, 4(%edi) 
        mov        8(%esi), %eax 
        mov        %eax, 8(%edi) 
        mov        12(%esi), %eax 
        mov        %eax, 12(%edi) 
        jmp        bmux__hla_828

setRight__hla_826:
        mov        8(%ebp), %esi 
        mov        (%edi), %eax 
        mov        %eax, (%esi) 
        mov        4(%edi), %eax 
        mov        %eax, 4(%esi) 
        mov        8(%edi), %eax 
        mov        %eax, 8(%esi) 
        mov        12(%edi), %eax 
        mov        %eax, 12(%esi) 

bmux__hla_828:
        popl       %edi 
        popl       %esi 
xbigminUns:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure bigminInt */

bigminInt:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %esi 
        pushl      %edi 
        mov        12(%ebp), %esi 
        mov        16(%ebp), %edi 
        mov        12(%esi), %eax 
        cmpl       12(%edi), %eax 
        jg         setRight__hla_830
        jl         setLeft__hla_831
        mov        8(%esi), %eax 
        cmpl       8(%edi), %eax 
        jg         setRight__hla_830
        jl         setLeft__hla_831
        mov        4(%esi), %eax 
        cmpl       4(%edi), %eax 
        jg         setRight__hla_830
        jl         setLeft__hla_831
        mov        (%esi), %eax 
        cmpl       (%edi), %eax 
        jg         setRight__hla_830

setLeft__hla_831:
        mov        8(%ebp), %edi 
        mov        %eax, (%edi) 
        mov        4(%esi), %eax 
        mov        %eax, 4(%edi) 
        mov        8(%esi), %eax 
        mov        %eax, 8(%edi) 
        mov        12(%esi), %eax 
        mov        %eax, 12(%edi) 
        jmp        bmux__hla_832

setRight__hla_830:
        mov        8(%ebp), %esi 
        mov        (%edi), %eax 
        mov        %eax, (%esi) 
        mov        4(%edi), %eax 
        mov        %eax, 4(%esi) 
        mov        8(%edi), %eax 
        mov        %eax, 8(%esi) 
        mov        12(%edi), %eax 
        mov        %eax, 12(%esi) 

bmux__hla_832:
        popl       %edi 
        popl       %esi 
xbigminInt:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure NumToStr__hla_834 */

NumToStr__hla_834:
        mov        12(%esi), %eax 
        xorl       %edx, %edx 
        divl       ten__hla_835 
        mov        %eax, 12(%esi) 
        mov        8(%esi), %eax 
        divl       ten__hla_835 
        mov        %eax, 8(%esi) 
        mov        4(%esi), %eax 
        divl       ten__hla_835 
        mov        %eax, 4(%esi) 
        mov        (%esi), %eax 
        divl       ten__hla_835 
        mov        %eax, (%esi) 
        orl        4(%esi), %eax 
        orl        8(%esi), %eax 
        orl        12(%esi), %eax 
        jz         false__hla_836
        pushl      %edx 
        call       NumToStr__hla_834
        popl       %edx 
false__hla_836:
        orb        $48, %dl 
        mov        %dl, (%edi) 
        incl       %edi 
        movb       $0, (%edi) 
        ret
xNumToStr__hla_834:

/* procedure UnsToStr */

UnsToStr:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        mov        8(%ebp), %edi 
        mov        12(%ebp), %esi 
        call       NumToStr__hla_834
        popl       %esi 
        popl       %edi 
        popl       %edx 
xUnsToStr:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure IntToStr */

IntToStr:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushl      %edx 
        pushl      %edi 
        pushl      %esi 
        mov        8(%ebp), %edi 
        mov        12(%ebp), %esi 
        cmpb       $0, 15(%esi) 
        jnl        false__hla_839
        movb       $45, (%edi) 
        incl       %edi 
        xorl       %eax, %eax 
        subl       (%esi), %eax 
        mov        %eax, (%esi) 
        mov        $0, %eax 
        sbbl       4(%esi), %eax 
        mov        %eax, 4(%esi) 
        mov        $0, %eax 
        sbbl       8(%esi), %eax 
        mov        %eax, 8(%esi) 
        mov        $0, %eax 
        sbbl       12(%esi), %eax 
        mov        %eax, 12(%esi) 
false__hla_839:
        call       NumToStr__hla_834
        popl       %esi 
        popl       %edi 
        popl       %edx 
xIntToStr:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure MulReslt10__hla_841 */

MulReslt10__hla_841:
        pushl      %eax 
        pushl      %ebx 
        shll       $1, -16(%ebp) 
        rcll       $1, -12(%ebp) 
        rcll       $1, -8(%ebp) 
        rcll       $1, -4(%ebp) 
        jc         Overflow__hla_842
        mov        -16(%ebp), %eax 
        mov        -12(%ebp), %ebx 
        mov        -8(%ebp), %ecx 
        mov        -4(%ebp), %edx 
        shll       $1, %eax 
        rcll       $1, %ebx 
        rcll       $1, %ecx 
        rcll       $1, %edx 
        jc         Overflow__hla_842
        shll       $1, %eax 
        rcll       $1, %ebx 
        rcll       $1, %ecx 
        rcll       $1, %edx 
        jc         Overflow__hla_842
        addl       %eax, -16(%ebp) 
        adcl       %ebx, -12(%ebp) 
        adcl       %ecx, -8(%ebp) 
        adcl       %edx, -4(%ebp) 
        jc         Overflow__hla_842
        popl       %ebx 
        popl       %eax 
        andl       $15, %eax 
        addl       %eax, -16(%ebp) 
        adcl       $0, -12(%ebp) 
        adcl       $0, -8(%ebp) 
        adcl       $0, -4(%ebp) 
        jc         Overflow2__hla_843
        ret

Overflow2__hla_843:
        pushl      %eax 
        pushl      %ebx 

Overflow__hla_842:
        popl       %ebx 
        popl       %eax 
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $8286 

        pushl      $str__hla_844 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
        ret
xMulReslt10__hla_841:

/* procedure DecStrToInt */

DecStrToInt:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $16, %esp 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        xorl       %eax, %eax 
        mov        %eax, -16(%ebp) 
        mov        %eax, -12(%ebp) 
        mov        %eax, -8(%ebp) 
        mov        %eax, -4(%ebp) 
        mov        8(%ebp), %ebx 
        jmp        start__hla_846

ForEachDigit__hla_847:
        call       MulReslt10__hla_841
        incl       %ebx 

start__hla_846:
        mov        (%ebx), %al 
        cmpb       $0, %al 
        jne        ForEachDigit__hla_847
        mov        12(%ebp), %ebx 
        mov        -16(%ebp), %eax 
        mov        %eax, (%ebx) 
        mov        -12(%ebp), %eax 
        mov        %eax, 4(%ebx) 
        mov        -8(%ebp), %eax 
        mov        %eax, 8(%ebx) 
        mov        -4(%ebp), %eax 
        mov        %eax, 12(%ebx) 
        mov        20(%ebp), %ebx 
        mov        16(%ebp), %eax 
        movb       $6, (%ebx) 
        movl       $uns128_ste, (%eax) 
        cmpl       $0, -4(%ebp) 
        jne        AllDone__hla_848
        cmpl       $0, -8(%ebp) 
        jne        AllDone__hla_848
        movb       $5, (%ebx) 
        movl       $uns64_ste, (%eax) 
        cmpl       $0, -12(%ebp) 
        jne        AllDone__hla_848
        movb       $4, (%ebx) 
        movl       $uns32_ste, (%eax) 
        cmpw       $0, -14(%ebp) 
        jne        AllDone__hla_848
        movb       $3, (%ebx) 
        movl       $uns16_ste, (%eax) 
        cmpb       $0, -15(%ebp) 
        jne        AllDone__hla_848
        movb       $2, (%ebx) 
        movl       $uns8_ste, (%eax) 

AllDone__hla_848:
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
xDecStrToInt:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure BinStrToInt */

BinStrToInt:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $16, %esp 
        pushl      %ebx 
        xorl       %eax, %eax 
        mov        %eax, -16(%ebp) 
        mov        %eax, -12(%ebp) 
        mov        %eax, -8(%ebp) 
        mov        %eax, -4(%ebp) 
        mov        8(%ebp), %ebx 
        jmp        start__hla_850

ForEachDigit__hla_851:
        shrb       $1, %al 
        rcll       $1, -16(%ebp) 
        rcll       $1, -12(%ebp) 
        rcll       $1, -8(%ebp) 
        rcll       $1, -4(%ebp) 
        jnc        start__hla_850
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $8286 

        pushl      $str__hla_852 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 

start__hla_850:
        incl       %ebx 
        mov        (%ebx), %al 
        cmpb       $0, %al 
        jne        ForEachDigit__hla_851
        mov        12(%ebp), %ebx 
        mov        -16(%ebp), %eax 
        mov        %eax, (%ebx) 
        mov        -12(%ebp), %eax 
        mov        %eax, 4(%ebx) 
        mov        -8(%ebp), %eax 
        mov        %eax, 8(%ebx) 
        mov        -4(%ebp), %eax 
        mov        %eax, 12(%ebx) 
        mov        20(%ebp), %ebx 
        mov        16(%ebp), %eax 
        movb       $12, (%ebx) 
        movl       $lword_ste, (%eax) 
        cmpl       $0, -4(%ebp) 
        jne        AllDone__hla_853
        cmpw       $0, -6(%ebp) 
        jne        AllDone__hla_853
        movb       $11, (%ebx) 
        movl       $tbyte_ste, (%eax) 
        cmpw       $0, -8(%ebp) 
        jne        AllDone__hla_853
        movb       $10, (%ebx) 
        movl       $qword_ste, (%eax) 
        cmpl       $0, -12(%ebp) 
        jne        AllDone__hla_853
        movb       $9, (%ebx) 
        movl       $dword_ste, (%eax) 
        cmpw       $0, -14(%ebp) 
        jne        AllDone__hla_853
        movb       $8, (%ebx) 
        movl       $word_ste, (%eax) 
        cmpb       $0, -15(%ebp) 
        jne        AllDone__hla_853
        movb       $7, (%ebx) 
        movl       $byte_ste, (%eax) 

AllDone__hla_853:
        popl       %ebx 
xBinStrToInt:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure HexStrToInt */

HexStrToInt:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $16, %esp 
        pushl      %ebx 
        pushl      %ecx 
        xorl       %eax, %eax 
        mov        %eax, -16(%ebp) 
        mov        %eax, -12(%ebp) 
        mov        %eax, -8(%ebp) 
        mov        %eax, -4(%ebp) 
        mov        8(%ebp), %ebx 
        jmp        start__hla_855

ForEachDigit__hla_856:
        cmpb       $57, %al 
        jna        false__hla_857
        addb       $9, %al 
false__hla_857:
        shlb       $4, %al 
        mov        $4, %ecx 
false__hla_858:
repeat__hla_858:
        shlb       $1, %al 
        rcll       $1, -16(%ebp) 
        rcll       $1, -12(%ebp) 
        rcll       $1, -8(%ebp) 
        rcll       $1, -4(%ebp) 
        jnc        false__hla_859
        pushl      %ebx 
        movl       %esp, %ebx 
        subl       $28, %esp 
        andl       $-16, %esp 
        pushl      $str__hla_522 
        pushl      $8286 

        pushl      $str__hla_860 

        call       HLAerror
        movl       %ebx, %esp 
        popl       %ebx 
false__hla_859:
        decl       %ecx 
continue__hla_858:
        jnz        repeat__hla_858
exitloop__hla_858:


start__hla_855:
        incl       %ebx 
        mov        (%ebx), %al 
        cmpb       $0, %al 
        jne        ForEachDigit__hla_856
        mov        12(%ebp), %ebx 
        mov        -16(%ebp), %eax 
        mov        %eax, (%ebx) 
        mov        -12(%ebp), %eax 
        mov        %eax, 4(%ebx) 
        mov        -8(%ebp), %eax 
        mov        %eax, 8(%ebx) 
        mov        -4(%ebp), %eax 
        mov        %eax, 12(%ebx) 
        mov        20(%ebp), %ebx 
        mov        16(%ebp), %eax 
        movb       $12, (%ebx) 
        movl       $lword_ste, (%eax) 
        cmpl       $0, -4(%ebp) 
        jne        AllDone__hla_861
        cmpw       $0, -6(%ebp) 
        jne        AllDone__hla_861
        movb       $11, (%ebx) 
        movl       $tbyte_ste, (%eax) 
        cmpw       $0, -8(%ebp) 
        jne        AllDone__hla_861
        movb       $10, (%ebx) 
        movl       $qword_ste, (%eax) 
        cmpl       $0, -12(%ebp) 
        jne        AllDone__hla_861
        movb       $9, (%ebx) 
        movl       $dword_ste, (%eax) 
        cmpw       $0, -14(%ebp) 
        jne        AllDone__hla_861
        movb       $8, (%ebx) 
        movl       $word_ste, (%eax) 
        cmpb       $0, -15(%ebp) 
        jne        AllDone__hla_861
        movb       $7, (%ebx) 
        movl       $byte_ste, (%eax) 

AllDone__hla_861:
        popl       %ecx 
        popl       %ebx 
xHexStrToInt:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure real80to64 */

real80to64:
        pushl      %ebp 
        movl       %esp, %ebp 
        mov        8(%ebp), %eax 
        fldt       (%eax) 
        fstpl      (%eax) 
        movl       $0, 8(%eax) 
        movl       $0, 12(%eax) 
xreal80to64:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure real80to32 */

real80to32:
        pushl      %ebp 
        movl       %esp, %ebp 
        mov        8(%ebp), %eax 
        fldt       (%eax) 
        fstps      (%eax) 
        movl       $0, 4(%eax) 
        movl       $0, 8(%eax) 
        movl       $0, 12(%eax) 
xreal80to32:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure unsf80 */

unsf80:
        pushl      %ebp 
        movl       %esp, %ebp 
        mov        8(%ebp), %eax 
        fildl      (%eax) 
        mov        12(%ebp), %eax 
        fstpt      (%eax) 
xunsf80:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure f80int */

f80int:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $4, %esp 
        fstcw      -4(%ebp) 
        fldcw      fcw__hla_866 
        fldt       8(%ebp) 
        mov        20(%ebp), %eax 
        fistpl     (%eax) 
        fldcw      -4(%ebp) 
xf80int:
        movl       %ebp, %esp 
        popl       %ebp 
        ret

/* procedure fadd80 */

fadd80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fldt       24(%ebp) 
        faddp      %st(0), %st(1) 
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xfadd80:

/* procedure fsub80 */

fsub80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fldt       24(%ebp) 
        fsubrp     %st(0), %st(1) 
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xfsub80:

/* procedure fmul80 */

fmul80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fldt       24(%ebp) 
        fmulp      %st(0), %st(1) 
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xfmul80:

/* procedure fdiv80 */

fdiv80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fldt       24(%ebp) 
        fdivrp     %st(0), %st(1) 
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xfdiv80:

/* procedure fneg80 */

fneg80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fchs
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xfneg80:

/* procedure fabs80 */

fabs80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fabs
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xfabs80:

/* procedure fmax80 */

fmax80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fldt       24(%ebp) 
        fcom       %st(1) 
        fstsw      %ax 
        sahf
        mov        8(%ebp), %eax 
        jb         false__hla_874
        fstpt      24(%ebp) 
        fstpt      (%eax) 
        jmp        endif__hla_874
false__hla_874:
        fstpt      (%eax) 
        fstpt      12(%ebp) 
endif__hla_874:
        popl       %ebp 
        ret
xfmax80:

/* procedure fmin80 */

fmin80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fldt       24(%ebp) 
        fcom       %st(1) 
        fstsw      %ax 
        sahf
        mov        8(%ebp), %eax 
        jnb        false__hla_876
        fstpt      24(%ebp) 
        fstpt      (%eax) 
        jmp        endif__hla_876
false__hla_876:
        fstpt      (%eax) 
        fstpt      12(%ebp) 
endif__hla_876:
        popl       %ebp 
        ret
xfmin80:

/* procedure feq80 */

feq80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       20(%ebp) 
        fldt       8(%ebp) 
        fcompp     
        fstsw      %ax 
        sahf
        mov        $0, %eax 
        setz       %al 
        popl       %ebp 
        ret
xfeq80:

/* procedure fne80 */

fne80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       20(%ebp) 
        fldt       8(%ebp) 
        fcompp     
        fstsw      %ax 
        sahf
        mov        $0, %eax 
        setnz      %al 
        popl       %ebp 
        ret
xfne80:

/* procedure flt80 */

flt80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       20(%ebp) 
        fldt       8(%ebp) 
        fcompp     
        fstsw      %ax 
        sahf
        mov        $0, %eax 
        setb       %al 
        popl       %ebp 
        ret
xflt80:

/* procedure fle80 */

fle80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       20(%ebp) 
        fldt       8(%ebp) 
        fcompp     
        fstsw      %ax 
        sahf
        mov        $0, %eax 
        setbe      %al 
        popl       %ebp 
        ret
xfle80:

/* procedure fgt80 */

fgt80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       20(%ebp) 
        fldt       8(%ebp) 
        fcompp     
        fstsw      %ax 
        sahf
        mov        $0, %eax 
        setnbe     %al 
        popl       %ebp 
        ret
xfgt80:

/* procedure fge80 */

fge80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       20(%ebp) 
        fldt       8(%ebp) 
        fcompp     
        fstsw      %ax 
        sahf
        mov        $0, %eax 
        setnb      %al 
        popl       %ebp 
        ret
xfge80:

/* procedure ceil80 */

ceil80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fstcw      fcwSave__hla_884 
        pushw      fcwSave__hla_884 
        popw       fcw__hla_885 
        movw       $3967, fcw__hla_885 
        fldcw      fcw__hla_885 
        mov        20(%ebp), %ax 
        andw       $32767, %ax 
        cmpw       $16383, %ax 
        jnb        false__hla_886
        testb      $128, 21(%ebp) 
        jns        false__hla_887
        fldz
        jmp        endif__hla_887
false__hla_887:
        cmpl       $0, 12(%ebp) 
        jnz        IsOne__hla_888
        cmpl       $0, 16(%ebp) 
        jnz        IsOne__hla_888
        cmpw       $0, 20(%ebp) 
        jnz        IsOne__hla_888
        fldz
        jmp        WasZero__hla_889

IsOne__hla_888:
        fld1

WasZero__hla_889:
endif__hla_887:
        jmp        endif__hla_886
false__hla_886:
        fldt       12(%ebp) 
        frndint
        fldt       12(%ebp) 
        fcomp      %st(1) 
        fstsw      %ax 
        sahf
        jz         false__hla_890
        cmpb       $0, 21(%ebp) 
        jnge       false__hla_891
        fld1
        faddp      %st(0), %st(1) 
false__hla_891:
false__hla_890:
endif__hla_886:
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        fldcw      fcwSave__hla_884 
        popl       %ebp 
        ret
xceil80:

/* procedure floor80 */

floor80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fstcw      fcwSave__hla_893 
        pushw      fcwSave__hla_893 
        popw       fcw__hla_894 
        orw        $3967, fcw__hla_894 
        fldcw      fcw__hla_894 
        mov        20(%ebp), %ax 
        andw       $32767, %ax 
        cmpw       $16383, %ax 
        jnb        false__hla_895
        fldz
        jmp        endif__hla_895
false__hla_895:
        fldt       12(%ebp) 
        frndint
        fldt       12(%ebp) 
        fcomp      %st(1) 
        fstsw      %ax 
        sahf
        jz         false__hla_896
        cmpb       $0, 21(%ebp) 
        jnl        false__hla_897
        fld1
        fsubrp     %st(0), %st(1) 
false__hla_897:
false__hla_896:
endif__hla_895:
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        fldcw      fcwSave__hla_893 
        popl       %ebp 
        ret
xfloor80:

/* procedure cos80 */

cos80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fcos
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xcos80:

/* procedure sin80 */

sin80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fsin
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xsin80:

/* procedure tan80 */

tan80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fsincos
        fdivrp     %st(0), %st(1) 
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xtan80:

/* procedure log80 */

log80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fld1
        fldt       12(%ebp) 
        fyl2x
        fldl2e
        fdivrp     %st(0), %st(1) 
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xlog80:

/* procedure log1080 */

log1080:
        pushl      %ebp 
        movl       %esp, %ebp 
        fld1
        fldt       12(%ebp) 
        fyl2x
        fldl2t
        fdivrp     %st(0), %st(1) 
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xlog1080:

/* procedure sqrt80 */

sqrt80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fsqrt
        mov        8(%ebp), %eax 
        fstpt      (%eax) 
        popl       %ebp 
        ret
xsqrt80:

/* procedure exp80 */

exp80:
        pushl      %ebp 
        movl       %esp, %ebp 
        fldt       12(%ebp) 
        fldl2e
        fmulp      %st(0), %st(1) 
        fstcw      SaveCW__hla_905 
        movw       $3967, MaskedCW__hla_906 
        fld        %st(0) 
        frndint
        fxch
        fsubr      %st(1), %st(0) 
        f2xm1
        fld1
        faddp      %st(0), %st(1) 
        fxch
        fld1
        fscale
        fstp       %st(1) 
        fmulp      %st(0), %st(1) 
        fldcw      SaveCW__hla_905 
        popl       %ebp 
        ret
xexp80:

/* procedure DigitsToRightOfDecPt__hla_910 */

DigitsToRightOfDecPt__hla_910:
        decl       %esi 

DigitLoop__hla_911:
        xorl       %eax, %eax 
false__hla_912:
repeat__hla_912:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_912:
        cmpb       $95, %al 
        je         repeat__hla_912
exitloop__hla_912:

        subb       $48, %al 
        cmpb       $10, %al 
        jae        EndDigits__hla_913
        decl       %edx 
        testl      %ebx, %ebx 
        jz         DigitLoop__hla_911
        mov        %al, -20(%ebp,%ebx,1) 
        decl       %ebx 
        jmp        DigitLoop__hla_911

EndDigits__hla_913:
        ret
xDigitsToRightOfDecPt__hla_910:

/* procedure atold */

atold:
        pushl      %ebp 
        movl       %esp, %ebp 
        subl       $40, %esp 
        finit
        pushl      %eax 
        pushl      %ebx 
        pushl      %ecx 
        pushl      %edx 
        pushl      %esi 
        mov        12(%ebp), %esi 
        xorl       %eax, %eax 
        mov        %eax, -20(%ebp) 
        mov        %eax, -16(%ebp) 
        mov        %eax, -12(%ebp) 
        mov        %eax, -8(%ebp) 
        mov        %eax, -4(%ebp) 
        mov        %eax, -30(%ebp) 
        mov        %eax, -26(%ebp) 
        mov        %ax, -22(%ebp) 
        decl       %esi 

whileDelimLoop__hla_915:
        xorl       %eax, %eax 
false__hla_916:
repeat__hla_916:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_916:
        cmpb       $95, %al 
        je         repeat__hla_916
exitloop__hla_916:

        cmpl       $128, %eax 
        jnae       false__hla_917
        clc
        jmp        endif__hla_917
false__hla_917:
        btl        %eax, Delimiters__hla_909 
endif__hla_917:
        jc         whileDelimLoop__hla_915
        mov        $0, %cl 
        cmpb       $45, %al 
        jne        false__hla_918
        xorl       %eax, %eax 
false__hla_919:
repeat__hla_919:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_919:
        cmpb       $95, %al 
        je         repeat__hla_919
exitloop__hla_919:

        mov        $1, %cl 
        jmp        endif__hla_918
false__hla_918:
        cmpb       $43, %al 
        jne        false__hla_920
        xorl       %eax, %eax 
false__hla_921:
repeat__hla_921:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_921:
        cmpb       $95, %al 
        je         repeat__hla_921
exitloop__hla_921:

false__hla_920:
endif__hla_918:
        mov        $-18, %edx 
        mov        $18, %ebx 
        pushl      %esi 
        cmpb       $46, %al 
        jne        false__hla_922
        xorl       %eax, %eax 
false__hla_923:
repeat__hla_923:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_923:
        cmpb       $95, %al 
        je         repeat__hla_923
exitloop__hla_923:

false__hla_922:
        cmpb       $48, %al 
        jb         Failed__hla_924
        cmpb       $57, %al 
        ja         Failed__hla_924
        popl       %esi 
        decl       %esi 
        xorl       %eax, %eax 
false__hla_925:
repeat__hla_925:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_925:
        cmpb       $95, %al 
        je         repeat__hla_925
exitloop__hla_925:

        jmp        continue__hla_926
while__hla_926:
        xorl       %eax, %eax 
false__hla_928:
repeat__hla_928:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_928:
        cmpb       $95, %al 
        je         repeat__hla_928
exitloop__hla_928:

continue__hla_926:
        cmpb       $48, %al 
        je         while__hla_926
exitloop__hla_926:

        cmpb       $46, %al 
        jne        false__hla_929
        incl       %edx 
false__hla_930:
repeat__hla_930:
        decl       %edx 
        xorl       %eax, %eax 
false__hla_931:
repeat__hla_931:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_931:
        cmpb       $95, %al 
        je         repeat__hla_931
exitloop__hla_931:

continue__hla_930:
        cmpb       $48, %al 
        je         repeat__hla_930
exitloop__hla_930:

        jmp        endif__hla_929
false__hla_929:

while__hla_932:
continue__hla_933:
        subb       $48, %al 
        cmpb       $10, %al 
        jae        false__hla_932
true__hla_932:
        incl       %edx 
        testl      %ebx, %ebx 
        je         false__hla_934
        mov        %al, -20(%ebp,%ebx,1) 
        decl       %ebx 
false__hla_934:
        xorl       %eax, %eax 
false__hla_935:
repeat__hla_935:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_935:
        cmpb       $95, %al 
        je         repeat__hla_935
exitloop__hla_935:

        jmp        while__hla_932
exitloop__hla_932:
exitloop__hla_933:
false__hla_932:

        cmpb       $-2, %al 
        jne        false__hla_936
        xorl       %eax, %eax 
false__hla_937:
repeat__hla_937:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_937:
        cmpb       $95, %al 
        je         repeat__hla_937
exitloop__hla_937:

false__hla_936:
endif__hla_929:
        decl       %esi 
        xorl       %eax, %eax 
false__hla_938:
repeat__hla_938:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_938:
        cmpb       $95, %al 
        je         repeat__hla_938
exitloop__hla_938:


while__hla_939:
continue__hla_940:
        subb       $48, %al 
        cmpb       $10, %al 
        jae        false__hla_939
true__hla_939:
        testl      %ebx, %ebx 
        je         false__hla_941
        mov        %al, -20(%ebp,%ebx,1) 
        decl       %ebx 
false__hla_941:
        xorl       %eax, %eax 
false__hla_942:
repeat__hla_942:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_942:
        cmpb       $95, %al 
        je         repeat__hla_942
exitloop__hla_942:

        jmp        while__hla_939
exitloop__hla_939:
exitloop__hla_940:
false__hla_939:

        decl       %esi 
        xorl       %eax, %eax 
false__hla_943:
repeat__hla_943:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_943:
        cmpb       $95, %al 
        je         repeat__hla_943
exitloop__hla_943:

        cmpb       $101, %al 
        je         true__hla_944
        cmpb       $69, %al 
        jne        false__hla_944
true__hla_944:
        xorl       %eax, %eax 
false__hla_945:
repeat__hla_945:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_945:
        cmpb       $95, %al 
        je         repeat__hla_945
exitloop__hla_945:

        cmpb       $45, %al 
        setz       %ch 
        cmpb       $43, %al 
        je         true__hla_946
        cmpb       $45, %al 
        jne        false__hla_946
true__hla_946:
        xorl       %eax, %eax 
false__hla_947:
repeat__hla_947:
        incl       %esi 
        mov        (%esi), %al 
continue__hla_947:
        cmpb       $95, %al 
        je         repeat__hla_947
exitloop__hla_947:

false__hla_946:
        subb       $48, %al 
        cmpb       $10, %al 
        jae        Failed__hla_924
        xorl       %ebx, %ebx 

ExpLoop__hla_948:
        movzbl     (%esi), %eax 
        subb       $48, %al 
        cmpb       $10, %al 
        jae        ExpDone__hla_949
        imul       $10, %ebx, %ebx 
        addl       %eax, %ebx 
        incl       %esi 
        jmp        ExpLoop__hla_948

ExpDone__hla_949:
        cmpb       $1, %ch 
        jne        false__hla_950
        negl       %ebx 
false__hla_950:
        addl       %ebx, %edx 
false__hla_944:
        cmpl       $4930, %edx 
        jg         Failed__hla_924
        cmpl       $-4930, %edx 
        jl         Failed__hla_924
        mov        -2(%ebp), %al 
        shlb       $4, %al 
        orb        -3(%ebp), %al 
        mov        %al, -22(%ebp) 
        mov        -4(%ebp), %al 
        shlb       $4, %al 
        orb        -5(%ebp), %al 
        mov        %al, -23(%ebp) 
        mov        -6(%ebp), %al 
        shlb       $4, %al 
        orb        -7(%ebp), %al 
        mov        %al, -24(%ebp) 
        mov        -8(%ebp), %al 
        shlb       $4, %al 
        orb        -9(%ebp), %al 
        mov        %al, -25(%ebp) 
        mov        -10(%ebp), %al 
        shlb       $4, %al 
        orb        -11(%ebp), %al 
        mov        %al, -26(%ebp) 
        mov        -12(%ebp), %al 
        shlb       $4, %al 
        orb        -13(%ebp), %al 
        mov        %al, -27(%ebp) 
        mov        -14(%ebp), %al 
        shlb       $4, %al 
        orb        -15(%ebp), %al 
        mov        %al, -28(%ebp) 
        mov        -16(%ebp), %al 
        shlb       $4, %al 
        orb        -17(%ebp), %al 
        mov        %al, -29(%ebp) 
        mov        -18(%ebp), %al 
        shlb       $4, %al 
        orb        -19(%ebp), %al 
        mov        %al, -30(%ebp) 
        fbld       -30(%ebp) 
        mov        $-10, %ebx 
        cmpl       $0, %edx 
        jnl        false__hla_951
        negl       %edx 
        shll       $19, %edx 
        jmp        continue__hla_952
while__hla_952:
        addl       $10, %ebx 
        shll       $1, %edx 
        jnc        false__hla_954
        fldt       PotTbl__hla_908(%ebx) 
        fdivrp     %st(0), %st(1) 
false__hla_954:
continue__hla_952:
        testl      %edx, %edx 
        jne        while__hla_952
exitloop__hla_952:

        jmp        endif__hla_951
false__hla_951:
        shll       $19, %edx 
        jmp        continue__hla_955
while__hla_955:
        addl       $10, %ebx 
        shll       $1, %edx 
        jnc        false__hla_957
true__hla_957:
        fldt       PotTbl__hla_908(%ebx) 
        fmulp      %st(0), %st(1) 
false__hla_957:
continue__hla_955:
        testl      %edx, %edx 
        jne        while__hla_955
exitloop__hla_955:

endif__hla_951:
        cmpb       $1, %cl 
        jne        false__hla_958
        fchs
false__hla_958:
        jmp        GoodEndOfFP__hla_959

Failed__hla_924:
        fldz

GoodEndOfFP__hla_959:
        mov        8(%ebp), %eax 
        fstpt      (%eax) 

ExitAtold__hla_960:
        popl       %esi 
        popl       %edx 
        popl       %ecx 
        popl       %ebx 
        popl       %eax 
        movl       %ebp, %esp 
        popl       %ebp 
        ret
xatold:

/* procedure htoa__hla_962 */

htoa__hla_962:
        pushl      %eax 
        movb       %al, %ah 
        shrb       $4, %al 
        orb        $48, %al 
        stosb
        movb       %ah, %al 
        andb       $15, %al 
        orb        $48, %al 
        stosb
        popl       %eax 
        ret
xhtoa__hla_962:

/* procedure FPDigits__hla_964 */

FPDigits__hla_964:
        fldz
        fcomp      %st(1) 
        fstsw      %ax 
        sahf
        jnz        false__hla_972
        mov        $808464432, %eax 
        stosl
        stosl
        stosl
        stosl
        stosl
        stosl
        xorl       %edx, %edx 
        mov        $32, %bl 
        jmp        endif__hla_972
false__hla_972:
        mov        $32, %bl 
        jna        false__hla_973
        fabs
        mov        $45, %bl 
false__hla_973:
        xorl       %edx, %edx 
        fld1
        fcomp      %st(1) 
        fstsw      %ax 
        sahf
        jnae       false__hla_974
forever__hla_976:
continue__hla_975:
        fldt       OneEm10__hla_968 
        fcomp      %st(1) 
        fstsw      %ax 
        sahf
        jbe        exitloop__hla_975
        subl       $10, %edx 
        fldt       OneE10__hla_967 
        fmulp      %st(0), %st(1) 
        jmp        forever__hla_976
exitloop__hla_975:

forever__hla_979:
continue__hla_978:
        fld1
        fcomp      %st(1) 
        fstsw      %ax 
        sahf
        jbe        exitloop__hla_978
        decl       %edx 
        fldt       Ten__hla_969 
        fmulp      %st(0), %st(1) 
        jmp        forever__hla_979
exitloop__hla_978:

        fldt       FiveEm18__hla_970 
        faddp      %st(0), %st(1) 
        fldt       Ten__hla_969 
        fcomp      %st(1) 
        fstsw      %ax 
        sahf
        jnbe       false__hla_981
        fldt       Ten__hla_969 
        fdivrp     %st(0), %st(1) 
        incl       %edx 
false__hla_981:
        jmp        endif__hla_974
false__hla_974:
forever__hla_983:
continue__hla_982:
        fldt       OneE10__hla_967 
        fcomp      %st(1) 
        fstsw      %ax 
        sahf
        ja         exitloop__hla_982
        addl       $10, %edx 
        fldt       OneE10__hla_967 
        fdivrp     %st(0), %st(1) 
        jmp        forever__hla_983
exitloop__hla_982:

forever__hla_986:
continue__hla_985:
        fldt       Ten__hla_969 
        fcomp      %st(1) 
        fstsw      %ax 
        sahf
        ja         exitloop__hla_985
        incl       %edx 
        fldt       Ten__hla_969 
        fdivrp     %st(0), %st(1) 
        jmp        forever__hla_986
exitloop__hla_985:

endif__hla_974:
        fld        %st(0) 
        subl       $20, %esp 
        fldt       TenTo17__hla_965 
        fmulp      %st(0), %st(1) 
        fbstp      (%esp) 
        cmpb       $153, 9(%esp) 
        jna        false__hla_988
        fldt       TenTo16__hla_966 
        fmulp      %st(0), %st(1) 
        fbstp      (%esp) 
        incl       %edx 
        jmp        endif__hla_988
false__hla_988:
        fstp       %st(0) 
endif__hla_988:
        mov        $8, %ecx 
false__hla_989:
repeat__hla_989:
        mov        (%esp,%ecx,1), %al 
        call       htoa__hla_962
        decl       %ecx 
continue__hla_989:
        cmpl       $0, %ecx 
        jnl        repeat__hla_989
exitloop__hla_989:

        addl       $20, %esp 
endif__hla_972:
        movl       %edx, %eax 
        ret
xFPDigits__hla_964:

/* procedure e80Str */

e80Str:
        pushl      %ebp 
        movl       %esp, %ebp 
        pushfl
        pushal
        cld
        finit
        cmpl       $0, 18(%ebp) 
        jne        false__hla_994
        cmpl       $0, 14(%ebp) 
        jne        false__hla_994
        mov        12(%ebp), %ax 
        andw       $65520, %ax 
        jne        false__hla_994
true__hla_994:
        mov        8(%ebp), %ebx 
        movb       $48, (%ebx) 
        movb       $46, 1(%ebx) 
        movb       $48, 2(%ebx) 
        movb       $0, 3(%ebx) 
        jmp        endif__hla_995
false__hla_994:
        fldt       12(%ebp) 
        lea        Digits__hla_991, %edi 
        call       FPDigits__hla_964
        mov        %eax, Exponent__hla_992 
        mov        %bl, Sign__hla_993 
        mov        8(%ebp), %edi 
        xorl       %edx, %edx 
        mov        Sign__hla_993, %al 
        cmpb       $45, %al 
        je         false__hla_996
        mov        $32, %al 
false__hla_996:
        stosb
        mov        Digits__hla_991, %al 
        stosb
        mov        $46, %al 
        stosb
        mov        $17, %ecx 
        lea        Digits__hla_991+1, %esi 
        rep movsb
        mov        $101, %al 
        stosb
        mov        $43, %al 
        cmpl       $0, Exponent__hla_992 
        jnl        false__hla_997
        mov        $45, %al 
        negl       Exponent__hla_992 
false__hla_997:
        stosb
        mov        Exponent__hla_992, %eax 
        xorl       %edx, %edx 
        mov        $1000, %ebx 
        divl       %ebx 
        orb        $48, %al 
        stosb
        movl       %edx, %eax 
        xorl       %edx, %edx 
        mov        $100, %ebx 
        divl       %ebx 
        orb        $48, %al 
        stosb
        movl       %edx, %eax 
        xorl       %edx, %edx 
        mov        $10, %ebx 
        divl       %ebx 
        orb        $48, %al 
        stosb
        movb       %dl, %al 
        orb        $48, %al 
        stosb
        mov        $0, %al 
        stosb
endif__hla_995:
        popal
        popfl
        popl       %ebp 
        ret
xe80Str:




